
ReadGyroscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e6c  08008b68  08008b68  00018b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9dc  0800a9dc  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          0000041c  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001098a  00000000  00000000  0002028f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000314c  00000000  00000000  00030c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001090  00000000  00000000  00033d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c6b  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002665c  00000000  00000000  00035a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001374e  00000000  00000000  0005c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfe34  00000000  00000000  0006f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005400  00000000  00000000  0014f644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00154a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b50 	.word	0x08008b50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000220 	.word	0x20000220
 80001ec:	08008b50 	.word	0x08008b50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_GPIO_Init+0x9c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0xa0>)
 8000f36:	f002 fec9 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_GPIO_Init+0xa0>)
 8000f54:	f002 fc02 	bl	800375c <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40021800 	.word	0x40021800

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b092      	sub	sp, #72	; 0x48
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f001 fdf9 	bl	8002b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f873 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff ffa5 	bl	8000ec4 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f7a:	f000 f8e5 	bl	8001148 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  //BSP_SDRAM_Init();
  //*((uint32_t*)SDRAM_DEVICE_ADDR)=0x28;
  //value=*((uint32_t*)SDRAM_DEVICE_ADDR);
  float AngleRates[3]={0};
 8000f7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
  char xStr[20], yStr[20], zStr[20];
  //BSP_GYRO_Init();
  //BSP_GYRO_ReadID();
  //I3G4250D_Init();
  I3G4250D_ReadID();
 8000f8a:	f000 facc 	bl	8001526 <I3G4250D_ReadID>
  BSP_LCD_Init();//init LCD
 8000f8e:	f000 ff87 	bl	8001ea0 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f92:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f96:	2001      	movs	r0, #1
 8000f98:	f001 f804 	bl	8001fa4 <BSP_LCD_LayerDefaultInit>
  //BSP_LCD_LayerDefaultInit(1, 0xC0000000);
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f001 f865 	bl	800206c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000fa2:	f001 fa17 	bl	80023d4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);//clear the LCD on blue color
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	f001 f8d1 	bl	8002150 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);//set text background color
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb2:	f001 f883 	bl	80020bc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);//set text color
 8000fb6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fba:	f001 f867 	bl	800208c <BSP_LCD_SetTextColor>

  //write text
  //BSP_LCD_DisplayStringAtLine(2,"Cube STM32");
  //BSP_LCD_DisplayStringAtLine(3,"BSP");
  //BSP_LCD_DisplayStringAtLine(4,"LCD DEMO");
  BSP_LCD_DisplayStringAt(1,0,"Gyroscope",CENTER_MODE);
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <main+0xe0>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 f92f 	bl	8002228 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAtLine(2,"value");
 8000fca:	4920      	ldr	r1, [pc, #128]	; (800104c <main+0xe4>)
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f001 f9e9 	bl	80023a4 <BSP_LCD_DisplayStringAtLine>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  I3G4250D_ReadXYZAngRate(AngleRates);
 8000fd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fab6 	bl	8001548 <I3G4250D_ReadXYZAngRate>
	  sprintf(xStr, "X: %.2f", AngleRates[0]);
 8000fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fac2 	bl	8000568 <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fec:	4918      	ldr	r1, [pc, #96]	; (8001050 <main+0xe8>)
 8000fee:	f005 fc51 	bl	8006894 <siprintf>
	  BSP_LCD_DisplayStringAtLine(4,xStr);
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f001 f9d3 	bl	80023a4 <BSP_LCD_DisplayStringAtLine>
	  sprintf(yStr, "Y: %.2f", AngleRates[1]);
 8000ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fab1 	bl	8000568 <__aeabi_f2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	f107 0014 	add.w	r0, r7, #20
 800100e:	4911      	ldr	r1, [pc, #68]	; (8001054 <main+0xec>)
 8001010:	f005 fc40 	bl	8006894 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,yStr);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	2005      	movs	r0, #5
 800101c:	f001 f9c2 	bl	80023a4 <BSP_LCD_DisplayStringAtLine>
	  sprintf(zStr, "Z: %.2f", AngleRates[2]);
 8001020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff faa0 	bl	8000568 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4638      	mov	r0, r7
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <main+0xf0>)
 8001030:	f005 fc30 	bl	8006894 <siprintf>
	  BSP_LCD_DisplayStringAtLine(6,zStr);
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	2006      	movs	r0, #6
 800103a:	f001 f9b3 	bl	80023a4 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(500);
 800103e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001042:	f001 fe01 	bl	8002c48 <HAL_Delay>
  {
 8001046:	e7c4      	b.n	8000fd2 <main+0x6a>
 8001048:	08008b68 	.word	0x08008b68
 800104c:	08008b74 	.word	0x08008b74
 8001050:	08008b7c 	.word	0x08008b7c
 8001054:	08008b84 	.word	0x08008b84
 8001058:	08008b8c 	.word	0x08008b8c

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 fc75 	bl	800695a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <SystemClock_Config+0xd8>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <SystemClock_Config+0xd8>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xd8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xdc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a24      	ldr	r2, [pc, #144]	; (8001138 <SystemClock_Config+0xdc>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xdc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010d0:	23b4      	movs	r3, #180	; 0xb4
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 f937 	bl	8004354 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ec:	f000 f826 	bl	800113c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f0:	f003 f8e0 	bl	80042b4 <HAL_PWREx_EnableOverDrive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010fa:	f000 f81f 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2105      	movs	r1, #5
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fb91 	bl	8004844 <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001128:	f000 f808 	bl	800113c <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3750      	adds	r7, #80	; 0x50
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_SPI5_Init+0x64>)
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_SPI5_Init+0x64>)
 8001154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_SPI5_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_SPI5_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_SPI5_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_SPI5_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_SPI5_Init+0x64>)
 8001174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_SPI5_Init+0x64>)
 800117c:	2218      	movs	r2, #24
 800117e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_SPI5_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_SPI5_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_SPI5_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_SPI5_Init+0x64>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_SPI5_Init+0x64>)
 800119a:	f003 ff5a 	bl	8005052 <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80011a4:	f7ff ffca 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000238 	.word	0x20000238
 80011b0:	40015000 	.word	0x40015000

080011b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_SPI_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12c      	bne.n	8001230 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800120e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001220:	2305      	movs	r3, #5
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0x8c>)
 800122c:	f002 fa96 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40015000 	.word	0x40015000
 800123c:	40023800 	.word	0x40023800
 8001240:	40021400 	.word	0x40021400

08001244 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_SPI_MspDeInit+0x30>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10a      	bne.n	800126c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_SPI_MspDeInit+0x34>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_SPI_MspDeInit+0x34>)
 800125c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001262:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_SPI_MspDeInit+0x38>)
 8001268:	f002 fc24 	bl	8003ab4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40015000 	.word	0x40015000
 8001278:	40023800 	.word	0x40023800
 800127c:	40021400 	.word	0x40021400

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f001 fc74 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_kill>:

int _kill(int pid, int sig)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133e:	f005 fb5f 	bl	8006a00 <__errno>
 8001342:	4603      	mov	r3, r0
 8001344:	2216      	movs	r2, #22
 8001346:	601a      	str	r2, [r3, #0]
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_exit>:

void _exit (int status)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe7 	bl	8001334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001366:	e7fe      	b.n	8001366 <_exit+0x12>

08001368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
  }

  return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
  }
  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f005 fac4 	bl	8006a00 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20030000 	.word	0x20030000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	20000290 	.word	0x20000290
 80014ac:	20000638 	.word	0x20000638

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ffd7 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f005 fa83 	bl	8006a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fd2f 	bl	8000f68 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800150c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001518:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 800151c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001520:	20000638 	.word	0x20000638

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>

08001526 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 800152c:	f000 fc32 	bl	8001d94 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	2201      	movs	r2, #1
 8001534:	210f      	movs	r1, #15
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fc78 	bl	8001e2c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800153c:	79fb      	ldrb	r3, [r7, #7]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	2300      	movs	r3, #0
 8001556:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	2201      	movs	r2, #1
 8001576:	2123      	movs	r1, #35	; 0x23
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fc57 	bl	8001e2c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	2206      	movs	r2, #6
 8001584:	2128      	movs	r1, #40	; 0x28
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fc50 	bl	8001e2c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d123      	bne.n	80015de <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	e01c      	b.n	80015d6 <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	3328      	adds	r3, #40	; 0x28
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	3328      	adds	r3, #40	; 0x28
 80015b6:	443b      	add	r3, r7
 80015b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	3328      	adds	r3, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	3301      	adds	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	dddf      	ble.n	800159c <I3G4250D_ReadXYZAngRate+0x54>
 80015dc:	e022      	b.n	8001624 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	e01c      	b.n	800161e <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	3328      	adds	r3, #40	; 0x28
 80015ea:	443b      	add	r3, r7
 80015ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	3301      	adds	r3, #1
 80015fc:	3328      	adds	r3, #40	; 0x28
 80015fe:	443b      	add	r3, r7
 8001600:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21a      	sxth	r2, r3
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	3328      	adds	r3, #40	; 0x28
 8001612:	443b      	add	r3, r7
 8001614:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	3301      	adds	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	2b02      	cmp	r3, #2
 8001622:	dddf      	ble.n	80015e4 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162a:	2b20      	cmp	r3, #32
 800162c:	d00c      	beq.n	8001648 <I3G4250D_ReadXYZAngRate+0x100>
 800162e:	2b20      	cmp	r3, #32
 8001630:	dc0d      	bgt.n	800164e <I3G4250D_ReadXYZAngRate+0x106>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <I3G4250D_ReadXYZAngRate+0xf4>
 8001636:	2b10      	cmp	r3, #16
 8001638:	d003      	beq.n	8001642 <I3G4250D_ReadXYZAngRate+0xfa>
 800163a:	e008      	b.n	800164e <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <I3G4250D_ReadXYZAngRate+0x14c>)
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001640:	e005      	b.n	800164e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <I3G4250D_ReadXYZAngRate+0x150>)
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001646:	e002      	b.n	800164e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <I3G4250D_ReadXYZAngRate+0x154>)
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800164c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	e016      	b.n	8001682 <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	3328      	adds	r3, #40	; 0x28
 800165a:	443b      	add	r3, r7
 800165c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	3301      	adds	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b02      	cmp	r3, #2
 8001686:	dde5      	ble.n	8001654 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	410c0000 	.word	0x410c0000
 8001698:	418c0000 	.word	0x418c0000
 800169c:	428c0000 	.word	0x428c0000

080016a0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016a4:	f000 fa7c 	bl	8001ba0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016a8:	20ca      	movs	r0, #202	; 0xca
 80016aa:	f000 f95d 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016ae:	20c3      	movs	r0, #195	; 0xc3
 80016b0:	f000 f967 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016b4:	2008      	movs	r0, #8
 80016b6:	f000 f964 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016ba:	2050      	movs	r0, #80	; 0x50
 80016bc:	f000 f961 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016c0:	20cf      	movs	r0, #207	; 0xcf
 80016c2:	f000 f951 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f95b 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016cc:	20c1      	movs	r0, #193	; 0xc1
 80016ce:	f000 f958 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016d2:	2030      	movs	r0, #48	; 0x30
 80016d4:	f000 f955 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016d8:	20ed      	movs	r0, #237	; 0xed
 80016da:	f000 f945 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f000 f94f 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f94c 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80016ea:	2012      	movs	r0, #18
 80016ec:	f000 f949 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80016f0:	2081      	movs	r0, #129	; 0x81
 80016f2:	f000 f946 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80016f6:	20e8      	movs	r0, #232	; 0xe8
 80016f8:	f000 f936 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80016fc:	2085      	movs	r0, #133	; 0x85
 80016fe:	f000 f940 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f93d 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001708:	2078      	movs	r0, #120	; 0x78
 800170a:	f000 f93a 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800170e:	20cb      	movs	r0, #203	; 0xcb
 8001710:	f000 f92a 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001714:	2039      	movs	r0, #57	; 0x39
 8001716:	f000 f934 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800171a:	202c      	movs	r0, #44	; 0x2c
 800171c:	f000 f931 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001720:	2000      	movs	r0, #0
 8001722:	f000 f92e 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001726:	2034      	movs	r0, #52	; 0x34
 8001728:	f000 f92b 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800172c:	2002      	movs	r0, #2
 800172e:	f000 f928 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001732:	20f7      	movs	r0, #247	; 0xf7
 8001734:	f000 f918 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001738:	2020      	movs	r0, #32
 800173a:	f000 f922 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800173e:	20ea      	movs	r0, #234	; 0xea
 8001740:	f000 f912 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f91c 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f919 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001750:	20b1      	movs	r0, #177	; 0xb1
 8001752:	f000 f909 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f913 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800175c:	201b      	movs	r0, #27
 800175e:	f000 f910 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001762:	20b6      	movs	r0, #182	; 0xb6
 8001764:	f000 f900 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001768:	200a      	movs	r0, #10
 800176a:	f000 f90a 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800176e:	20a2      	movs	r0, #162	; 0xa2
 8001770:	f000 f907 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001774:	20c0      	movs	r0, #192	; 0xc0
 8001776:	f000 f8f7 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800177a:	2010      	movs	r0, #16
 800177c:	f000 f901 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001780:	20c1      	movs	r0, #193	; 0xc1
 8001782:	f000 f8f1 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001786:	2010      	movs	r0, #16
 8001788:	f000 f8fb 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800178c:	20c5      	movs	r0, #197	; 0xc5
 800178e:	f000 f8eb 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001792:	2045      	movs	r0, #69	; 0x45
 8001794:	f000 f8f5 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001798:	2015      	movs	r0, #21
 800179a:	f000 f8f2 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800179e:	20c7      	movs	r0, #199	; 0xc7
 80017a0:	f000 f8e2 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017a4:	2090      	movs	r0, #144	; 0x90
 80017a6:	f000 f8ec 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017aa:	2036      	movs	r0, #54	; 0x36
 80017ac:	f000 f8dc 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017b0:	20c8      	movs	r0, #200	; 0xc8
 80017b2:	f000 f8e6 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017b6:	20f2      	movs	r0, #242	; 0xf2
 80017b8:	f000 f8d6 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 f8e0 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017c2:	20b0      	movs	r0, #176	; 0xb0
 80017c4:	f000 f8d0 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017c8:	20c2      	movs	r0, #194	; 0xc2
 80017ca:	f000 f8da 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017ce:	20b6      	movs	r0, #182	; 0xb6
 80017d0:	f000 f8ca 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f000 f8d4 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017da:	20a7      	movs	r0, #167	; 0xa7
 80017dc:	f000 f8d1 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017e0:	2027      	movs	r0, #39	; 0x27
 80017e2:	f000 f8ce 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80017e6:	2004      	movs	r0, #4
 80017e8:	f000 f8cb 	bl	8001982 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80017ec:	202a      	movs	r0, #42	; 0x2a
 80017ee:	f000 f8bb 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f8c5 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 f8c2 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f8bf 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001804:	20ef      	movs	r0, #239	; 0xef
 8001806:	f000 f8bc 	bl	8001982 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800180a:	202b      	movs	r0, #43	; 0x2b
 800180c:	f000 f8ac 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f8b6 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f8b3 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800181c:	2001      	movs	r0, #1
 800181e:	f000 f8b0 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001822:	203f      	movs	r0, #63	; 0x3f
 8001824:	f000 f8ad 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001828:	20f6      	movs	r0, #246	; 0xf6
 800182a:	f000 f89d 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800182e:	2001      	movs	r0, #1
 8001830:	f000 f8a7 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f8a4 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800183a:	2006      	movs	r0, #6
 800183c:	f000 f8a1 	bl	8001982 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001840:	202c      	movs	r0, #44	; 0x2c
 8001842:	f000 f891 	bl	8001968 <ili9341_WriteReg>
  LCD_Delay(200);
 8001846:	20c8      	movs	r0, #200	; 0xc8
 8001848:	f000 fa98 	bl	8001d7c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800184c:	2026      	movs	r0, #38	; 0x26
 800184e:	f000 f88b 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 f895 	bl	8001982 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001858:	20e0      	movs	r0, #224	; 0xe0
 800185a:	f000 f885 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f88f 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001864:	2029      	movs	r0, #41	; 0x29
 8001866:	f000 f88c 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800186a:	2024      	movs	r0, #36	; 0x24
 800186c:	f000 f889 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001870:	200c      	movs	r0, #12
 8001872:	f000 f886 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001876:	200e      	movs	r0, #14
 8001878:	f000 f883 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800187c:	2009      	movs	r0, #9
 800187e:	f000 f880 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001882:	204e      	movs	r0, #78	; 0x4e
 8001884:	f000 f87d 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 f87a 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800188e:	203c      	movs	r0, #60	; 0x3c
 8001890:	f000 f877 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001894:	2009      	movs	r0, #9
 8001896:	f000 f874 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800189a:	2013      	movs	r0, #19
 800189c:	f000 f871 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018a0:	2005      	movs	r0, #5
 80018a2:	f000 f86e 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018a6:	2017      	movs	r0, #23
 80018a8:	f000 f86b 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018ac:	2011      	movs	r0, #17
 80018ae:	f000 f868 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f865 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018b8:	20e1      	movs	r0, #225	; 0xe1
 80018ba:	f000 f855 	bl	8001968 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f85f 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018c4:	2016      	movs	r0, #22
 80018c6:	f000 f85c 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018ca:	201b      	movs	r0, #27
 80018cc:	f000 f859 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018d0:	2004      	movs	r0, #4
 80018d2:	f000 f856 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018d6:	2011      	movs	r0, #17
 80018d8:	f000 f853 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018dc:	2007      	movs	r0, #7
 80018de:	f000 f850 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80018e2:	2031      	movs	r0, #49	; 0x31
 80018e4:	f000 f84d 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80018e8:	2033      	movs	r0, #51	; 0x33
 80018ea:	f000 f84a 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80018ee:	2042      	movs	r0, #66	; 0x42
 80018f0:	f000 f847 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018f4:	2005      	movs	r0, #5
 80018f6:	f000 f844 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018fa:	200c      	movs	r0, #12
 80018fc:	f000 f841 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001900:	200a      	movs	r0, #10
 8001902:	f000 f83e 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001906:	2028      	movs	r0, #40	; 0x28
 8001908:	f000 f83b 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800190c:	202f      	movs	r0, #47	; 0x2f
 800190e:	f000 f838 	bl	8001982 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f835 	bl	8001982 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001918:	2011      	movs	r0, #17
 800191a:	f000 f825 	bl	8001968 <ili9341_WriteReg>
  LCD_Delay(200);
 800191e:	20c8      	movs	r0, #200	; 0xc8
 8001920:	f000 fa2c 	bl	8001d7c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001924:	2029      	movs	r0, #41	; 0x29
 8001926:	f000 f81f 	bl	8001968 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800192a:	202c      	movs	r0, #44	; 0x2c
 800192c:	f000 f81c 	bl	8001968 <ili9341_WriteReg>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001938:	f000 f932 	bl	8001ba0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800193c:	2103      	movs	r1, #3
 800193e:	20d3      	movs	r0, #211	; 0xd3
 8001940:	f000 f82c 	bl	800199c <ili9341_ReadData>
 8001944:	4603      	mov	r3, r0
 8001946:	b29b      	uxth	r3, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}

0800194c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001950:	2029      	movs	r0, #41	; 0x29
 8001952:	f000 f809 	bl	8001968 <ili9341_WriteReg>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800195e:	2028      	movs	r0, #40	; 0x28
 8001960:	f000 f802 	bl	8001968 <ili9341_WriteReg>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f9ad 	bl	8001cd4 <LCD_IO_WriteReg>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f97e 	bl	8001c90 <LCD_IO_WriteData>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	460a      	mov	r2, r1
 80019a6:	80fb      	strh	r3, [r7, #6]
 80019a8:	4613      	mov	r3, r2
 80019aa:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019ac:	797a      	ldrb	r2, [r7, #5]
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9b0 	bl	8001d18 <LCD_IO_ReadData>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019c6:	23f0      	movs	r3, #240	; 0xf0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <SPIx_Init+0x6c>)
 80019ea:	f003 ffd2 	bl	8005992 <HAL_SPI_GetState>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d12b      	bne.n	8001a4c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <SPIx_Init+0x6c>)
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <SPIx_Init+0x70>)
 80019f8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <SPIx_Init+0x6c>)
 80019fc:	2218      	movs	r2, #24
 80019fe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <SPIx_Init+0x6c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <SPIx_Init+0x6c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <SPIx_Init+0x6c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <SPIx_Init+0x6c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <SPIx_Init+0x6c>)
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <SPIx_Init+0x6c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <SPIx_Init+0x6c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <SPIx_Init+0x6c>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <SPIx_Init+0x6c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SPIx_Init+0x6c>)
 8001a3a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a3e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <SPIx_Init+0x6c>)
 8001a42:	f000 f873 	bl	8001b2c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a46:	4802      	ldr	r0, [pc, #8]	; (8001a50 <SPIx_Init+0x6c>)
 8001a48:	f003 fb03 	bl	8005052 <HAL_SPI_Init>
  } 
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000294 	.word	0x20000294
 8001a54:	40015000 	.word	0x40015000

08001a58 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <SPIx_Read+0x38>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f107 0108 	add.w	r1, r7, #8
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <SPIx_Read+0x3c>)
 8001a74:	f003 fcda 	bl	800542c <HAL_SPI_Receive>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001a82:	f000 f847 	bl	8001b14 <SPIx_Error>
  }
  
  return readvalue;
 8001a86:	68bb      	ldr	r3, [r7, #8]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000003c 	.word	0x2000003c
 8001a94:	20000294 	.word	0x20000294

08001a98 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <SPIx_Write+0x34>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1db9      	adds	r1, r7, #6
 8001aac:	2201      	movs	r2, #1
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <SPIx_Write+0x38>)
 8001ab0:	f003 fb80 	bl	80051b4 <HAL_SPI_Transmit>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001abe:	f000 f829 	bl	8001b14 <SPIx_Error>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000003c 	.word	0x2000003c
 8001ad0:	20000294 	.word	0x20000294

08001ad4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <SPIx_WriteRead+0x38>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f107 020f 	add.w	r2, r7, #15
 8001aea:	1df9      	adds	r1, r7, #7
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <SPIx_WriteRead+0x3c>)
 8001af2:	f003 fdac 	bl	800564e <HAL_SPI_TransmitReceive>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001afc:	f000 f80a 	bl	8001b14 <SPIx_Error>
  }
  
  return receivedbyte;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000003c 	.word	0x2000003c
 8001b10:	20000294 	.word	0x20000294

08001b14 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <SPIx_Error+0x14>)
 8001b1a:	f003 fb23 	bl	8005164 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001b1e:	f7ff ff61 	bl	80019e4 <SPIx_Init>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000294 	.word	0x20000294

08001b2c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b42:	6453      	str	r3, [r2, #68]	; 0x44
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <SPIx_MspInit+0x6c>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001b6c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <SPIx_MspInit+0x70>)
 8001b8a:	f001 fde7 	bl	800375c <HAL_GPIO_Init>
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021400 	.word	0x40021400

08001ba0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <LCD_IO_Init+0xe0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d164      	bne.n	8001c78 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <LCD_IO_Init+0xe0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4619      	mov	r1, r3
 8001be8:	4827      	ldr	r0, [pc, #156]	; (8001c88 <LCD_IO_Init+0xe8>)
 8001bea:	f001 fdb7 	bl	800375c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4819      	ldr	r0, [pc, #100]	; (8001c88 <LCD_IO_Init+0xe8>)
 8001c24:	f001 fd9a 	bl	800375c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <LCD_IO_Init+0xe4>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001c44:	2304      	movs	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <LCD_IO_Init+0xec>)
 8001c5c:	f001 fd7e 	bl	800375c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c60:	2200      	movs	r2, #0
 8001c62:	2104      	movs	r1, #4
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <LCD_IO_Init+0xec>)
 8001c66:	f002 f831 	bl	8003ccc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4807      	ldr	r0, [pc, #28]	; (8001c8c <LCD_IO_Init+0xec>)
 8001c70:	f002 f82c 	bl	8003ccc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001c74:	f7ff feb6 	bl	80019e4 <SPIx_Init>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002ec 	.word	0x200002ec
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40020800 	.word	0x40020800

08001c90 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <LCD_IO_WriteData+0x3c>)
 8001ca2:	f002 f813 	bl	8003ccc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <LCD_IO_WriteData+0x40>)
 8001cac:	f002 f80e 	bl	8003ccc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fef0 	bl	8001a98 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <LCD_IO_WriteData+0x40>)
 8001cbe:	f002 f805 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40020800 	.word	0x40020800

08001cd4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <LCD_IO_WriteReg+0x3c>)
 8001ce6:	f001 fff1 	bl	8003ccc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001cea:	2200      	movs	r2, #0
 8001cec:	2104      	movs	r1, #4
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <LCD_IO_WriteReg+0x40>)
 8001cf0:	f001 ffec 	bl	8003ccc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fecd 	bl	8001a98 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2104      	movs	r1, #4
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <LCD_IO_WriteReg+0x40>)
 8001d04:	f001 ffe2 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40020800 	.word	0x40020800

08001d18 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	4613      	mov	r3, r2
 8001d26:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4810      	ldr	r0, [pc, #64]	; (8001d74 <LCD_IO_ReadData+0x5c>)
 8001d32:	f001 ffcb 	bl	8003ccc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <LCD_IO_ReadData+0x60>)
 8001d3e:	f001 ffc5 	bl	8003ccc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fea7 	bl	8001a98 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe83 	bl	8001a58 <SPIx_Read>
 8001d52:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <LCD_IO_ReadData+0x60>)
 8001d5c:	f001 ffb6 	bl	8003ccc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d60:	2201      	movs	r2, #1
 8001d62:	2104      	movs	r1, #4
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <LCD_IO_ReadData+0x5c>)
 8001d66:	f001 ffb1 	bl	8003ccc <HAL_GPIO_WritePin>
  
  return readvalue;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00

08001d7c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 ff5f 	bl	8002c48 <HAL_Delay>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001db6:	2302      	movs	r3, #2
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4815      	ldr	r0, [pc, #84]	; (8001e24 <GYRO_IO_Init+0x90>)
 8001dce:	f001 fcc5 	bl	800375c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <GYRO_IO_Init+0x90>)
 8001dd8:	f001 ff78 	bl	8003ccc <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <GYRO_IO_Init+0x8c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001df8:	2306      	movs	r3, #6
 8001dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <GYRO_IO_Init+0x94>)
 8001e10:	f001 fca4 	bl	800375c <HAL_GPIO_Init>

  SPIx_Init();
 8001e14:	f7ff fde6 	bl	80019e4 <SPIx_Init>
}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020000 	.word	0x40020000

08001e2c <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001e3c:	883b      	ldrh	r3, [r7, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d904      	bls.n	8001e4c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001e48:	70fb      	strb	r3, [r7, #3]
 8001e4a:	e003      	b.n	8001e54 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e52:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001e54:	2200      	movs	r2, #0
 8001e56:	2102      	movs	r1, #2
 8001e58:	4810      	ldr	r0, [pc, #64]	; (8001e9c <GYRO_IO_Read+0x70>)
 8001e5a:	f001 ff37 	bl	8003ccc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe37 	bl	8001ad4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001e66:	e00c      	b.n	8001e82 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fe33 	bl	8001ad4 <SPIx_WriteRead>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001e76:	883b      	ldrh	r3, [r7, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001e82:	883b      	ldrh	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ef      	bne.n	8001e68 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <GYRO_IO_Read+0x70>)
 8001e8e:	f001 ff1d 	bl	8003ccc <HAL_GPIO_WritePin>
}  
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40020800 	.word	0x40020800

08001ea0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <BSP_LCD_Init+0xc0>)
 8001ea8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001eac:	2209      	movs	r2, #9
 8001eae:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001eb8:	221d      	movs	r2, #29
 8001eba:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ec4:	f240 120d 	movw	r2, #269	; 0x10d
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ecc:	f240 1243 	movw	r2, #323	; 0x143
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ed4:	f240 1217 	movw	r2, #279	; 0x117
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001edc:	f240 1247 	movw	r2, #327	; 0x147
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <BSP_LCD_Init+0xc4>)
 8001efc:	2208      	movs	r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <BSP_LCD_Init+0xc4>)
 8001f02:	22c0      	movs	r2, #192	; 0xc0
 8001f04:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <BSP_LCD_Init+0xc4>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <BSP_LCD_Init+0xc4>)
 8001f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <BSP_LCD_Init+0xc4>)
 8001f16:	f002 fe41 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001f32:	f000 fa5f 	bl	80023f4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <BSP_LCD_Init+0xbc>)
 8001f38:	f001 fee2 	bl	8003d00 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <BSP_LCD_Init+0xc8>)
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <BSP_LCD_Init+0xcc>)
 8001f40:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <BSP_LCD_Init+0xc8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001f4a:	f000 fc41 	bl	80027d0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001f4e:	4808      	ldr	r0, [pc, #32]	; (8001f70 <BSP_LCD_Init+0xd0>)
 8001f50:	f000 f8ce 	bl	80020f0 <BSP_LCD_SetFont>

  return LCD_OK;
 8001f54:	2300      	movs	r3, #0
}  
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002f0 	.word	0x200002f0
 8001f60:	40016800 	.word	0x40016800
 8001f64:	200003d8 	.word	0x200003d8
 8001f68:	20000424 	.word	0x20000424
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	20000040 	.word	0x20000040

08001f74 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <BSP_LCD_GetXSize+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	4798      	blx	r3
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000424 	.word	0x20000424

08001f8c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <BSP_LCD_GetYSize+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	4798      	blx	r3
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000424 	.word	0x20000424

08001fa4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b090      	sub	sp, #64	; 0x40
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001fb4:	f7ff ffde 	bl	8001f74 <BSP_LCD_GetXSize>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001fc0:	f7ff ffe4 	bl	8001f8c <BSP_LCD_GetYSize>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001fd0:	23ff      	movs	r3, #255	; 0xff
 8001fd2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001fea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001ff4:	f7ff ffbe 	bl	8001f74 <BSP_LCD_GetXSize>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001ffc:	f7ff ffc6 	bl	8001f8c <BSP_LCD_GetYSize>
 8002000:	4603      	mov	r3, r0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002004:	88fa      	ldrh	r2, [r7, #6]
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	4619      	mov	r1, r3
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <BSP_LCD_LayerDefaultInit+0xbc>)
 800200e:	f001 ff51 	bl	8003eb4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	4913      	ldr	r1, [pc, #76]	; (8002064 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3304      	adds	r3, #4
 8002022:	f04f 32ff 	mov.w	r2, #4294967295
 8002026:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <BSP_LCD_LayerDefaultInit+0xc0>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3308      	adds	r3, #8
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <BSP_LCD_LayerDefaultInit+0xc4>)
 800203a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	4909      	ldr	r1, [pc, #36]	; (8002064 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800204e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002052:	f001 ff6d 	bl	8003f30 <HAL_LTDC_EnableDither>
}
 8002056:	bf00      	nop
 8002058:	3740      	adds	r7, #64	; 0x40
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200002f0 	.word	0x200002f0
 8002064:	2000040c 	.word	0x2000040c
 8002068:	20000040 	.word	0x20000040

0800206c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <BSP_LCD_SelectLayer+0x1c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000408 	.word	0x20000408

0800208c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <BSP_LCD_SetTextColor+0x28>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <BSP_LCD_SetTextColor+0x2c>)
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	20000408 	.word	0x20000408
 80020b8:	2000040c 	.word	0x2000040c

080020bc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <BSP_LCD_SetBackColor+0x2c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4908      	ldr	r1, [pc, #32]	; (80020ec <BSP_LCD_SetBackColor+0x30>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3304      	adds	r3, #4
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000408 	.word	0x20000408
 80020ec:	2000040c 	.word	0x2000040c

080020f0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <BSP_LCD_SetFont+0x2c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4908      	ldr	r1, [pc, #32]	; (8002120 <BSP_LCD_SetFont+0x30>)
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3308      	adds	r3, #8
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000408 	.word	0x20000408
 8002120:	2000040c 	.word	0x2000040c

08002124 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <BSP_LCD_GetFont+0x24>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <BSP_LCD_GetFont+0x28>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3308      	adds	r3, #8
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000408 	.word	0x20000408
 800214c:	2000040c 	.word	0x2000040c

08002150 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <BSP_LCD_Clear+0x48>)
 800215a:	681c      	ldr	r4, [r3, #0]
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <BSP_LCD_Clear+0x48>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <BSP_LCD_Clear+0x4c>)
 8002162:	2134      	movs	r1, #52	; 0x34
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	335c      	adds	r3, #92	; 0x5c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461e      	mov	r6, r3
 8002170:	f7ff ff00 	bl	8001f74 <BSP_LCD_GetXSize>
 8002174:	4605      	mov	r5, r0
 8002176:	f7ff ff09 	bl	8001f8c <BSP_LCD_GetYSize>
 800217a:	4602      	mov	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2300      	movs	r3, #0
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	462a      	mov	r2, r5
 8002188:	4631      	mov	r1, r6
 800218a:	4620      	mov	r0, r4
 800218c:	f000 fae8 	bl	8002760 <FillBuffer>
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002198:	20000408 	.word	0x20000408
 800219c:	200002f0 	.word	0x200002f0

080021a0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
 80021aa:	460b      	mov	r3, r1
 80021ac:	80bb      	strh	r3, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <BSP_LCD_DisplayChar+0x80>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	491b      	ldr	r1, [pc, #108]	; (8002224 <BSP_LCD_DisplayChar+0x84>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <BSP_LCD_DisplayChar+0x80>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4c14      	ldr	r4, [pc, #80]	; (8002224 <BSP_LCD_DisplayChar+0x84>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4423      	add	r3, r4
 80021de:	3308      	adds	r3, #8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021e4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <BSP_LCD_DisplayChar+0x80>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <BSP_LCD_DisplayChar+0x84>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4423      	add	r3, r4
 80021f8:	3308      	adds	r3, #8
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	889b      	ldrh	r3, [r3, #4]
 80021fe:	3307      	adds	r3, #7
 8002200:	2b00      	cmp	r3, #0
 8002202:	da00      	bge.n	8002206 <BSP_LCD_DisplayChar+0x66>
 8002204:	3307      	adds	r3, #7
 8002206:	10db      	asrs	r3, r3, #3
 8002208:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800220c:	18ca      	adds	r2, r1, r3
 800220e:	88b9      	ldrh	r1, [r7, #4]
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f9ea 	bl	80025ec <DrawChar>
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	20000408 	.word	0x20000408
 8002224:	2000040c 	.word	0x2000040c

08002228 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60ba      	str	r2, [r7, #8]
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	81fb      	strh	r3, [r7, #14]
 8002236:	460b      	mov	r3, r1
 8002238:	81bb      	strh	r3, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800223e:	2301      	movs	r3, #1
 8002240:	83fb      	strh	r3, [r7, #30]
 8002242:	2300      	movs	r3, #0
 8002244:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002252:	e002      	b.n	800225a <BSP_LCD_DisplayStringAt+0x32>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	3301      	adds	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	617a      	str	r2, [r7, #20]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f6      	bne.n	8002254 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002266:	f7ff fe85 	bl	8001f74 <BSP_LCD_GetXSize>
 800226a:	4601      	mov	r1, r0
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	484b      	ldr	r0, [pc, #300]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	3308      	adds	r3, #8
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	889b      	ldrh	r3, [r3, #4]
 8002282:	fbb1 f3f3 	udiv	r3, r1, r3
 8002286:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d01c      	beq.n	80022c8 <BSP_LCD_DisplayStringAt+0xa0>
 800228e:	2b03      	cmp	r3, #3
 8002290:	dc33      	bgt.n	80022fa <BSP_LCD_DisplayStringAt+0xd2>
 8002292:	2b01      	cmp	r3, #1
 8002294:	d002      	beq.n	800229c <BSP_LCD_DisplayStringAt+0x74>
 8002296:	2b02      	cmp	r3, #2
 8002298:	d019      	beq.n	80022ce <BSP_LCD_DisplayStringAt+0xa6>
 800229a:	e02e      	b.n	80022fa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad1      	subs	r1, r2, r3
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	483e      	ldr	r0, [pc, #248]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4403      	add	r3, r0
 80022b2:	3308      	adds	r3, #8
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	4413      	add	r3, r2
 80022c4:	83fb      	strh	r3, [r7, #30]
      break;
 80022c6:	e01b      	b.n	8002300 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80022c8:	89fb      	ldrh	r3, [r7, #14]
 80022ca:	83fb      	strh	r3, [r7, #30]
      break;
 80022cc:	e018      	b.n	8002300 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	b299      	uxth	r1, r3
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4831      	ldr	r0, [pc, #196]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4403      	add	r3, r0
 80022e6:	3308      	adds	r3, #8
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	889b      	ldrh	r3, [r3, #4]
 80022ec:	fb11 f303 	smulbb	r3, r1, r3
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4413      	add	r3, r2
 80022f6:	83fb      	strh	r3, [r7, #30]
      break;
 80022f8:	e002      	b.n	8002300 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	83fb      	strh	r3, [r7, #30]
      break;
 80022fe:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002300:	e01a      	b.n	8002338 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	89b9      	ldrh	r1, [r7, #12]
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff48 	bl	80021a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4922      	ldr	r1, [pc, #136]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3308      	adds	r3, #8
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	889a      	ldrh	r2, [r3, #4]
 8002326:	8bfb      	ldrh	r3, [r7, #30]
 8002328:	4413      	add	r3, r2
 800232a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
    i++;
 8002332:	8bbb      	ldrh	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2dc      	uxtb	r4, r3
 8002346:	f7ff fe15 	bl	8001f74 <BSP_LCD_GetXSize>
 800234a:	8bb9      	ldrh	r1, [r7, #28]
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4d13      	ldr	r5, [pc, #76]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	442b      	add	r3, r5
 800235c:	3308      	adds	r3, #8
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	889b      	ldrh	r3, [r3, #4]
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	1ac3      	subs	r3, r0, r3
 8002368:	b299      	uxth	r1, r3
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <BSP_LCD_DisplayStringAt+0x174>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	480c      	ldr	r0, [pc, #48]	; (80023a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4403      	add	r3, r0
 800237a:	3308      	adds	r3, #8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	4299      	cmp	r1, r3
 8002382:	bf2c      	ite	cs
 8002384:	2301      	movcs	r3, #1
 8002386:	2300      	movcc	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4023      	ands	r3, r4
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1b7      	bne.n	8002302 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bdb0      	pop	{r4, r5, r7, pc}
 800239c:	20000408 	.word	0x20000408
 80023a0:	2000040c 	.word	0x2000040c

080023a4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80023b0:	f7ff feb8 	bl	8002124 <BSP_LCD_GetFont>
 80023b4:	4603      	mov	r3, r0
 80023b6:	88db      	ldrh	r3, [r3, #6]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	fb12 f303 	smulbb	r3, r2, r3
 80023be:	b299      	uxth	r1, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff ff2f 	bl	8002228 <BSP_LCD_DisplayStringAt>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <BSP_LCD_DisplayOn+0x1c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80023e2:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <BSP_LCD_DisplayOn+0x1c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4798      	blx	r3
  }
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000424 	.word	0x20000424

080023f4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08e      	sub	sp, #56	; 0x38
 80023f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a60      	ldr	r2, [pc, #384]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <BSP_LCD_MspInit+0x190>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <BSP_LCD_MspInit+0x190>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a59      	ldr	r2, [pc, #356]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b57      	ldr	r3, [pc, #348]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	4b53      	ldr	r3, [pc, #332]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a52      	ldr	r2, [pc, #328]	; (8002584 <BSP_LCD_MspInit+0x190>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b50      	ldr	r3, [pc, #320]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b49      	ldr	r3, [pc, #292]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b45      	ldr	r3, [pc, #276]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a44      	ldr	r2, [pc, #272]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <BSP_LCD_MspInit+0x190>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <BSP_LCD_MspInit+0x190>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <BSP_LCD_MspInit+0x190>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a36      	ldr	r2, [pc, #216]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b30      	ldr	r3, [pc, #192]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <BSP_LCD_MspInit+0x190>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80024da:	f641 0358 	movw	r3, #6232	; 0x1858
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80024e8:	2302      	movs	r3, #2
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80024ec:	230e      	movs	r3, #14
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	4619      	mov	r1, r3
 80024f6:	4824      	ldr	r0, [pc, #144]	; (8002588 <BSP_LCD_MspInit+0x194>)
 80024f8:	f001 f930 	bl	800375c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80024fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	4619      	mov	r1, r3
 8002508:	4820      	ldr	r0, [pc, #128]	; (800258c <BSP_LCD_MspInit+0x198>)
 800250a:	f001 f927 	bl	800375c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800250e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	481d      	ldr	r0, [pc, #116]	; (8002590 <BSP_LCD_MspInit+0x19c>)
 800251c:	f001 f91e 	bl	800375c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002520:	2348      	movs	r3, #72	; 0x48
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	481a      	ldr	r0, [pc, #104]	; (8002594 <BSP_LCD_MspInit+0x1a0>)
 800252c:	f001 f916 	bl	800375c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	4816      	ldr	r0, [pc, #88]	; (8002598 <BSP_LCD_MspInit+0x1a4>)
 800253e:	f001 f90d 	bl	800375c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002542:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	4619      	mov	r1, r3
 800254e:	4813      	ldr	r0, [pc, #76]	; (800259c <BSP_LCD_MspInit+0x1a8>)
 8002550:	f001 f904 	bl	800375c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002554:	2303      	movs	r3, #3
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002558:	2309      	movs	r3, #9
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	480a      	ldr	r0, [pc, #40]	; (800258c <BSP_LCD_MspInit+0x198>)
 8002564:	f001 f8fa 	bl	800375c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002568:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <BSP_LCD_MspInit+0x1a8>)
 8002576:	f001 f8f1 	bl	800375c <HAL_GPIO_Init>
}
 800257a:	bf00      	nop
 800257c:	3738      	adds	r7, #56	; 0x38
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800

080025a0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	603a      	str	r2, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
 80025ac:	460b      	mov	r3, r1
 80025ae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <BSP_LCD_DrawPixel+0x44>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <BSP_LCD_DrawPixel+0x48>)
 80025b6:	2134      	movs	r1, #52	; 0x34
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	681c      	ldr	r4, [r3, #0]
 80025c2:	88bd      	ldrh	r5, [r7, #4]
 80025c4:	f7ff fcd6 	bl	8001f74 <BSP_LCD_GetXSize>
 80025c8:	4603      	mov	r3, r0
 80025ca:	fb03 f205 	mul.w	r2, r3, r5
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4423      	add	r3, r4
 80025d6:	461a      	mov	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	20000408 	.word	0x20000408
 80025e8:	200002f0 	.word	0x200002f0

080025ec <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	603a      	str	r2, [r7, #0]
 80025f6:	80fb      	strh	r3, [r7, #6]
 80025f8:	460b      	mov	r3, r1
 80025fa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <DrawChar+0x16c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4953      	ldr	r1, [pc, #332]	; (800275c <DrawChar+0x170>)
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3308      	adds	r3, #8
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	88db      	ldrh	r3, [r3, #6]
 800261e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <DrawChar+0x16c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	494d      	ldr	r1, [pc, #308]	; (800275c <DrawChar+0x170>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3308      	adds	r3, #8
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002638:	8a3b      	ldrh	r3, [r7, #16]
 800263a:	3307      	adds	r3, #7
 800263c:	2b00      	cmp	r3, #0
 800263e:	da00      	bge.n	8002642 <DrawChar+0x56>
 8002640:	3307      	adds	r3, #7
 8002642:	10db      	asrs	r3, r3, #3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8a3b      	ldrh	r3, [r7, #16]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e076      	b.n	8002746 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002658:	8a3b      	ldrh	r3, [r7, #16]
 800265a:	3307      	adds	r3, #7
 800265c:	2b00      	cmp	r3, #0
 800265e:	da00      	bge.n	8002662 <DrawChar+0x76>
 8002660:	3307      	adds	r3, #7
 8002662:	10db      	asrs	r3, r3, #3
 8002664:	461a      	mov	r2, r3
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002672:	8a3b      	ldrh	r3, [r7, #16]
 8002674:	3307      	adds	r3, #7
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <DrawChar+0x90>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <DrawChar+0x9c>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d004      	beq.n	8002690 <DrawChar+0xa4>
 8002686:	e00c      	b.n	80026a2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	e016      	b.n	80026be <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	3201      	adds	r2, #1
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
      break;
 80026a0:	e00d      	b.n	80026be <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	041a      	lsls	r2, r3, #16
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3301      	adds	r3, #1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	3202      	adds	r2, #2
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
      break;
 80026bc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e036      	b.n	8002732 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80026c4:	8a3a      	ldrh	r2, [r7, #16]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad2      	subs	r2, r2, r3
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	4413      	add	r3, r2
 80026ce:	3b01      	subs	r3, #1
 80026d0:	2201      	movs	r2, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4413      	add	r3, r2
 80026e8:	b298      	uxth	r0, r3
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <DrawChar+0x16c>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	491b      	ldr	r1, [pc, #108]	; (800275c <DrawChar+0x170>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	4619      	mov	r1, r3
 8002700:	f7ff ff4e 	bl	80025a0 <BSP_LCD_DrawPixel>
 8002704:	e012      	b.n	800272c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	b29a      	uxth	r2, r3
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4413      	add	r3, r2
 800270e:	b298      	uxth	r0, r3
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <DrawChar+0x16c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4911      	ldr	r1, [pc, #68]	; (800275c <DrawChar+0x170>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3304      	adds	r3, #4
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	88bb      	ldrh	r3, [r7, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	f7ff ff3a 	bl	80025a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	3301      	adds	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	8a3b      	ldrh	r3, [r7, #16]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	429a      	cmp	r2, r3
 8002738:	d3c4      	bcc.n	80026c4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	3301      	adds	r3, #1
 800273e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	8a7b      	ldrh	r3, [r7, #18]
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	429a      	cmp	r2, r3
 800274c:	d384      	bcc.n	8002658 <DrawChar+0x6c>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000408 	.word	0x20000408
 800275c:	2000040c 	.word	0x2000040c

08002760 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <FillBuffer+0x68>)
 8002770:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002774:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <FillBuffer+0x68>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <FillBuffer+0x68>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <FillBuffer+0x68>)
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <FillBuffer+0x6c>)
 8002786:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002788:	480f      	ldr	r0, [pc, #60]	; (80027c8 <FillBuffer+0x68>)
 800278a:	f000 fd51 	bl	8003230 <HAL_DMA2D_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d115      	bne.n	80027c0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002794:	68f9      	ldr	r1, [r7, #12]
 8002796:	480c      	ldr	r0, [pc, #48]	; (80027c8 <FillBuffer+0x68>)
 8002798:	f000 feb2 	bl	8003500 <HAL_DMA2D_ConfigLayer>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69f9      	ldr	r1, [r7, #28]
 80027ac:	4806      	ldr	r0, [pc, #24]	; (80027c8 <FillBuffer+0x68>)
 80027ae:	f000 fd92 	bl	80032d6 <HAL_DMA2D_Start>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80027b8:	210a      	movs	r1, #10
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <FillBuffer+0x68>)
 80027bc:	f000 fdb6 	bl	800332c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000398 	.word	0x20000398
 80027cc:	4002b000 	.word	0x4002b000

080027d0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <BSP_SDRAM_Init+0xac>)
 80027d6:	4a2a      	ldr	r2, [pc, #168]	; (8002880 <BSP_SDRAM_Init+0xb0>)
 80027d8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027e2:	2207      	movs	r2, #7
 80027e4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027e8:	2204      	movs	r2, #4
 80027ea:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027ee:	2207      	movs	r2, #7
 80027f0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 8002800:	2202      	movs	r2, #2
 8002802:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002806:	2201      	movs	r2, #1
 8002808:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <BSP_SDRAM_Init+0xac>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002812:	2204      	movs	r2, #4
 8002814:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002818:	2210      	movs	r2, #16
 800281a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <BSP_SDRAM_Init+0xac>)
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002824:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002828:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <BSP_SDRAM_Init+0xac>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002836:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <BSP_SDRAM_Init+0xac>)
 800283a:	2200      	movs	r2, #0
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002846:	2100      	movs	r1, #0
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <BSP_SDRAM_Init+0xac>)
 800284a:	f000 f87f 	bl	800294c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <BSP_SDRAM_Init+0xb4>)
 8002850:	480a      	ldr	r0, [pc, #40]	; (800287c <BSP_SDRAM_Init+0xac>)
 8002852:	f002 fb63 	bl	8004f1c <HAL_SDRAM_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <BSP_SDRAM_Init+0xb8>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e002      	b.n	800286a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <BSP_SDRAM_Init+0xb8>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800286a:	f240 506a 	movw	r0, #1386	; 0x56a
 800286e:	f000 f80d 	bl	800288c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <BSP_SDRAM_Init+0xb8>)
 8002874:	781b      	ldrb	r3, [r3, #0]
}
 8002876:	4618      	mov	r0, r3
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000428 	.word	0x20000428
 8002880:	a0000140 	.word	0xa0000140
 8002884:	2000045c 	.word	0x2000045c
 8002888:	20000048 	.word	0x20000048

0800288c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028a0:	2208      	movs	r2, #8
 80028a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80028b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b4:	4923      	ldr	r1, [pc, #140]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b6:	4824      	ldr	r0, [pc, #144]	; (8002948 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028b8:	f002 fb6e 	bl	8004f98 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80028bc:	2001      	movs	r0, #1
 80028be:	f000 f9c3 	bl	8002c48 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ca:	2208      	movs	r2, #8
 80028cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80028da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028de:	4919      	ldr	r1, [pc, #100]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028e0:	4819      	ldr	r0, [pc, #100]	; (8002948 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028e2:	f002 fb59 	bl	8004f98 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028e8:	2203      	movs	r2, #3
 80028ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ee:	2208      	movs	r2, #8
 80028f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028f4:	2204      	movs	r2, #4
 80028f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80028fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002902:	4910      	ldr	r1, [pc, #64]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002904:	4810      	ldr	r0, [pc, #64]	; (8002948 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002906:	f002 fb47 	bl	8004f98 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800290a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800290e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002912:	2204      	movs	r2, #4
 8002914:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002918:	2208      	movs	r2, #8
 800291a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800291e:	2201      	movs	r2, #1
 8002920:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002926:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800292c:	4905      	ldr	r1, [pc, #20]	; (8002944 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800292e:	4806      	ldr	r0, [pc, #24]	; (8002948 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002930:	f002 fb32 	bl	8004f98 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002938:	f002 fb63 	bl	8005002 <HAL_SDRAM_ProgramRefreshRate>
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000478 	.word	0x20000478
 8002948:	20000428 	.word	0x20000428

0800294c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b090      	sub	sp, #64	; 0x40
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80ec 	beq.w	8002b36 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	4a76      	ldr	r2, [pc, #472]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6393      	str	r3, [r2, #56]	; 0x38
 800296e:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	4b69      	ldr	r3, [pc, #420]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a68      	ldr	r2, [pc, #416]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a61      	ldr	r2, [pc, #388]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <BSP_SDRAM_MspInit+0x1f4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002a4e:	2360      	movs	r3, #96	; 0x60
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a56:	4619      	mov	r1, r3
 8002a58:	483a      	ldr	r0, [pc, #232]	; (8002b44 <BSP_SDRAM_MspInit+0x1f8>)
 8002a5a:	f000 fe7f 	bl	800375c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002a5e:	2301      	movs	r3, #1
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a66:	4619      	mov	r1, r3
 8002a68:	4837      	ldr	r0, [pc, #220]	; (8002b48 <BSP_SDRAM_MspInit+0x1fc>)
 8002a6a:	f000 fe77 	bl	800375c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002a6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4834      	ldr	r0, [pc, #208]	; (8002b4c <BSP_SDRAM_MspInit+0x200>)
 8002a7c:	f000 fe6e 	bl	800375c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002a80:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4830      	ldr	r0, [pc, #192]	; (8002b50 <BSP_SDRAM_MspInit+0x204>)
 8002a8e:	f000 fe65 	bl	800375c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002a92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	482d      	ldr	r0, [pc, #180]	; (8002b54 <BSP_SDRAM_MspInit+0x208>)
 8002aa0:	f000 fe5c 	bl	800375c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002aa4:	f248 1333 	movw	r3, #33075	; 0x8133
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4829      	ldr	r0, [pc, #164]	; (8002b58 <BSP_SDRAM_MspInit+0x20c>)
 8002ab2:	f000 fe53 	bl	800375c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ad8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aee:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002af8:	2203      	movs	r2, #3
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b0a:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <BSP_SDRAM_MspInit+0x214>)
 8002b0c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
 8002b14:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002b1a:	4810      	ldr	r0, [pc, #64]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b1c:	f000 fa78 	bl	8003010 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002b20:	480e      	ldr	r0, [pc, #56]	; (8002b5c <BSP_SDRAM_MspInit+0x210>)
 8002b22:	f000 f9c7 	bl	8002eb4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	210f      	movs	r1, #15
 8002b2a:	2038      	movs	r0, #56	; 0x38
 8002b2c:	f000 f98b 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002b30:	2038      	movs	r0, #56	; 0x38
 8002b32:	f000 f9a4 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002b36:	bf00      	nop
 8002b38:	3740      	adds	r7, #64	; 0x40
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	20000488 	.word	0x20000488
 8002b60:	40026410 	.word	0x40026410

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_Init+0x40>)
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_Init+0x40>)
 8002b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_Init+0x40>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 f94f 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b92:	200f      	movs	r0, #15
 8002b94:	f000 f808 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b98:	f7fe fb72 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023c00 	.word	0x40023c00

08002ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f967 	bl	8002e9a <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f000 f92f 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000050 	.word	0x20000050
 8002c04:	2000004c 	.word	0x2000004c

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000050 	.word	0x20000050
 8002c2c:	200004e8 	.word	0x200004e8

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	200004e8 	.word	0x200004e8

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_Delay+0x44>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000050 	.word	0x20000050

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff3e 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff31 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff feb6 	bl	8002c30 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e099      	b.n	8003004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef0:	e00f      	b.n	8002f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff fe9d 	bl	8002c30 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d908      	bls.n	8002f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e078      	b.n	8003004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e8      	bne.n	8002ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_DMA_Init+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d117      	bne.n	8002fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f8bd 	bl	8003138 <DMA_CheckFifoParam>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e016      	b.n	8003004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f874 	bl	80030cc <DMA_CalcBaseAndBitshift>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	f010803f 	.word	0xf010803f

08003010 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e050      	b.n	80030c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d101      	bne.n	8003032 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e048      	b.n	80030c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f82a 	bl	80030cc <DMA_CalcBaseAndBitshift>
 8003078:	4603      	mov	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	223f      	movs	r2, #63	; 0x3f
 80030a6:	409a      	lsls	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3b10      	subs	r3, #16
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <DMA_CalcBaseAndBitshift+0x64>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <DMA_CalcBaseAndBitshift+0x68>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d909      	bls.n	800310e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	1d1a      	adds	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58
 800310c:	e007      	b.n	800311e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	aaaaaaab 	.word	0xaaaaaaab
 8003134:	0800a65c 	.word	0x0800a65c

08003138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d856      	bhi.n	8003206 <DMA_CheckFifoParam+0xce>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <DMA_CheckFifoParam+0x28>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	08003183 	.word	0x08003183
 8003168:	08003171 	.word	0x08003171
 800316c:	08003207 	.word	0x08003207
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d046      	beq.n	800320a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e043      	b.n	800320a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800318a:	d140      	bne.n	800320e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e03d      	b.n	800320e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	d121      	bne.n	80031e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d837      	bhi.n	8003212 <DMA_CheckFifoParam+0xda>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <DMA_CheckFifoParam+0x70>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031bf 	.word	0x080031bf
 80031b0:	080031b9 	.word	0x080031b9
 80031b4:	080031d1 	.word	0x080031d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e030      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d025      	beq.n	8003216 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ce:	e022      	b.n	8003216 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031d8:	d11f      	bne.n	800321a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031de:	e01c      	b.n	800321a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d903      	bls.n	80031ee <DMA_CheckFifoParam+0xb6>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031ec:	e018      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
      break;
 80031f2:	e015      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      break;
 8003204:	e00b      	b.n	800321e <DMA_CheckFifoParam+0xe6>
      break;
 8003206:	bf00      	nop
 8003208:	e00a      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;
 800320a:	bf00      	nop
 800320c:	e008      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;
 800320e:	bf00      	nop
 8003210:	e006      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;
 8003212:	bf00      	nop
 8003214:	e004      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;   
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
    }
  } 
  
  return status; 
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03b      	b.n	80032ba <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f833 	bl	80032c2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	f023 0107 	bic.w	r1, r3, #7
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800329a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d1      	ldr	r1, [r2, #12]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af02      	add	r7, sp, #8
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA2D_Start+0x1c>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e018      	b.n	8003324 <HAL_DMA2D_Start+0x4e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f989 	bl	8003624 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d056      	beq.n	80033f6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003348:	f7ff fc72 	bl	8002c30 <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800334e:	e04b      	b.n	80033e8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2204      	movs	r2, #4
 800339a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0a5      	b.n	80034f6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7ff fc3d 	bl	8002c30 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <HAL_DMA2D_PollForTransfer+0x9c>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10f      	bne.n	80033e8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2203      	movs	r2, #3
 80033d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e086      	b.n	80034f6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ac      	beq.n	8003350 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d061      	beq.n	80034dc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003418:	f7ff fc0a 	bl	8002c30 <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800341e:	e056      	b.n	80034ce <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800342e:	2b00      	cmp	r3, #0
 8003430:	d02e      	beq.n	8003490 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	f043 0204 	orr.w	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2229      	movs	r2, #41	; 0x29
 800347a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2204      	movs	r2, #4
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e032      	b.n	80034f6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d01a      	beq.n	80034ce <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7ff fbca 	bl	8002c30 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <HAL_DMA2D_PollForTransfer+0x182>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e013      	b.n	80034f6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0a1      	beq.n	8003420 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2212      	movs	r2, #18
 80034e2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_DMA2D_ConfigLayer+0x20>
 800351c:	2302      	movs	r3, #2
 800351e:	e079      	b.n	8003614 <HAL_DMA2D_ConfigLayer+0x114>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	3318      	adds	r3, #24
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800354a:	4b35      	ldr	r3, [pc, #212]	; (8003620 <HAL_DMA2D_ConfigLayer+0x120>)
 800354c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b0a      	cmp	r3, #10
 8003554:	d003      	beq.n	800355e <HAL_DMA2D_ConfigLayer+0x5e>
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b09      	cmp	r3, #9
 800355c:	d107      	bne.n	800356e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e005      	b.n	800357a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d120      	bne.n	80035c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	ea02 0103 	and.w	r1, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	430a      	orrs	r2, r1
 8003596:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b0a      	cmp	r3, #10
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	d127      	bne.n	8003602 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	e01f      	b.n	8003602 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	ea02 0103 	and.w	r1, r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b0a      	cmp	r3, #10
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	d106      	bne.n	8003602 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003600:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	ff03000f 	.word	0xff03000f

08003624 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003624:	b480      	push	{r7}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	041a      	lsls	r2, r3, #16
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800365c:	d174      	bne.n	8003748 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003664:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800366c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003674:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d108      	bne.n	8003696 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	431a      	orrs	r2, r3
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	4313      	orrs	r3, r2
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	e053      	b.n	800373e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d106      	bne.n	80036ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	e048      	b.n	800373e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d111      	bne.n	80036d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	0cdb      	lsrs	r3, r3, #19
 80036b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	0a9b      	lsrs	r3, r3, #10
 80036be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08db      	lsrs	r3, r3, #3
 80036c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	02db      	lsls	r3, r3, #11
 80036ce:	4313      	orrs	r3, r2
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	e032      	b.n	800373e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d117      	bne.n	8003710 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	0fdb      	lsrs	r3, r3, #31
 80036e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	0cdb      	lsrs	r3, r3, #19
 80036ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	0adb      	lsrs	r3, r3, #11
 80036f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	431a      	orrs	r2, r3
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	03db      	lsls	r3, r3, #15
 8003706:	4313      	orrs	r3, r2
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	e016      	b.n	800373e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	0f1b      	lsrs	r3, r3, #28
 8003714:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	0d1b      	lsrs	r3, r3, #20
 800371a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	0b1b      	lsrs	r3, r3, #12
 8003720:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	011a      	lsls	r2, r3, #4
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	431a      	orrs	r2, r3
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	4313      	orrs	r3, r2
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003746:	e003      	b.n	8003750 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	60da      	str	r2, [r3, #12]
}
 8003750:	bf00      	nop
 8003752:	372c      	adds	r7, #44	; 0x2c
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e177      	b.n	8003a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8166 	bne.w	8003a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d005      	beq.n	80037ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d130      	bne.n	8003810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e4:	2201      	movs	r2, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0201 	and.w	r2, r3, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d017      	beq.n	800384c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d123      	bne.n	80038a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3208      	adds	r2, #8
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0203 	and.w	r2, r3, #3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80c0 	beq.w	8003a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fe:	4a61      	ldr	r2, [pc, #388]	; (8003a84 <HAL_GPIO_Init+0x328>)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_GPIO_Init+0x32c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d037      	beq.n	800399a <HAL_GPIO_Init+0x23e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <HAL_GPIO_Init+0x330>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d031      	beq.n	8003996 <HAL_GPIO_Init+0x23a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_GPIO_Init+0x334>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <HAL_GPIO_Init+0x236>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a55      	ldr	r2, [pc, #340]	; (8003a94 <HAL_GPIO_Init+0x338>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d025      	beq.n	800398e <HAL_GPIO_Init+0x232>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a54      	ldr	r2, [pc, #336]	; (8003a98 <HAL_GPIO_Init+0x33c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01f      	beq.n	800398a <HAL_GPIO_Init+0x22e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a53      	ldr	r2, [pc, #332]	; (8003a9c <HAL_GPIO_Init+0x340>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d019      	beq.n	8003986 <HAL_GPIO_Init+0x22a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_GPIO_Init+0x344>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_GPIO_Init+0x226>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a51      	ldr	r2, [pc, #324]	; (8003aa4 <HAL_GPIO_Init+0x348>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00d      	beq.n	800397e <HAL_GPIO_Init+0x222>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <HAL_GPIO_Init+0x34c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <HAL_GPIO_Init+0x21e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4f      	ldr	r2, [pc, #316]	; (8003aac <HAL_GPIO_Init+0x350>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_GPIO_Init+0x21a>
 8003972:	2309      	movs	r3, #9
 8003974:	e012      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003976:	230a      	movs	r3, #10
 8003978:	e010      	b.n	800399c <HAL_GPIO_Init+0x240>
 800397a:	2308      	movs	r3, #8
 800397c:	e00e      	b.n	800399c <HAL_GPIO_Init+0x240>
 800397e:	2307      	movs	r3, #7
 8003980:	e00c      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003982:	2306      	movs	r3, #6
 8003984:	e00a      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003986:	2305      	movs	r3, #5
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x240>
 800398a:	2304      	movs	r3, #4
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x240>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x240>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4935      	ldr	r1, [pc, #212]	; (8003a84 <HAL_GPIO_Init+0x328>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e4:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a08:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f ae84 	bls.w	8003778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	40020800 	.word	0x40020800
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40021400 	.word	0x40021400
 8003aa0:	40021800 	.word	0x40021800
 8003aa4:	40021c00 	.word	0x40021c00
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40022400 	.word	0x40022400
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e0d9      	b.n	8003c84 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	f040 80c9 	bne.w	8003c7e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003aec:	4a6b      	ldr	r2, [pc, #428]	; (8003c9c <HAL_GPIO_DeInit+0x1e8>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_GPIO_DeInit+0x1ec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d037      	beq.n	8003b86 <HAL_GPIO_DeInit+0xd2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a62      	ldr	r2, [pc, #392]	; (8003ca4 <HAL_GPIO_DeInit+0x1f0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_GPIO_DeInit+0xce>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a61      	ldr	r2, [pc, #388]	; (8003ca8 <HAL_GPIO_DeInit+0x1f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02b      	beq.n	8003b7e <HAL_GPIO_DeInit+0xca>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a60      	ldr	r2, [pc, #384]	; (8003cac <HAL_GPIO_DeInit+0x1f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_DeInit+0xc6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <HAL_GPIO_DeInit+0x1fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_DeInit+0xc2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <HAL_GPIO_DeInit+0x200>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_DeInit+0xbe>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a5d      	ldr	r2, [pc, #372]	; (8003cb8 <HAL_GPIO_DeInit+0x204>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_DeInit+0xba>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <HAL_GPIO_DeInit+0x208>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_DeInit+0xb6>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a5b      	ldr	r2, [pc, #364]	; (8003cc0 <HAL_GPIO_DeInit+0x20c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_DeInit+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a5a      	ldr	r2, [pc, #360]	; (8003cc4 <HAL_GPIO_DeInit+0x210>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_DeInit+0xae>
 8003b5e:	2309      	movs	r3, #9
 8003b60:	e012      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b62:	230a      	movs	r3, #10
 8003b64:	e010      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b66:	2308      	movs	r3, #8
 8003b68:	e00e      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	e00c      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b6e:	2306      	movs	r3, #6
 8003b70:	e00a      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b72:	2305      	movs	r3, #5
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_DeInit+0xd4>
 8003b86:	2300      	movs	r3, #0
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d132      	bne.n	8003bfe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b98:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	4949      	ldr	r1, [pc, #292]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	4946      	ldr	r1, [pc, #280]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bb4:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4942      	ldr	r1, [pc, #264]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	493f      	ldr	r1, [pc, #252]	; (8003cc8 <HAL_GPIO_DeInit+0x214>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_GPIO_DeInit+0x1e8>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	482a      	ldr	r0, [pc, #168]	; (8003c9c <HAL_GPIO_DeInit+0x1e8>)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2103      	movs	r1, #3
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	220f      	movs	r2, #15
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	08d2      	lsrs	r2, r2, #3
 8003c34:	4019      	ands	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3208      	adds	r2, #8
 8003c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2103      	movs	r1, #3
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2103      	movs	r1, #3
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	401a      	ands	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	f67f af22 	bls.w	8003ad0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022400 	.word	0x40022400
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce8:	e003      	b.n	8003cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cea:	887b      	ldrh	r3, [r7, #2]
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0bf      	b.n	8003e92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8ba 	bl	8003ea0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d42:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6899      	ldr	r1, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_LTDC_Init+0x19c>)
 8003d74:	400b      	ands	r3, r1
 8003d76:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_LTDC_Init+0x19c>)
 8003da2:	400b      	ands	r3, r1
 8003da4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6919      	ldr	r1, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_LTDC_Init+0x19c>)
 8003dd0:	400b      	ands	r3, r1
 8003dd2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6959      	ldr	r1, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_LTDC_Init+0x19c>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6959      	ldr	r1, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0206 	orr.w	r2, r2, #6
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	f000f800 	.word	0xf000f800

08003ea0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_LTDC_ConfigLayer+0x1a>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e02c      	b.n	8003f28 <HAL_LTDC_ConfigLayer+0x74>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2134      	movs	r1, #52	; 0x34
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f83b 	bl	8003f84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bdb0      	pop	{r4, r5, r7, pc}

08003f30 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_LTDC_EnableDither+0x16>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e016      	b.n	8003f74 <HAL_LTDC_EnableDither+0x44>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_LTDC_EnableDither+0x50>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_LTDC_EnableDither+0x50>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40016800 	.word	0x40016800

08003f84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	4413      	add	r3, r2
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	01db      	lsls	r3, r3, #7
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3384      	adds	r3, #132	; 0x84
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	01d2      	lsls	r2, r2, #7
 8003fc0:	440a      	add	r2, r1
 8003fc2:	3284      	adds	r2, #132	; 0x84
 8003fc4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	01db      	lsls	r3, r3, #7
 8003fe8:	440b      	add	r3, r1
 8003fea:	3384      	adds	r3, #132	; 0x84
 8003fec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ff2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004002:	4413      	add	r3, r2
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	4413      	add	r3, r2
 8004014:	3384      	adds	r3, #132	; 0x84
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	4611      	mov	r1, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	01d2      	lsls	r2, r2, #7
 8004022:	440a      	add	r2, r1
 8004024:	3284      	adds	r2, #132	; 0x84
 8004026:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800402a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403a:	4413      	add	r3, r2
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	01db      	lsls	r3, r3, #7
 8004048:	440b      	add	r3, r1
 800404a:	3384      	adds	r3, #132	; 0x84
 800404c:	4619      	mov	r1, r3
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	01db      	lsls	r3, r3, #7
 800405e:	4413      	add	r3, r2
 8004060:	3384      	adds	r3, #132	; 0x84
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	4611      	mov	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	01d2      	lsls	r2, r2, #7
 800406e:	440a      	add	r2, r1
 8004070:	3284      	adds	r2, #132	; 0x84
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	01db      	lsls	r3, r3, #7
 8004082:	4413      	add	r3, r2
 8004084:	3384      	adds	r3, #132	; 0x84
 8004086:	461a      	mov	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	01db      	lsls	r3, r3, #7
 80040b4:	4413      	add	r3, r2
 80040b6:	3384      	adds	r3, #132	; 0x84
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	01db      	lsls	r3, r3, #7
 80040c4:	4413      	add	r3, r2
 80040c6:	3384      	adds	r3, #132	; 0x84
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040d4:	461a      	mov	r2, r3
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	431a      	orrs	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	440b      	add	r3, r1
 80040ea:	3384      	adds	r3, #132	; 0x84
 80040ec:	4619      	mov	r1, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	01db      	lsls	r3, r3, #7
 80040fe:	4413      	add	r3, r2
 8004100:	3384      	adds	r3, #132	; 0x84
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	4611      	mov	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	01d2      	lsls	r2, r2, #7
 800410e:	440a      	add	r2, r1
 8004110:	3284      	adds	r2, #132	; 0x84
 8004112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004116:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	4413      	add	r3, r2
 8004124:	3384      	adds	r3, #132	; 0x84
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	01db      	lsls	r3, r3, #7
 8004138:	4413      	add	r3, r2
 800413a:	3384      	adds	r3, #132	; 0x84
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	4611      	mov	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	01d2      	lsls	r2, r2, #7
 8004148:	440a      	add	r2, r1
 800414a:	3284      	adds	r2, #132	; 0x84
 800414c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	6809      	ldr	r1, [r1, #0]
 8004162:	4608      	mov	r0, r1
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	01c9      	lsls	r1, r1, #7
 8004168:	4401      	add	r1, r0
 800416a:	3184      	adds	r1, #132	; 0x84
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	01db      	lsls	r3, r3, #7
 800417a:	4413      	add	r3, r2
 800417c:	3384      	adds	r3, #132	; 0x84
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	01db      	lsls	r3, r3, #7
 800418a:	4413      	add	r3, r2
 800418c:	3384      	adds	r3, #132	; 0x84
 800418e:	461a      	mov	r2, r3
 8004190:	2300      	movs	r3, #0
 8004192:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	4413      	add	r3, r2
 80041a0:	3384      	adds	r3, #132	; 0x84
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041b2:	2304      	movs	r3, #4
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e01b      	b.n	80041f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041c0:	2303      	movs	r3, #3
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e014      	b.n	80041f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d00b      	beq.n	80041e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d007      	beq.n	80041e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d003      	beq.n	80041e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041e2:	2b07      	cmp	r3, #7
 80041e4:	d102      	bne.n	80041ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041e6:	2302      	movs	r3, #2
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e001      	b.n	80041f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041ec:	2301      	movs	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	01db      	lsls	r3, r3, #7
 80041fa:	4413      	add	r3, r2
 80041fc:	3384      	adds	r3, #132	; 0x84
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	4611      	mov	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	01d2      	lsls	r2, r2, #7
 800420a:	440a      	add	r2, r1
 800420c:	3284      	adds	r2, #132	; 0x84
 800420e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004212:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	1acb      	subs	r3, r1, r3
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6809      	ldr	r1, [r1, #0]
 8004236:	4608      	mov	r0, r1
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	01c9      	lsls	r1, r1, #7
 800423c:	4401      	add	r1, r0
 800423e:	3184      	adds	r1, #132	; 0x84
 8004240:	4313      	orrs	r3, r2
 8004242:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	4413      	add	r3, r2
 8004250:	3384      	adds	r3, #132	; 0x84
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	4611      	mov	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	01d2      	lsls	r2, r2, #7
 800425e:	440a      	add	r2, r1
 8004260:	3284      	adds	r2, #132	; 0x84
 8004262:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	01db      	lsls	r3, r3, #7
 8004276:	4413      	add	r3, r2
 8004278:	3384      	adds	r3, #132	; 0x84
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4413      	add	r3, r2
 800428e:	3384      	adds	r3, #132	; 0x84
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	4611      	mov	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	01d2      	lsls	r2, r2, #7
 800429c:	440a      	add	r2, r1
 800429e:	3284      	adds	r2, #132	; 0x84
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_PWREx_EnableOverDrive+0x90>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <HAL_PWREx_EnableOverDrive+0x90>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_PWREx_EnableOverDrive+0x90>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_PWREx_EnableOverDrive+0x94>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e0:	f7fe fca6 	bl	8002c30 <HAL_GetTick>
 80042e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e6:	e009      	b.n	80042fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e8:	f7fe fca2 	bl	8002c30 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f6:	d901      	bls.n	80042fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e01f      	b.n	800433c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d1ee      	bne.n	80042e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004310:	f7fe fc8e 	bl	8002c30 <HAL_GetTick>
 8004314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004316:	e009      	b.n	800432c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004318:	f7fe fc8a 	bl	8002c30 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004326:	d901      	bls.n	800432c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e007      	b.n	800433c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004338:	d1ee      	bne.n	8004318 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	420e0040 	.word	0x420e0040
 800434c:	40007000 	.word	0x40007000
 8004350:	420e0044 	.word	0x420e0044

08004354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e267      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d075      	beq.n	800445e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004372:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00c      	beq.n	8004398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b85      	ldr	r3, [pc, #532]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004386:	2b08      	cmp	r3, #8
 8004388:	d112      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b82      	ldr	r3, [pc, #520]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004396:	d10b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	4b7e      	ldr	r3, [pc, #504]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05b      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d157      	bne.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e242      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x74>
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x98>
 80043d2:	4b70      	ldr	r3, [pc, #448]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6f      	ldr	r2, [pc, #444]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6c      	ldr	r2, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043ec:	4b69      	ldr	r3, [pc, #420]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b66      	ldr	r3, [pc, #408]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a65      	ldr	r2, [pc, #404]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fc10 	bl	8002c30 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004414:	f7fe fc0c 	bl	8002c30 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e207      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xc0>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fbfc 	bl	8002c30 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7fe fbf8 	bl	8002c30 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1f3      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	4b51      	ldr	r3, [pc, #324]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0xe8>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d063      	beq.n	8004532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446a:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447e:	2b08      	cmp	r3, #8
 8004480:	d11c      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b44      	ldr	r3, [pc, #272]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e1c7      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ba:	e03a      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c4:	4b34      	ldr	r3, [pc, #208]	; (8004598 <HAL_RCC_OscConfig+0x244>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fe fbb1 	bl	8002c30 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fe fbad 	bl	8002c30 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1a8      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4925      	ldr	r1, [pc, #148]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
 8004504:	e015      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <HAL_RCC_OscConfig+0x244>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe fb90 	bl	8002c30 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004514:	f7fe fb8c 	bl	8002c30 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e187      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d036      	beq.n	80045ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_RCC_OscConfig+0x248>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fe fb70 	bl	8002c30 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004554:	f7fe fb6c 	bl	8002c30 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e167      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_OscConfig+0x240>)
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x200>
 8004572:	e01b      	b.n	80045ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_OscConfig+0x248>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fe fb59 	bl	8002c30 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	e00e      	b.n	80045a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004582:	f7fe fb55 	bl	8002c30 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d907      	bls.n	80045a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e150      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 8004594:	40023800 	.word	0x40023800
 8004598:	42470000 	.word	0x42470000
 800459c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ea      	bne.n	8004582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8097 	beq.w	80046e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045be:	4b81      	ldr	r3, [pc, #516]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	4b7d      	ldr	r3, [pc, #500]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	4a7c      	ldr	r2, [pc, #496]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
 80045da:	4b7a      	ldr	r3, [pc, #488]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b77      	ldr	r3, [pc, #476]	; (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d118      	bne.n	8004628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f6:	4b74      	ldr	r3, [pc, #464]	; (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a73      	ldr	r2, [pc, #460]	; (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004602:	f7fe fb15 	bl	8002c30 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460a:	f7fe fb11 	bl	8002c30 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e10c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x474>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x2ea>
 8004630:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a63      	ldr	r2, [pc, #396]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	e01c      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x30c>
 8004646:	4b5f      	ldr	r3, [pc, #380]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a5e      	ldr	r2, [pc, #376]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	4b5c      	ldr	r3, [pc, #368]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a5b      	ldr	r2, [pc, #364]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 8004660:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	4b55      	ldr	r3, [pc, #340]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0304 	bic.w	r3, r3, #4
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d015      	beq.n	80046ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fe fad6 	bl	8002c30 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fe fad2 	bl	8002c30 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0cb      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ee      	beq.n	8004688 <HAL_RCC_OscConfig+0x334>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fe fac0 	bl	8002c30 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fe fabc 	bl	8002c30 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0b5      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ca:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ee      	bne.n	80046b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046dc:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	4a38      	ldr	r2, [pc, #224]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a1 	beq.w	8004834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d05c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d141      	bne.n	800478a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <HAL_RCC_OscConfig+0x478>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fe fa90 	bl	8002c30 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004714:	f7fe fa8c 	bl	8002c30 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e087      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x478>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fe fa65 	bl	8002c30 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fe fa61 	bl	8002c30 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e05c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x416>
 8004788:	e054      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCC_OscConfig+0x478>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fe fa4e 	bl	8002c30 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe fa4a 	bl	8002c30 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e045      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x470>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x444>
 80047b6:	e03d      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e038      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x4ec>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d028      	beq.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d121      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11a      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	4293      	cmp	r3, r2
 800480a:	d111      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0cc      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b68      	ldr	r3, [pc, #416]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d90c      	bls.n	8004880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a52      	ldr	r2, [pc, #328]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d044      	beq.n	8004964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d119      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	4b3f      	ldr	r3, [pc, #252]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e06f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b3b      	ldr	r3, [pc, #236]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e067      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004922:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4934      	ldr	r1, [pc, #208]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004934:	f7fe f97c 	bl	8002c30 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fe f978 	bl	8002c30 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	; 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 020c 	and.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	429a      	cmp	r2, r3
 8004962:	d1eb      	bne.n	800493c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d20c      	bcs.n	800498c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b22      	ldr	r3, [pc, #136]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe f8dc 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08008b94 	.word	0x08008b94
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	2000004c 	.word	0x2000004c

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b090      	sub	sp, #64	; 0x40
 8004a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a20:	2300      	movs	r3, #0
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a28:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x40>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f200 80a1 	bhi.w	8004b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a42:	e09b      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a48:	e09b      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4a:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a4e:	e098      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5a:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d028      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	627a      	str	r2, [r7, #36]	; 0x24
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a7c:	fb03 f201 	mul.w	r2, r3, r1
 8004a80:	2300      	movs	r3, #0
 8004a82:	fb00 f303 	mul.w	r3, r0, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	4a43      	ldr	r2, [pc, #268]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a90:	460a      	mov	r2, r1
 8004a92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a96:	4413      	add	r3, r2
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aaa:	f7fc f88d 	bl	8000bc8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab6:	e053      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab8:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	2200      	movs	r2, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	617a      	str	r2, [r7, #20]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aca:	f04f 0b00 	mov.w	fp, #0
 8004ace:	4652      	mov	r2, sl
 8004ad0:	465b      	mov	r3, fp
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	0159      	lsls	r1, r3, #5
 8004adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae0:	0150      	lsls	r0, r2, #5
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aea:	eb63 090b 	sbc.w	r9, r3, fp
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b02:	ebb2 0408 	subs.w	r4, r2, r8
 8004b06:	eb63 0509 	sbc.w	r5, r3, r9
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	00eb      	lsls	r3, r5, #3
 8004b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b18:	00e2      	lsls	r2, r4, #3
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	eb14 030a 	adds.w	r3, r4, sl
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	eb45 030b 	adc.w	r3, r5, fp
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b36:	4629      	mov	r1, r5
 8004b38:	028b      	lsls	r3, r1, #10
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b40:	4621      	mov	r1, r4
 8004b42:	028a      	lsls	r2, r1, #10
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	60fa      	str	r2, [r7, #12]
 8004b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b54:	f7fc f838 	bl	8000bc8 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b7a:	e002      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3740      	adds	r7, #64	; 0x40
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	017d7840 	.word	0x017d7840

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d075      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd0:	4b91      	ldr	r3, [pc, #580]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd6:	f7fe f82b 	bl	8002c30 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bde:	f7fe f827 	bl	8002c30 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e189      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf0:	4b8a      	ldr	r3, [pc, #552]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	019a      	lsls	r2, r3, #6
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	071b      	lsls	r3, r3, #28
 8004c14:	4981      	ldr	r1, [pc, #516]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01f      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c28:	4b7c      	ldr	r3, [pc, #496]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	0f1b      	lsrs	r3, r3, #28
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	019a      	lsls	r2, r3, #6
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	431a      	orrs	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	071b      	lsls	r3, r3, #28
 8004c48:	4974      	ldr	r1, [pc, #464]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c50:	4b72      	ldr	r3, [pc, #456]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c56:	f023 021f 	bic.w	r2, r3, #31
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	496e      	ldr	r1, [pc, #440]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	019a      	lsls	r2, r3, #6
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	061b      	lsls	r3, r3, #24
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	071b      	lsls	r3, r3, #28
 8004c88:	4964      	ldr	r1, [pc, #400]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c90:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fd ffcb 	bl	8002c30 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9e:	f7fd ffc7 	bl	8002c30 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e129      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d079      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cd4:	4b52      	ldr	r3, [pc, #328]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fd ffa9 	bl	8002c30 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ce2:	f7fd ffa5 	bl	8002c30 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e107      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cf4:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d00:	d0ef      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d0e:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	0f1b      	lsrs	r3, r3, #28
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	019a      	lsls	r2, r3, #6
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	493b      	ldr	r1, [pc, #236]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	0e1b      	lsrs	r3, r3, #24
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	019a      	lsls	r2, r3, #6
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	071b      	lsls	r3, r3, #28
 8004d7c:	4927      	ldr	r1, [pc, #156]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d84:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4922      	ldr	r1, [pc, #136]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d9a:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fd ff46 	bl	8002c30 <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004da8:	f7fd ff42 	bl	8002c30 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0a4      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc6:	d1ef      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 808b 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfe:	f7fd ff17 	bl	8002c30 <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e04:	e010      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fd ff13 	bl	8002c30 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d909      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e075      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e18:	42470068 	.word	0x42470068
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	42470070 	.word	0x42470070
 8004e24:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e28:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0e8      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d02f      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e52:	4b2f      	ldr	r3, [pc, #188]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e68:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e6e:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d114      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fd fed9 	bl	8002c30 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fd fed5 	bl	8002c30 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e035      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ee      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d10d      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	4912      	ldr	r1, [pc, #72]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]
 8004ecc:	e005      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee6:	490a      	ldr	r1, [pc, #40]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f00:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	40023800 	.word	0x40023800
 8004f14:	42470e40 	.word	0x42470e40
 8004f18:	424711e0 	.word	0x424711e0

08004f1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e025      	b.n	8004f7c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f81d 	bl	8004f84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f000 fe57 	bl	8005c10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	f000 feac 	bl	8005cca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004faa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e021      	b.n	8004ffa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d002      	beq.n	8004fc2 <HAL_SDRAM_SendCommand+0x2a>
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d118      	bne.n	8004ff4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fee2 	bl	8005d9c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d104      	bne.n	8004fea <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004fe8:	e006      	b.n	8004ff8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ff2:	e001      	b.n	8004ff8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d101      	bne.n	800501c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	e016      	b.n	800504a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10f      	bne.n	8005048 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 feed 	bl	8005e16 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e07b      	b.n	800515c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005074:	d009      	beq.n	800508a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]
 800507c:	e005      	b.n	800508a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc f885 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	ea42 0103 	orr.w	r1, r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f003 0104 	and.w	r1, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0210 	and.w	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e01a      	b.n	80051ac <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc f858 	bl	8001244 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_SPI_Transmit+0x22>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e126      	b.n	8005424 <HAL_SPI_Transmit+0x270>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051de:	f7fd fd27 	bl	8002c30 <HAL_GetTick>
 80051e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
 80051f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f8:	e10b      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_Transmit+0x52>
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800520a:	e102      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2203      	movs	r2, #3
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d10f      	bne.n	8005274 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d007      	beq.n	8005292 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529a:	d14b      	bne.n	8005334 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0xf6>
 80052a4:	8afb      	ldrh	r3, [r7, #22]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d13e      	bne.n	8005328 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052ce:	e02b      	b.n	8005328 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d112      	bne.n	8005304 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	86da      	strh	r2, [r3, #54]	; 0x36
 8005302:	e011      	b.n	8005328 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005304:	f7fd fc94 	bl	8002c30 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d803      	bhi.n	800531c <HAL_SPI_Transmit+0x168>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d102      	bne.n	8005322 <HAL_SPI_Transmit+0x16e>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005326:	e074      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1ce      	bne.n	80052d0 <HAL_SPI_Transmit+0x11c>
 8005332:	e04c      	b.n	80053ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_SPI_Transmit+0x18e>
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d140      	bne.n	80053c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005368:	e02c      	b.n	80053c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d113      	bne.n	80053a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	86da      	strh	r2, [r3, #54]	; 0x36
 800539e:	e011      	b.n	80053c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a0:	f7fd fc46 	bl	8002c30 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d803      	bhi.n	80053b8 <HAL_SPI_Transmit+0x204>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d102      	bne.n	80053be <HAL_SPI_Transmit+0x20a>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c2:	e026      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cd      	bne.n	800536a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fbda 	bl	8005b8c <SPI_EndRxTxTransaction>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e000      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005410:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005448:	d112      	bne.n	8005470 <HAL_SPI_Receive+0x44>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10e      	bne.n	8005470 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2204      	movs	r2, #4
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f8f1 	bl	800564e <HAL_SPI_TransmitReceive>
 800546c:	4603      	mov	r3, r0
 800546e:	e0ea      	b.n	8005646 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_SPI_Receive+0x52>
 800547a:	2302      	movs	r3, #2
 800547c:	e0e3      	b.n	8005646 <HAL_SPI_Receive+0x21a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005486:	f7fd fbd3 	bl	8002c30 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d002      	beq.n	800549e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005498:	2302      	movs	r3, #2
 800549a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800549c:	e0ca      	b.n	8005634 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_SPI_Receive+0x7e>
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054ae:	e0c1      	b.n	8005634 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2204      	movs	r2, #4
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f6:	d10f      	bne.n	8005518 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005516:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d007      	beq.n	8005536 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005534:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d162      	bne.n	8005604 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800553e:	e02e      	b.n	800559e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d115      	bne.n	800557a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f103 020c 	add.w	r2, r3, #12
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005578:	e011      	b.n	800559e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557a:	f7fd fb59 	bl	8002c30 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d803      	bhi.n	8005592 <HAL_SPI_Receive+0x166>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d102      	bne.n	8005598 <HAL_SPI_Receive+0x16c>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800559c:	e04a      	b.n	8005634 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1cb      	bne.n	8005540 <HAL_SPI_Receive+0x114>
 80055a8:	e031      	b.n	800560e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d113      	bne.n	80055e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	b292      	uxth	r2, r2
 80055c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055de:	e011      	b.n	8005604 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e0:	f7fd fb26 	bl	8002c30 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d803      	bhi.n	80055f8 <HAL_SPI_Receive+0x1cc>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Receive+0x1d2>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005602:	e017      	b.n	8005634 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1cd      	bne.n	80055aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa54 	bl	8005ac0 <SPI_EndRxTransaction>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
 8005630:	e000      	b.n	8005634 <HAL_SPI_Receive+0x208>
  }

error :
 8005632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b08c      	sub	sp, #48	; 0x30
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800565c:	2301      	movs	r3, #1
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x26>
 8005670:	2302      	movs	r3, #2
 8005672:	e18a      	b.n	800598a <HAL_SPI_TransmitReceive+0x33c>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567c:	f7fd fad8 	bl	8002c30 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800569a:	2b01      	cmp	r3, #1
 800569c:	d00f      	beq.n	80056be <HAL_SPI_TransmitReceive+0x70>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a4:	d107      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x68>
 80056ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d003      	beq.n	80056be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056bc:	e15b      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x82>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x82>
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056d6:	e14e      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d003      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2205      	movs	r2, #5
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	887a      	ldrh	r2, [r7, #2]
 8005702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	887a      	ldrh	r2, [r7, #2]
 800570e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	887a      	ldrh	r2, [r7, #2]
 8005714:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d007      	beq.n	8005740 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005748:	d178      	bne.n	800583c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x10a>
 8005752:	8b7b      	ldrh	r3, [r7, #26]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d166      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	881a      	ldrh	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	1c9a      	adds	r2, r3, #2
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577c:	e053      	b.n	8005826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x176>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x176>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d113      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	1c9a      	adds	r2, r3, #2
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d119      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x1b8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	b292      	uxth	r2, r2
 80057e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005802:	2301      	movs	r3, #1
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005806:	f7fd fa13 	bl	8002c30 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005812:	429a      	cmp	r2, r3
 8005814:	d807      	bhi.n	8005826 <HAL_SPI_TransmitReceive+0x1d8>
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d003      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005824:	e0a7      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1a6      	bne.n	800577e <HAL_SPI_TransmitReceive+0x130>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1a1      	bne.n	800577e <HAL_SPI_TransmitReceive+0x130>
 800583a:	e07c      	b.n	8005936 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_TransmitReceive+0x1fc>
 8005844:	8b7b      	ldrh	r3, [r7, #26]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d16b      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005870:	e057      	b.n	8005922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11c      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x26c>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x26c>
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d114      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d119      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x2ae>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d014      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f8:	2301      	movs	r3, #1
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058fc:	f7fd f998 	bl	8002c30 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005908:	429a      	cmp	r2, r3
 800590a:	d803      	bhi.n	8005914 <HAL_SPI_TransmitReceive+0x2c6>
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d102      	bne.n	800591a <HAL_SPI_TransmitReceive+0x2cc>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005920:	e029      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1a2      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x224>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d19d      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f926 	bl	8005b8c <SPI_EndRxTxTransaction>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005952:	e010      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	e000      	b.n	8005976 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800598a:	4618      	mov	r0, r3
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a0:	b2db      	uxtb	r3, r3
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059c0:	f7fd f936 	bl	8002c30 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4413      	add	r3, r2
 80059ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059d0:	f7fd f92e 	bl	8002c30 <HAL_GetTick>
 80059d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059d6:	4b39      	ldr	r3, [pc, #228]	; (8005abc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	015b      	lsls	r3, r3, #5
 80059dc:	0d1b      	lsrs	r3, r3, #20
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	e054      	b.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d050      	beq.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059f0:	f7fd f91e 	bl	8002c30 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d902      	bls.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d13d      	bne.n	8005a82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1e:	d111      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a28:	d004      	beq.n	8005a34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	d107      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4c:	d10f      	bne.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e017      	b.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d19b      	bne.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000000 	.word	0x20000000

08005ac0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad4:	d111      	bne.n	8005afa <SPI_EndRxTransaction+0x3a>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ade:	d004      	beq.n	8005aea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae8:	d107      	bne.n	8005afa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d12a      	bne.n	8005b5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d012      	beq.n	8005b34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff ff49 	bl	80059b0 <SPI_WaitFlagStateUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02d      	beq.n	8005b80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e026      	b.n	8005b82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff36 	bl	80059b0 <SPI_WaitFlagStateUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01a      	beq.n	8005b80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e013      	b.n	8005b82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2101      	movs	r1, #1
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff ff23 	bl	80059b0 <SPI_WaitFlagStateUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e000      	b.n	8005b82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <SPI_EndRxTxTransaction+0x7c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <SPI_EndRxTxTransaction+0x80>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0d5b      	lsrs	r3, r3, #21
 8005ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb6:	d112      	bne.n	8005bde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff fef4 	bl	80059b0 <SPI_WaitFlagStateUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d0f2      	beq.n	8005bde <SPI_EndRxTxTransaction+0x52>
 8005bf8:	e000      	b.n	8005bfc <SPI_EndRxTxTransaction+0x70>
        break;
 8005bfa:	bf00      	nop
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000000 	.word	0x20000000
 8005c0c:	165e9f81 	.word	0x165e9f81

08005c10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d123      	bne.n	8005c6a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	6851      	ldr	r1, [r2, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6892      	ldr	r2, [r2, #8]
 8005c36:	4311      	orrs	r1, r2
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	68d2      	ldr	r2, [r2, #12]
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	6912      	ldr	r2, [r2, #16]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	6952      	ldr	r2, [r2, #20]
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	6992      	ldr	r2, [r2, #24]
 8005c4e:	4311      	orrs	r1, r2
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	69d2      	ldr	r2, [r2, #28]
 8005c54:	4311      	orrs	r1, r2
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	6a12      	ldr	r2, [r2, #32]
 8005c5a:	4311      	orrs	r1, r2
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c60:	430a      	orrs	r2, r1
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e028      	b.n	8005cbc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	69d9      	ldr	r1, [r3, #28]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4319      	orrs	r1, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	430b      	orrs	r3, r1
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	6851      	ldr	r1, [r2, #4]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	6892      	ldr	r2, [r2, #8]
 8005c9c:	4311      	orrs	r1, r2
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	68d2      	ldr	r2, [r2, #12]
 8005ca2:	4311      	orrs	r1, r2
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	6912      	ldr	r2, [r2, #16]
 8005ca8:	4311      	orrs	r1, r2
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	6952      	ldr	r2, [r2, #20]
 8005cae:	4311      	orrs	r1, r2
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	6992      	ldr	r2, [r2, #24]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d128      	bne.n	8005d2e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1e59      	subs	r1, r3, #1
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	4319      	orrs	r1, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	4319      	orrs	r1, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	4319      	orrs	r1, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	4319      	orrs	r1, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	051b      	lsls	r3, r3, #20
 8005d1a:	4319      	orrs	r1, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	430b      	orrs	r3, r1
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e02f      	b.n	8005d8e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	68d2      	ldr	r2, [r2, #12]
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	0311      	lsls	r1, r2, #12
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	6952      	ldr	r2, [r2, #20]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	0512      	lsls	r2, r2, #20
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	1e59      	subs	r1, r3, #1
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4319      	orrs	r1, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	4319      	orrs	r1, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	4319      	orrs	r1, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	430b      	orrs	r3, r1
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	0d9b      	lsrs	r3, r3, #22
 8005db2:	059b      	lsls	r3, r3, #22
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	6811      	ldr	r1, [r2, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	6852      	ldr	r2, [r2, #4]
 8005dbc:	4311      	orrs	r1, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	6892      	ldr	r2, [r2, #8]
 8005dc2:	3a01      	subs	r2, #1
 8005dc4:	0152      	lsls	r2, r2, #5
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	68d2      	ldr	r2, [r2, #12]
 8005dcc:	0252      	lsls	r2, r2, #9
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005dd6:	f7fc ff2b 	bl	8002c30 <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005ddc:	e010      	b.n	8005e00 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d00c      	beq.n	8005e00 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <FMC_SDRAM_SendCommand+0x60>
 8005dec:	f7fc ff20 	bl	8002c30 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d201      	bcs.n	8005e00 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e006      	b.n	8005e0e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d0e8      	beq.n	8005dde <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e28:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	0052      	lsls	r2, r2, #1
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <__cvt>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	ec55 4b10 	vmov	r4, r5, d0
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	460e      	mov	r6, r1
 8005e50:	4619      	mov	r1, r3
 8005e52:	462b      	mov	r3, r5
 8005e54:	bfbb      	ittet	lt
 8005e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e5a:	461d      	movlt	r5, r3
 8005e5c:	2300      	movge	r3, #0
 8005e5e:	232d      	movlt	r3, #45	; 0x2d
 8005e60:	700b      	strb	r3, [r1, #0]
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e68:	4691      	mov	r9, r2
 8005e6a:	f023 0820 	bic.w	r8, r3, #32
 8005e6e:	bfbc      	itt	lt
 8005e70:	4622      	movlt	r2, r4
 8005e72:	4614      	movlt	r4, r2
 8005e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e78:	d005      	beq.n	8005e86 <__cvt+0x42>
 8005e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e7e:	d100      	bne.n	8005e82 <__cvt+0x3e>
 8005e80:	3601      	adds	r6, #1
 8005e82:	2102      	movs	r1, #2
 8005e84:	e000      	b.n	8005e88 <__cvt+0x44>
 8005e86:	2103      	movs	r1, #3
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	ab02      	add	r3, sp, #8
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	ec45 4b10 	vmov	d0, r4, r5
 8005e94:	4653      	mov	r3, sl
 8005e96:	4632      	mov	r2, r6
 8005e98:	f000 fe6a 	bl	8006b70 <_dtoa_r>
 8005e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	d102      	bne.n	8005eaa <__cvt+0x66>
 8005ea4:	f019 0f01 	tst.w	r9, #1
 8005ea8:	d022      	beq.n	8005ef0 <__cvt+0xac>
 8005eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eae:	eb07 0906 	add.w	r9, r7, r6
 8005eb2:	d110      	bne.n	8005ed6 <__cvt+0x92>
 8005eb4:	783b      	ldrb	r3, [r7, #0]
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d10a      	bne.n	8005ed0 <__cvt+0x8c>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ec6:	b918      	cbnz	r0, 8005ed0 <__cvt+0x8c>
 8005ec8:	f1c6 0601 	rsb	r6, r6, #1
 8005ecc:	f8ca 6000 	str.w	r6, [sl]
 8005ed0:	f8da 3000 	ldr.w	r3, [sl]
 8005ed4:	4499      	add	r9, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fe03 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ee2:	b108      	cbz	r0, 8005ee8 <__cvt+0xa4>
 8005ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ee8:	2230      	movs	r2, #48	; 0x30
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	454b      	cmp	r3, r9
 8005eee:	d307      	bcc.n	8005f00 <__cvt+0xbc>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef4:	1bdb      	subs	r3, r3, r7
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	9103      	str	r1, [sp, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e7f0      	b.n	8005eea <__cvt+0xa6>

08005f08 <__exponent>:
 8005f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	bfb8      	it	lt
 8005f10:	4249      	neglt	r1, r1
 8005f12:	f803 2b02 	strb.w	r2, [r3], #2
 8005f16:	bfb4      	ite	lt
 8005f18:	222d      	movlt	r2, #45	; 0x2d
 8005f1a:	222b      	movge	r2, #43	; 0x2b
 8005f1c:	2909      	cmp	r1, #9
 8005f1e:	7042      	strb	r2, [r0, #1]
 8005f20:	dd2a      	ble.n	8005f78 <__exponent+0x70>
 8005f22:	f10d 0207 	add.w	r2, sp, #7
 8005f26:	4617      	mov	r7, r2
 8005f28:	260a      	movs	r6, #10
 8005f2a:	4694      	mov	ip, r2
 8005f2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f30:	fb06 1415 	mls	r4, r6, r5, r1
 8005f34:	3430      	adds	r4, #48	; 0x30
 8005f36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2c63      	cmp	r4, #99	; 0x63
 8005f3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f42:	4629      	mov	r1, r5
 8005f44:	dcf1      	bgt.n	8005f2a <__exponent+0x22>
 8005f46:	3130      	adds	r1, #48	; 0x30
 8005f48:	f1ac 0402 	sub.w	r4, ip, #2
 8005f4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f50:	1c41      	adds	r1, r0, #1
 8005f52:	4622      	mov	r2, r4
 8005f54:	42ba      	cmp	r2, r7
 8005f56:	d30a      	bcc.n	8005f6e <__exponent+0x66>
 8005f58:	f10d 0209 	add.w	r2, sp, #9
 8005f5c:	eba2 020c 	sub.w	r2, r2, ip
 8005f60:	42bc      	cmp	r4, r7
 8005f62:	bf88      	it	hi
 8005f64:	2200      	movhi	r2, #0
 8005f66:	4413      	add	r3, r2
 8005f68:	1a18      	subs	r0, r3, r0
 8005f6a:	b003      	add	sp, #12
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f76:	e7ed      	b.n	8005f54 <__exponent+0x4c>
 8005f78:	2330      	movs	r3, #48	; 0x30
 8005f7a:	3130      	adds	r1, #48	; 0x30
 8005f7c:	7083      	strb	r3, [r0, #2]
 8005f7e:	70c1      	strb	r1, [r0, #3]
 8005f80:	1d03      	adds	r3, r0, #4
 8005f82:	e7f1      	b.n	8005f68 <__exponent+0x60>

08005f84 <_printf_float>:
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	ed2d 8b02 	vpush	{d8}
 8005f8c:	b08d      	sub	sp, #52	; 0x34
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f000 fce7 	bl	800696c <_localeconv_r>
 8005f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	f7fa f974 	bl	8000290 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930a      	str	r3, [sp, #40]	; 0x28
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fb8:	3307      	adds	r3, #7
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	f103 0208 	add.w	r2, r3, #8
 8005fc2:	f8c8 2000 	str.w	r2, [r8]
 8005fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fd4:	ee08 0a10 	vmov	s16, r0
 8005fd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe0:	4b9e      	ldr	r3, [pc, #632]	; (800625c <_printf_float+0x2d8>)
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	f7fa fdb1 	bl	8000b4c <__aeabi_dcmpun>
 8005fea:	bb88      	cbnz	r0, 8006050 <_printf_float+0xcc>
 8005fec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff0:	4b9a      	ldr	r3, [pc, #616]	; (800625c <_printf_float+0x2d8>)
 8005ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff6:	f7fa fd8b 	bl	8000b10 <__aeabi_dcmple>
 8005ffa:	bb48      	cbnz	r0, 8006050 <_printf_float+0xcc>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2300      	movs	r3, #0
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa fd7a 	bl	8000afc <__aeabi_dcmplt>
 8006008:	b110      	cbz	r0, 8006010 <_printf_float+0x8c>
 800600a:	232d      	movs	r3, #45	; 0x2d
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	4a93      	ldr	r2, [pc, #588]	; (8006260 <_printf_float+0x2dc>)
 8006012:	4b94      	ldr	r3, [pc, #592]	; (8006264 <_printf_float+0x2e0>)
 8006014:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006018:	bf94      	ite	ls
 800601a:	4690      	movls	r8, r2
 800601c:	4698      	movhi	r8, r3
 800601e:	2303      	movs	r3, #3
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	9b05      	ldr	r3, [sp, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	f04f 0900 	mov.w	r9, #0
 800602e:	9700      	str	r7, [sp, #0]
 8006030:	4633      	mov	r3, r6
 8006032:	aa0b      	add	r2, sp, #44	; 0x2c
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 f9da 	bl	80063f0 <_printf_common>
 800603c:	3001      	adds	r0, #1
 800603e:	f040 8090 	bne.w	8006162 <_printf_float+0x1de>
 8006042:	f04f 30ff 	mov.w	r0, #4294967295
 8006046:	b00d      	add	sp, #52	; 0x34
 8006048:	ecbd 8b02 	vpop	{d8}
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	f7fa fd78 	bl	8000b4c <__aeabi_dcmpun>
 800605c:	b140      	cbz	r0, 8006070 <_printf_float+0xec>
 800605e:	464b      	mov	r3, r9
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfbc      	itt	lt
 8006064:	232d      	movlt	r3, #45	; 0x2d
 8006066:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606a:	4a7f      	ldr	r2, [pc, #508]	; (8006268 <_printf_float+0x2e4>)
 800606c:	4b7f      	ldr	r3, [pc, #508]	; (800626c <_printf_float+0x2e8>)
 800606e:	e7d1      	b.n	8006014 <_printf_float+0x90>
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006076:	9206      	str	r2, [sp, #24]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	d13f      	bne.n	80060fc <_printf_float+0x178>
 800607c:	2306      	movs	r3, #6
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	9b05      	ldr	r3, [sp, #20]
 8006082:	6861      	ldr	r1, [r4, #4]
 8006084:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006088:	2300      	movs	r3, #0
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	ab0a      	add	r3, sp, #40	; 0x28
 800608e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006092:	ab09      	add	r3, sp, #36	; 0x24
 8006094:	ec49 8b10 	vmov	d0, r8, r9
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7ff fecf 	bl	8005e44 <__cvt>
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060aa:	2b47      	cmp	r3, #71	; 0x47
 80060ac:	4680      	mov	r8, r0
 80060ae:	d108      	bne.n	80060c2 <_printf_float+0x13e>
 80060b0:	1cc8      	adds	r0, r1, #3
 80060b2:	db02      	blt.n	80060ba <_printf_float+0x136>
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	4299      	cmp	r1, r3
 80060b8:	dd41      	ble.n	800613e <_printf_float+0x1ba>
 80060ba:	f1ab 0302 	sub.w	r3, fp, #2
 80060be:	fa5f fb83 	uxtb.w	fp, r3
 80060c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060c6:	d820      	bhi.n	800610a <_printf_float+0x186>
 80060c8:	3901      	subs	r1, #1
 80060ca:	465a      	mov	r2, fp
 80060cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d0:	9109      	str	r1, [sp, #36]	; 0x24
 80060d2:	f7ff ff19 	bl	8005f08 <__exponent>
 80060d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d8:	1813      	adds	r3, r2, r0
 80060da:	2a01      	cmp	r2, #1
 80060dc:	4681      	mov	r9, r0
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	dc02      	bgt.n	80060e8 <_printf_float+0x164>
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	07d2      	lsls	r2, r2, #31
 80060e6:	d501      	bpl.n	80060ec <_printf_float+0x168>
 80060e8:	3301      	adds	r3, #1
 80060ea:	6123      	str	r3, [r4, #16]
 80060ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d09c      	beq.n	800602e <_printf_float+0xaa>
 80060f4:	232d      	movs	r3, #45	; 0x2d
 80060f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fa:	e798      	b.n	800602e <_printf_float+0xaa>
 80060fc:	9a06      	ldr	r2, [sp, #24]
 80060fe:	2a47      	cmp	r2, #71	; 0x47
 8006100:	d1be      	bne.n	8006080 <_printf_float+0xfc>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1bc      	bne.n	8006080 <_printf_float+0xfc>
 8006106:	2301      	movs	r3, #1
 8006108:	e7b9      	b.n	800607e <_printf_float+0xfa>
 800610a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800610e:	d118      	bne.n	8006142 <_printf_float+0x1be>
 8006110:	2900      	cmp	r1, #0
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	dd0b      	ble.n	800612e <_printf_float+0x1aa>
 8006116:	6121      	str	r1, [r4, #16]
 8006118:	b913      	cbnz	r3, 8006120 <_printf_float+0x19c>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	07d0      	lsls	r0, r2, #31
 800611e:	d502      	bpl.n	8006126 <_printf_float+0x1a2>
 8006120:	3301      	adds	r3, #1
 8006122:	440b      	add	r3, r1
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	65a1      	str	r1, [r4, #88]	; 0x58
 8006128:	f04f 0900 	mov.w	r9, #0
 800612c:	e7de      	b.n	80060ec <_printf_float+0x168>
 800612e:	b913      	cbnz	r3, 8006136 <_printf_float+0x1b2>
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	07d2      	lsls	r2, r2, #31
 8006134:	d501      	bpl.n	800613a <_printf_float+0x1b6>
 8006136:	3302      	adds	r3, #2
 8006138:	e7f4      	b.n	8006124 <_printf_float+0x1a0>
 800613a:	2301      	movs	r3, #1
 800613c:	e7f2      	b.n	8006124 <_printf_float+0x1a0>
 800613e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006144:	4299      	cmp	r1, r3
 8006146:	db05      	blt.n	8006154 <_printf_float+0x1d0>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	6121      	str	r1, [r4, #16]
 800614c:	07d8      	lsls	r0, r3, #31
 800614e:	d5ea      	bpl.n	8006126 <_printf_float+0x1a2>
 8006150:	1c4b      	adds	r3, r1, #1
 8006152:	e7e7      	b.n	8006124 <_printf_float+0x1a0>
 8006154:	2900      	cmp	r1, #0
 8006156:	bfd4      	ite	le
 8006158:	f1c1 0202 	rsble	r2, r1, #2
 800615c:	2201      	movgt	r2, #1
 800615e:	4413      	add	r3, r2
 8006160:	e7e0      	b.n	8006124 <_printf_float+0x1a0>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	055a      	lsls	r2, r3, #21
 8006166:	d407      	bmi.n	8006178 <_printf_float+0x1f4>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	4642      	mov	r2, r8
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d12c      	bne.n	80061d0 <_printf_float+0x24c>
 8006176:	e764      	b.n	8006042 <_printf_float+0xbe>
 8006178:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800617c:	f240 80e0 	bls.w	8006340 <_printf_float+0x3bc>
 8006180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006184:	2200      	movs	r2, #0
 8006186:	2300      	movs	r3, #0
 8006188:	f7fa fcae 	bl	8000ae8 <__aeabi_dcmpeq>
 800618c:	2800      	cmp	r0, #0
 800618e:	d034      	beq.n	80061fa <_printf_float+0x276>
 8006190:	4a37      	ldr	r2, [pc, #220]	; (8006270 <_printf_float+0x2ec>)
 8006192:	2301      	movs	r3, #1
 8006194:	4631      	mov	r1, r6
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	f43f af51 	beq.w	8006042 <_printf_float+0xbe>
 80061a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db02      	blt.n	80061ae <_printf_float+0x22a>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	07d8      	lsls	r0, r3, #31
 80061ac:	d510      	bpl.n	80061d0 <_printf_float+0x24c>
 80061ae:	ee18 3a10 	vmov	r3, s16
 80061b2:	4652      	mov	r2, sl
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af41 	beq.w	8006042 <_printf_float+0xbe>
 80061c0:	f04f 0800 	mov.w	r8, #0
 80061c4:	f104 091a 	add.w	r9, r4, #26
 80061c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ca:	3b01      	subs	r3, #1
 80061cc:	4543      	cmp	r3, r8
 80061ce:	dc09      	bgt.n	80061e4 <_printf_float+0x260>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	f100 8107 	bmi.w	80063e6 <_printf_float+0x462>
 80061d8:	68e0      	ldr	r0, [r4, #12]
 80061da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061dc:	4298      	cmp	r0, r3
 80061de:	bfb8      	it	lt
 80061e0:	4618      	movlt	r0, r3
 80061e2:	e730      	b.n	8006046 <_printf_float+0xc2>
 80061e4:	2301      	movs	r3, #1
 80061e6:	464a      	mov	r2, r9
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af27 	beq.w	8006042 <_printf_float+0xbe>
 80061f4:	f108 0801 	add.w	r8, r8, #1
 80061f8:	e7e6      	b.n	80061c8 <_printf_float+0x244>
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dc39      	bgt.n	8006274 <_printf_float+0x2f0>
 8006200:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <_printf_float+0x2ec>)
 8006202:	2301      	movs	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f af19 	beq.w	8006042 <_printf_float+0xbe>
 8006210:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006214:	4313      	orrs	r3, r2
 8006216:	d102      	bne.n	800621e <_printf_float+0x29a>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	d5d8      	bpl.n	80061d0 <_printf_float+0x24c>
 800621e:	ee18 3a10 	vmov	r3, s16
 8006222:	4652      	mov	r2, sl
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f af09 	beq.w	8006042 <_printf_float+0xbe>
 8006230:	f04f 0900 	mov.w	r9, #0
 8006234:	f104 0a1a 	add.w	sl, r4, #26
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	425b      	negs	r3, r3
 800623c:	454b      	cmp	r3, r9
 800623e:	dc01      	bgt.n	8006244 <_printf_float+0x2c0>
 8006240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006242:	e792      	b.n	800616a <_printf_float+0x1e6>
 8006244:	2301      	movs	r3, #1
 8006246:	4652      	mov	r2, sl
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f aef7 	beq.w	8006042 <_printf_float+0xbe>
 8006254:	f109 0901 	add.w	r9, r9, #1
 8006258:	e7ee      	b.n	8006238 <_printf_float+0x2b4>
 800625a:	bf00      	nop
 800625c:	7fefffff 	.word	0x7fefffff
 8006260:	0800a664 	.word	0x0800a664
 8006264:	0800a668 	.word	0x0800a668
 8006268:	0800a66c 	.word	0x0800a66c
 800626c:	0800a670 	.word	0x0800a670
 8006270:	0800a674 	.word	0x0800a674
 8006274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006278:	429a      	cmp	r2, r3
 800627a:	bfa8      	it	ge
 800627c:	461a      	movge	r2, r3
 800627e:	2a00      	cmp	r2, #0
 8006280:	4691      	mov	r9, r2
 8006282:	dc37      	bgt.n	80062f4 <_printf_float+0x370>
 8006284:	f04f 0b00 	mov.w	fp, #0
 8006288:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800628c:	f104 021a 	add.w	r2, r4, #26
 8006290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	eba3 0309 	sub.w	r3, r3, r9
 8006298:	455b      	cmp	r3, fp
 800629a:	dc33      	bgt.n	8006304 <_printf_float+0x380>
 800629c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a0:	429a      	cmp	r2, r3
 80062a2:	db3b      	blt.n	800631c <_printf_float+0x398>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07da      	lsls	r2, r3, #31
 80062a8:	d438      	bmi.n	800631c <_printf_float+0x398>
 80062aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062ae:	eba2 0903 	sub.w	r9, r2, r3
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	4591      	cmp	r9, r2
 80062b8:	bfa8      	it	ge
 80062ba:	4691      	movge	r9, r2
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	dc35      	bgt.n	800632e <_printf_float+0x3aa>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ca:	f104 0a1a 	add.w	sl, r4, #26
 80062ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	eba3 0309 	sub.w	r3, r3, r9
 80062d8:	4543      	cmp	r3, r8
 80062da:	f77f af79 	ble.w	80061d0 <_printf_float+0x24c>
 80062de:	2301      	movs	r3, #1
 80062e0:	4652      	mov	r2, sl
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f aeaa 	beq.w	8006042 <_printf_float+0xbe>
 80062ee:	f108 0801 	add.w	r8, r8, #1
 80062f2:	e7ec      	b.n	80062ce <_printf_float+0x34a>
 80062f4:	4613      	mov	r3, r2
 80062f6:	4631      	mov	r1, r6
 80062f8:	4642      	mov	r2, r8
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	d1c0      	bne.n	8006284 <_printf_float+0x300>
 8006302:	e69e      	b.n	8006042 <_printf_float+0xbe>
 8006304:	2301      	movs	r3, #1
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	9205      	str	r2, [sp, #20]
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f ae97 	beq.w	8006042 <_printf_float+0xbe>
 8006314:	9a05      	ldr	r2, [sp, #20]
 8006316:	f10b 0b01 	add.w	fp, fp, #1
 800631a:	e7b9      	b.n	8006290 <_printf_float+0x30c>
 800631c:	ee18 3a10 	vmov	r3, s16
 8006320:	4652      	mov	r2, sl
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	d1be      	bne.n	80062aa <_printf_float+0x326>
 800632c:	e689      	b.n	8006042 <_printf_float+0xbe>
 800632e:	9a05      	ldr	r2, [sp, #20]
 8006330:	464b      	mov	r3, r9
 8006332:	4442      	add	r2, r8
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	d1c1      	bne.n	80062c2 <_printf_float+0x33e>
 800633e:	e680      	b.n	8006042 <_printf_float+0xbe>
 8006340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006342:	2a01      	cmp	r2, #1
 8006344:	dc01      	bgt.n	800634a <_printf_float+0x3c6>
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d53a      	bpl.n	80063c0 <_printf_float+0x43c>
 800634a:	2301      	movs	r3, #1
 800634c:	4642      	mov	r2, r8
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f ae74 	beq.w	8006042 <_printf_float+0xbe>
 800635a:	ee18 3a10 	vmov	r3, s16
 800635e:	4652      	mov	r2, sl
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f ae6b 	beq.w	8006042 <_printf_float+0xbe>
 800636c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006378:	f7fa fbb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800637c:	b9d8      	cbnz	r0, 80063b6 <_printf_float+0x432>
 800637e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006382:	f108 0201 	add.w	r2, r8, #1
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	d10e      	bne.n	80063ae <_printf_float+0x42a>
 8006390:	e657      	b.n	8006042 <_printf_float+0xbe>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae50 	beq.w	8006042 <_printf_float+0xbe>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4543      	cmp	r3, r8
 80063ac:	dcf1      	bgt.n	8006392 <_printf_float+0x40e>
 80063ae:	464b      	mov	r3, r9
 80063b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b4:	e6da      	b.n	800616c <_printf_float+0x1e8>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	f104 0a1a 	add.w	sl, r4, #26
 80063be:	e7f2      	b.n	80063a6 <_printf_float+0x422>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4642      	mov	r2, r8
 80063c4:	e7df      	b.n	8006386 <_printf_float+0x402>
 80063c6:	2301      	movs	r3, #1
 80063c8:	464a      	mov	r2, r9
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae36 	beq.w	8006042 <_printf_float+0xbe>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	4543      	cmp	r3, r8
 80063e2:	dcf0      	bgt.n	80063c6 <_printf_float+0x442>
 80063e4:	e6f8      	b.n	80061d8 <_printf_float+0x254>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 0919 	add.w	r9, r4, #25
 80063ee:	e7f4      	b.n	80063da <_printf_float+0x456>

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	f003 0306 	and.w	r3, r3, #6
 800645e:	2b04      	cmp	r3, #4
 8006460:	bf02      	ittt	eq
 8006462:	68e5      	ldreq	r5, [r4, #12]
 8006464:	6833      	ldreq	r3, [r6, #0]
 8006466:	1aed      	subeq	r5, r5, r3
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d4 	beq.w	8006696 <_printf_i+0x1ca>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80c0 	beq.w	8006674 <_printf_i+0x1a8>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	0800667d 	.word	0x0800667d
 800653c:	080065a5 	.word	0x080065a5
 8006540:	08006637 	.word	0x08006637
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	0800669f 	.word	0x0800669f
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a5 	.word	0x080065a5
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800663f 	.word	0x0800663f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e09f      	b.n	80066b8 <_printf_i+0x1ec>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	0607      	lsls	r7, r0, #24
 800657e:	f103 0104 	add.w	r1, r3, #4
 8006582:	6029      	str	r1, [r5, #0]
 8006584:	d501      	bpl.n	800658a <_printf_i+0xbe>
 8006586:	681e      	ldr	r6, [r3, #0]
 8006588:	e003      	b.n	8006592 <_printf_i+0xc6>
 800658a:	0646      	lsls	r6, r0, #25
 800658c:	d5fb      	bpl.n	8006586 <_printf_i+0xba>
 800658e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006592:	2e00      	cmp	r6, #0
 8006594:	da03      	bge.n	800659e <_printf_i+0xd2>
 8006596:	232d      	movs	r3, #45	; 0x2d
 8006598:	4276      	negs	r6, r6
 800659a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659e:	485a      	ldr	r0, [pc, #360]	; (8006708 <_printf_i+0x23c>)
 80065a0:	230a      	movs	r3, #10
 80065a2:	e012      	b.n	80065ca <_printf_i+0xfe>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	6029      	str	r1, [r5, #0]
 80065ac:	0605      	lsls	r5, r0, #24
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0xe8>
 80065b0:	681e      	ldr	r6, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0xee>
 80065b4:	0641      	lsls	r1, r0, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0xe4>
 80065b8:	881e      	ldrh	r6, [r3, #0]
 80065ba:	4853      	ldr	r0, [pc, #332]	; (8006708 <_printf_i+0x23c>)
 80065bc:	2f6f      	cmp	r7, #111	; 0x6f
 80065be:	bf0c      	ite	eq
 80065c0:	2308      	moveq	r3, #8
 80065c2:	230a      	movne	r3, #10
 80065c4:	2100      	movs	r1, #0
 80065c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ca:	6865      	ldr	r5, [r4, #4]
 80065cc:	60a5      	str	r5, [r4, #8]
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	bfa2      	ittt	ge
 80065d2:	6821      	ldrge	r1, [r4, #0]
 80065d4:	f021 0104 	bicge.w	r1, r1, #4
 80065d8:	6021      	strge	r1, [r4, #0]
 80065da:	b90e      	cbnz	r6, 80065e0 <_printf_i+0x114>
 80065dc:	2d00      	cmp	r5, #0
 80065de:	d04b      	beq.n	8006678 <_printf_i+0x1ac>
 80065e0:	4615      	mov	r5, r2
 80065e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e6:	fb03 6711 	mls	r7, r3, r1, r6
 80065ea:	5dc7      	ldrb	r7, [r0, r7]
 80065ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f0:	4637      	mov	r7, r6
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	460e      	mov	r6, r1
 80065f6:	d9f4      	bls.n	80065e2 <_printf_i+0x116>
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d10b      	bne.n	8006614 <_printf_i+0x148>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	07de      	lsls	r6, r3, #31
 8006600:	d508      	bpl.n	8006614 <_printf_i+0x148>
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	6861      	ldr	r1, [r4, #4]
 8006606:	4299      	cmp	r1, r3
 8006608:	bfde      	ittt	le
 800660a:	2330      	movle	r3, #48	; 0x30
 800660c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006614:	1b52      	subs	r2, r2, r5
 8006616:	6122      	str	r2, [r4, #16]
 8006618:	f8cd a000 	str.w	sl, [sp]
 800661c:	464b      	mov	r3, r9
 800661e:	aa03      	add	r2, sp, #12
 8006620:	4621      	mov	r1, r4
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff fee4 	bl	80063f0 <_printf_common>
 8006628:	3001      	adds	r0, #1
 800662a:	d14a      	bne.n	80066c2 <_printf_i+0x1f6>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	b004      	add	sp, #16
 8006632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	f043 0320 	orr.w	r3, r3, #32
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	4833      	ldr	r0, [pc, #204]	; (800670c <_printf_i+0x240>)
 8006640:	2778      	movs	r7, #120	; 0x78
 8006642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	6829      	ldr	r1, [r5, #0]
 800664a:	061f      	lsls	r7, r3, #24
 800664c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006650:	d402      	bmi.n	8006658 <_printf_i+0x18c>
 8006652:	065f      	lsls	r7, r3, #25
 8006654:	bf48      	it	mi
 8006656:	b2b6      	uxthmi	r6, r6
 8006658:	07df      	lsls	r7, r3, #31
 800665a:	bf48      	it	mi
 800665c:	f043 0320 	orrmi.w	r3, r3, #32
 8006660:	6029      	str	r1, [r5, #0]
 8006662:	bf48      	it	mi
 8006664:	6023      	strmi	r3, [r4, #0]
 8006666:	b91e      	cbnz	r6, 8006670 <_printf_i+0x1a4>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	f023 0320 	bic.w	r3, r3, #32
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	2310      	movs	r3, #16
 8006672:	e7a7      	b.n	80065c4 <_printf_i+0xf8>
 8006674:	4824      	ldr	r0, [pc, #144]	; (8006708 <_printf_i+0x23c>)
 8006676:	e7e4      	b.n	8006642 <_printf_i+0x176>
 8006678:	4615      	mov	r5, r2
 800667a:	e7bd      	b.n	80065f8 <_printf_i+0x12c>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	6826      	ldr	r6, [r4, #0]
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	1d18      	adds	r0, r3, #4
 8006684:	6028      	str	r0, [r5, #0]
 8006686:	0635      	lsls	r5, r6, #24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	d501      	bpl.n	8006690 <_printf_i+0x1c4>
 800668c:	6019      	str	r1, [r3, #0]
 800668e:	e002      	b.n	8006696 <_printf_i+0x1ca>
 8006690:	0670      	lsls	r0, r6, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0x1c0>
 8006694:	8019      	strh	r1, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	4615      	mov	r5, r2
 800669c:	e7bc      	b.n	8006618 <_printf_i+0x14c>
 800669e:	682b      	ldr	r3, [r5, #0]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	2100      	movs	r1, #0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 fda0 	bl	80001f0 <memchr>
 80066b0:	b108      	cbz	r0, 80066b6 <_printf_i+0x1ea>
 80066b2:	1b40      	subs	r0, r0, r5
 80066b4:	6060      	str	r0, [r4, #4]
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c0:	e7aa      	b.n	8006618 <_printf_i+0x14c>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d0ad      	beq.n	800662c <_printf_i+0x160>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	d413      	bmi.n	80066fe <_printf_i+0x232>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e7a6      	b.n	8006630 <_printf_i+0x164>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4632      	mov	r2, r6
 80066e6:	4649      	mov	r1, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	47d0      	blx	sl
 80066ec:	3001      	adds	r0, #1
 80066ee:	d09d      	beq.n	800662c <_printf_i+0x160>
 80066f0:	3501      	adds	r5, #1
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	9903      	ldr	r1, [sp, #12]
 80066f6:	1a5b      	subs	r3, r3, r1
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dcf2      	bgt.n	80066e2 <_printf_i+0x216>
 80066fc:	e7eb      	b.n	80066d6 <_printf_i+0x20a>
 80066fe:	2500      	movs	r5, #0
 8006700:	f104 0619 	add.w	r6, r4, #25
 8006704:	e7f5      	b.n	80066f2 <_printf_i+0x226>
 8006706:	bf00      	nop
 8006708:	0800a676 	.word	0x0800a676
 800670c:	0800a687 	.word	0x0800a687

08006710 <std>:
 8006710:	2300      	movs	r3, #0
 8006712:	b510      	push	{r4, lr}
 8006714:	4604      	mov	r4, r0
 8006716:	e9c0 3300 	strd	r3, r3, [r0]
 800671a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800671e:	6083      	str	r3, [r0, #8]
 8006720:	8181      	strh	r1, [r0, #12]
 8006722:	6643      	str	r3, [r0, #100]	; 0x64
 8006724:	81c2      	strh	r2, [r0, #14]
 8006726:	6183      	str	r3, [r0, #24]
 8006728:	4619      	mov	r1, r3
 800672a:	2208      	movs	r2, #8
 800672c:	305c      	adds	r0, #92	; 0x5c
 800672e:	f000 f914 	bl	800695a <memset>
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <std+0x58>)
 8006734:	6263      	str	r3, [r4, #36]	; 0x24
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <std+0x5c>)
 8006738:	62a3      	str	r3, [r4, #40]	; 0x28
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <std+0x60>)
 800673c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <std+0x64>)
 8006740:	6323      	str	r3, [r4, #48]	; 0x30
 8006742:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <std+0x68>)
 8006744:	6224      	str	r4, [r4, #32]
 8006746:	429c      	cmp	r4, r3
 8006748:	d006      	beq.n	8006758 <std+0x48>
 800674a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800674e:	4294      	cmp	r4, r2
 8006750:	d002      	beq.n	8006758 <std+0x48>
 8006752:	33d0      	adds	r3, #208	; 0xd0
 8006754:	429c      	cmp	r4, r3
 8006756:	d105      	bne.n	8006764 <std+0x54>
 8006758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800675c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006760:	f000 b978 	b.w	8006a54 <__retarget_lock_init_recursive>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	080068d5 	.word	0x080068d5
 800676c:	080068f7 	.word	0x080068f7
 8006770:	0800692f 	.word	0x0800692f
 8006774:	08006953 	.word	0x08006953
 8006778:	200004ec 	.word	0x200004ec

0800677c <stdio_exit_handler>:
 800677c:	4a02      	ldr	r2, [pc, #8]	; (8006788 <stdio_exit_handler+0xc>)
 800677e:	4903      	ldr	r1, [pc, #12]	; (800678c <stdio_exit_handler+0x10>)
 8006780:	4803      	ldr	r0, [pc, #12]	; (8006790 <stdio_exit_handler+0x14>)
 8006782:	f000 b869 	b.w	8006858 <_fwalk_sglue>
 8006786:	bf00      	nop
 8006788:	20000054 	.word	0x20000054
 800678c:	08008409 	.word	0x08008409
 8006790:	20000060 	.word	0x20000060

08006794 <cleanup_stdio>:
 8006794:	6841      	ldr	r1, [r0, #4]
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <cleanup_stdio+0x34>)
 8006798:	4299      	cmp	r1, r3
 800679a:	b510      	push	{r4, lr}
 800679c:	4604      	mov	r4, r0
 800679e:	d001      	beq.n	80067a4 <cleanup_stdio+0x10>
 80067a0:	f001 fe32 	bl	8008408 <_fflush_r>
 80067a4:	68a1      	ldr	r1, [r4, #8]
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <cleanup_stdio+0x38>)
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d002      	beq.n	80067b2 <cleanup_stdio+0x1e>
 80067ac:	4620      	mov	r0, r4
 80067ae:	f001 fe2b 	bl	8008408 <_fflush_r>
 80067b2:	68e1      	ldr	r1, [r4, #12]
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <cleanup_stdio+0x3c>)
 80067b6:	4299      	cmp	r1, r3
 80067b8:	d004      	beq.n	80067c4 <cleanup_stdio+0x30>
 80067ba:	4620      	mov	r0, r4
 80067bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c0:	f001 be22 	b.w	8008408 <_fflush_r>
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	bf00      	nop
 80067c8:	200004ec 	.word	0x200004ec
 80067cc:	20000554 	.word	0x20000554
 80067d0:	200005bc 	.word	0x200005bc

080067d4 <global_stdio_init.part.0>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <global_stdio_init.part.0+0x30>)
 80067d8:	4c0b      	ldr	r4, [pc, #44]	; (8006808 <global_stdio_init.part.0+0x34>)
 80067da:	4a0c      	ldr	r2, [pc, #48]	; (800680c <global_stdio_init.part.0+0x38>)
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	4620      	mov	r0, r4
 80067e0:	2200      	movs	r2, #0
 80067e2:	2104      	movs	r1, #4
 80067e4:	f7ff ff94 	bl	8006710 <std>
 80067e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067ec:	2201      	movs	r2, #1
 80067ee:	2109      	movs	r1, #9
 80067f0:	f7ff ff8e 	bl	8006710 <std>
 80067f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067f8:	2202      	movs	r2, #2
 80067fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067fe:	2112      	movs	r1, #18
 8006800:	f7ff bf86 	b.w	8006710 <std>
 8006804:	20000624 	.word	0x20000624
 8006808:	200004ec 	.word	0x200004ec
 800680c:	0800677d 	.word	0x0800677d

08006810 <__sfp_lock_acquire>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sfp_lock_acquire+0x8>)
 8006812:	f000 b920 	b.w	8006a56 <__retarget_lock_acquire_recursive>
 8006816:	bf00      	nop
 8006818:	2000062d 	.word	0x2000062d

0800681c <__sfp_lock_release>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sfp_lock_release+0x8>)
 800681e:	f000 b91b 	b.w	8006a58 <__retarget_lock_release_recursive>
 8006822:	bf00      	nop
 8006824:	2000062d 	.word	0x2000062d

08006828 <__sinit>:
 8006828:	b510      	push	{r4, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	f7ff fff0 	bl	8006810 <__sfp_lock_acquire>
 8006830:	6a23      	ldr	r3, [r4, #32]
 8006832:	b11b      	cbz	r3, 800683c <__sinit+0x14>
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f7ff bff0 	b.w	800681c <__sfp_lock_release>
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <__sinit+0x28>)
 800683e:	6223      	str	r3, [r4, #32]
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <__sinit+0x2c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f5      	bne.n	8006834 <__sinit+0xc>
 8006848:	f7ff ffc4 	bl	80067d4 <global_stdio_init.part.0>
 800684c:	e7f2      	b.n	8006834 <__sinit+0xc>
 800684e:	bf00      	nop
 8006850:	08006795 	.word	0x08006795
 8006854:	20000624 	.word	0x20000624

08006858 <_fwalk_sglue>:
 8006858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4607      	mov	r7, r0
 800685e:	4688      	mov	r8, r1
 8006860:	4614      	mov	r4, r2
 8006862:	2600      	movs	r6, #0
 8006864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006868:	f1b9 0901 	subs.w	r9, r9, #1
 800686c:	d505      	bpl.n	800687a <_fwalk_sglue+0x22>
 800686e:	6824      	ldr	r4, [r4, #0]
 8006870:	2c00      	cmp	r4, #0
 8006872:	d1f7      	bne.n	8006864 <_fwalk_sglue+0xc>
 8006874:	4630      	mov	r0, r6
 8006876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d907      	bls.n	8006890 <_fwalk_sglue+0x38>
 8006880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006884:	3301      	adds	r3, #1
 8006886:	d003      	beq.n	8006890 <_fwalk_sglue+0x38>
 8006888:	4629      	mov	r1, r5
 800688a:	4638      	mov	r0, r7
 800688c:	47c0      	blx	r8
 800688e:	4306      	orrs	r6, r0
 8006890:	3568      	adds	r5, #104	; 0x68
 8006892:	e7e9      	b.n	8006868 <_fwalk_sglue+0x10>

08006894 <siprintf>:
 8006894:	b40e      	push	{r1, r2, r3}
 8006896:	b500      	push	{lr}
 8006898:	b09c      	sub	sp, #112	; 0x70
 800689a:	ab1d      	add	r3, sp, #116	; 0x74
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	9006      	str	r0, [sp, #24]
 80068a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068a4:	4809      	ldr	r0, [pc, #36]	; (80068cc <siprintf+0x38>)
 80068a6:	9107      	str	r1, [sp, #28]
 80068a8:	9104      	str	r1, [sp, #16]
 80068aa:	4909      	ldr	r1, [pc, #36]	; (80068d0 <siprintf+0x3c>)
 80068ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	a902      	add	r1, sp, #8
 80068b8:	f001 fc22 	bl	8008100 <_svfiprintf_r>
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	b01c      	add	sp, #112	; 0x70
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	200000ac 	.word	0x200000ac
 80068d0:	ffff0208 	.word	0xffff0208

080068d4 <__sread>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	f000 f86c 	bl	80069b8 <_read_r>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	bfab      	itete	ge
 80068e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068e6:	89a3      	ldrhlt	r3, [r4, #12]
 80068e8:	181b      	addge	r3, r3, r0
 80068ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ee:	bfac      	ite	ge
 80068f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80068f2:	81a3      	strhlt	r3, [r4, #12]
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <__swrite>:
 80068f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fa:	461f      	mov	r7, r3
 80068fc:	898b      	ldrh	r3, [r1, #12]
 80068fe:	05db      	lsls	r3, r3, #23
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	4616      	mov	r6, r2
 8006906:	d505      	bpl.n	8006914 <__swrite+0x1e>
 8006908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690c:	2302      	movs	r3, #2
 800690e:	2200      	movs	r2, #0
 8006910:	f000 f840 	bl	8006994 <_lseek_r>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800691a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800692a:	f000 b857 	b.w	80069dc <_write_r>

0800692e <__sseek>:
 800692e:	b510      	push	{r4, lr}
 8006930:	460c      	mov	r4, r1
 8006932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006936:	f000 f82d 	bl	8006994 <_lseek_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	bf15      	itete	ne
 8006940:	6560      	strne	r0, [r4, #84]	; 0x54
 8006942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800694a:	81a3      	strheq	r3, [r4, #12]
 800694c:	bf18      	it	ne
 800694e:	81a3      	strhne	r3, [r4, #12]
 8006950:	bd10      	pop	{r4, pc}

08006952 <__sclose>:
 8006952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006956:	f000 b80d 	b.w	8006974 <_close_r>

0800695a <memset>:
 800695a:	4402      	add	r2, r0
 800695c:	4603      	mov	r3, r0
 800695e:	4293      	cmp	r3, r2
 8006960:	d100      	bne.n	8006964 <memset+0xa>
 8006962:	4770      	bx	lr
 8006964:	f803 1b01 	strb.w	r1, [r3], #1
 8006968:	e7f9      	b.n	800695e <memset+0x4>
	...

0800696c <_localeconv_r>:
 800696c:	4800      	ldr	r0, [pc, #0]	; (8006970 <_localeconv_r+0x4>)
 800696e:	4770      	bx	lr
 8006970:	200001a0 	.word	0x200001a0

08006974 <_close_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d06      	ldr	r5, [pc, #24]	; (8006990 <_close_r+0x1c>)
 8006978:	2300      	movs	r3, #0
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fa fd2b 	bl	80013da <_close>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_close_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_close_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000628 	.word	0x20000628

08006994 <_lseek_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	; (80069b4 <_lseek_r+0x20>)
 8006998:	4604      	mov	r4, r0
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fa fd40 	bl	8001428 <_lseek>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_lseek_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_lseek_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20000628 	.word	0x20000628

080069b8 <_read_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d07      	ldr	r5, [pc, #28]	; (80069d8 <_read_r+0x20>)
 80069bc:	4604      	mov	r4, r0
 80069be:	4608      	mov	r0, r1
 80069c0:	4611      	mov	r1, r2
 80069c2:	2200      	movs	r2, #0
 80069c4:	602a      	str	r2, [r5, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f7fa fcce 	bl	8001368 <_read>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_read_r+0x1e>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_read_r+0x1e>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20000628 	.word	0x20000628

080069dc <_write_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4d07      	ldr	r5, [pc, #28]	; (80069fc <_write_r+0x20>)
 80069e0:	4604      	mov	r4, r0
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	2200      	movs	r2, #0
 80069e8:	602a      	str	r2, [r5, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f7fa fcd9 	bl	80013a2 <_write>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_write_r+0x1e>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_write_r+0x1e>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20000628 	.word	0x20000628

08006a00 <__errno>:
 8006a00:	4b01      	ldr	r3, [pc, #4]	; (8006a08 <__errno+0x8>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	200000ac 	.word	0x200000ac

08006a0c <__libc_init_array>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4d0d      	ldr	r5, [pc, #52]	; (8006a44 <__libc_init_array+0x38>)
 8006a10:	4c0d      	ldr	r4, [pc, #52]	; (8006a48 <__libc_init_array+0x3c>)
 8006a12:	1b64      	subs	r4, r4, r5
 8006a14:	10a4      	asrs	r4, r4, #2
 8006a16:	2600      	movs	r6, #0
 8006a18:	42a6      	cmp	r6, r4
 8006a1a:	d109      	bne.n	8006a30 <__libc_init_array+0x24>
 8006a1c:	4d0b      	ldr	r5, [pc, #44]	; (8006a4c <__libc_init_array+0x40>)
 8006a1e:	4c0c      	ldr	r4, [pc, #48]	; (8006a50 <__libc_init_array+0x44>)
 8006a20:	f002 f896 	bl	8008b50 <_init>
 8006a24:	1b64      	subs	r4, r4, r5
 8006a26:	10a4      	asrs	r4, r4, #2
 8006a28:	2600      	movs	r6, #0
 8006a2a:	42a6      	cmp	r6, r4
 8006a2c:	d105      	bne.n	8006a3a <__libc_init_array+0x2e>
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a34:	4798      	blx	r3
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7ee      	b.n	8006a18 <__libc_init_array+0xc>
 8006a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3e:	4798      	blx	r3
 8006a40:	3601      	adds	r6, #1
 8006a42:	e7f2      	b.n	8006a2a <__libc_init_array+0x1e>
 8006a44:	0800a9dc 	.word	0x0800a9dc
 8006a48:	0800a9dc 	.word	0x0800a9dc
 8006a4c:	0800a9dc 	.word	0x0800a9dc
 8006a50:	0800a9e0 	.word	0x0800a9e0

08006a54 <__retarget_lock_init_recursive>:
 8006a54:	4770      	bx	lr

08006a56 <__retarget_lock_acquire_recursive>:
 8006a56:	4770      	bx	lr

08006a58 <__retarget_lock_release_recursive>:
 8006a58:	4770      	bx	lr

08006a5a <quorem>:
 8006a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5e:	6903      	ldr	r3, [r0, #16]
 8006a60:	690c      	ldr	r4, [r1, #16]
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	4607      	mov	r7, r0
 8006a66:	db7e      	blt.n	8006b66 <quorem+0x10c>
 8006a68:	3c01      	subs	r4, #1
 8006a6a:	f101 0814 	add.w	r8, r1, #20
 8006a6e:	f100 0514 	add.w	r5, r0, #20
 8006a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a80:	3301      	adds	r3, #1
 8006a82:	429a      	cmp	r2, r3
 8006a84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a90:	d331      	bcc.n	8006af6 <quorem+0x9c>
 8006a92:	f04f 0e00 	mov.w	lr, #0
 8006a96:	4640      	mov	r0, r8
 8006a98:	46ac      	mov	ip, r5
 8006a9a:	46f2      	mov	sl, lr
 8006a9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aa0:	b293      	uxth	r3, r2
 8006aa2:	fb06 e303 	mla	r3, r6, r3, lr
 8006aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aaa:	0c1a      	lsrs	r2, r3, #16
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ebaa 0303 	sub.w	r3, sl, r3
 8006ab2:	f8dc a000 	ldr.w	sl, [ip]
 8006ab6:	fa13 f38a 	uxtah	r3, r3, sl
 8006aba:	fb06 220e 	mla	r2, r6, lr, r2
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	9b00      	ldr	r3, [sp, #0]
 8006ac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ad0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ad4:	4581      	cmp	r9, r0
 8006ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ada:	f84c 3b04 	str.w	r3, [ip], #4
 8006ade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ae2:	d2db      	bcs.n	8006a9c <quorem+0x42>
 8006ae4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ae8:	b92b      	cbnz	r3, 8006af6 <quorem+0x9c>
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	429d      	cmp	r5, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	d32c      	bcc.n	8006b4e <quorem+0xf4>
 8006af4:	613c      	str	r4, [r7, #16]
 8006af6:	4638      	mov	r0, r7
 8006af8:	f001 f9a8 	bl	8007e4c <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	db22      	blt.n	8006b46 <quorem+0xec>
 8006b00:	3601      	adds	r6, #1
 8006b02:	4629      	mov	r1, r5
 8006b04:	2000      	movs	r0, #0
 8006b06:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b0a:	f8d1 c000 	ldr.w	ip, [r1]
 8006b0e:	b293      	uxth	r3, r2
 8006b10:	1ac3      	subs	r3, r0, r3
 8006b12:	0c12      	lsrs	r2, r2, #16
 8006b14:	fa13 f38c 	uxtah	r3, r3, ip
 8006b18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b26:	45c1      	cmp	r9, r8
 8006b28:	f841 3b04 	str.w	r3, [r1], #4
 8006b2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b30:	d2e9      	bcs.n	8006b06 <quorem+0xac>
 8006b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b3a:	b922      	cbnz	r2, 8006b46 <quorem+0xec>
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	d30a      	bcc.n	8006b5a <quorem+0x100>
 8006b44:	613c      	str	r4, [r7, #16]
 8006b46:	4630      	mov	r0, r6
 8006b48:	b003      	add	sp, #12
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	d1ce      	bne.n	8006af4 <quorem+0x9a>
 8006b56:	3c01      	subs	r4, #1
 8006b58:	e7c9      	b.n	8006aee <quorem+0x94>
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	3b04      	subs	r3, #4
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	d1f0      	bne.n	8006b44 <quorem+0xea>
 8006b62:	3c01      	subs	r4, #1
 8006b64:	e7eb      	b.n	8006b3e <quorem+0xe4>
 8006b66:	2000      	movs	r0, #0
 8006b68:	e7ee      	b.n	8006b48 <quorem+0xee>
 8006b6a:	0000      	movs	r0, r0
 8006b6c:	0000      	movs	r0, r0
	...

08006b70 <_dtoa_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	ed2d 8b04 	vpush	{d8-d9}
 8006b78:	69c5      	ldr	r5, [r0, #28]
 8006b7a:	b093      	sub	sp, #76	; 0x4c
 8006b7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b80:	ec57 6b10 	vmov	r6, r7, d0
 8006b84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b88:	9107      	str	r1, [sp, #28]
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	920a      	str	r2, [sp, #40]	; 0x28
 8006b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006b90:	b975      	cbnz	r5, 8006bb0 <_dtoa_r+0x40>
 8006b92:	2010      	movs	r0, #16
 8006b94:	f000 fe2a 	bl	80077ec <malloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	61e0      	str	r0, [r4, #28]
 8006b9c:	b920      	cbnz	r0, 8006ba8 <_dtoa_r+0x38>
 8006b9e:	4bae      	ldr	r3, [pc, #696]	; (8006e58 <_dtoa_r+0x2e8>)
 8006ba0:	21ef      	movs	r1, #239	; 0xef
 8006ba2:	48ae      	ldr	r0, [pc, #696]	; (8006e5c <_dtoa_r+0x2ec>)
 8006ba4:	f001 fc90 	bl	80084c8 <__assert_func>
 8006ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bac:	6005      	str	r5, [r0, #0]
 8006bae:	60c5      	str	r5, [r0, #12]
 8006bb0:	69e3      	ldr	r3, [r4, #28]
 8006bb2:	6819      	ldr	r1, [r3, #0]
 8006bb4:	b151      	cbz	r1, 8006bcc <_dtoa_r+0x5c>
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	604a      	str	r2, [r1, #4]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4093      	lsls	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 ff07 	bl	80079d4 <_Bfree>
 8006bc6:	69e3      	ldr	r3, [r4, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	1e3b      	subs	r3, r7, #0
 8006bce:	bfbb      	ittet	lt
 8006bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	9303      	strlt	r3, [sp, #12]
 8006bd6:	2300      	movge	r3, #0
 8006bd8:	2201      	movlt	r2, #1
 8006bda:	bfac      	ite	ge
 8006bdc:	f8c8 3000 	strge.w	r3, [r8]
 8006be0:	f8c8 2000 	strlt.w	r2, [r8]
 8006be4:	4b9e      	ldr	r3, [pc, #632]	; (8006e60 <_dtoa_r+0x2f0>)
 8006be6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006bea:	ea33 0308 	bics.w	r3, r3, r8
 8006bee:	d11b      	bne.n	8006c28 <_dtoa_r+0xb8>
 8006bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006bfc:	4333      	orrs	r3, r6
 8006bfe:	f000 8593 	beq.w	8007728 <_dtoa_r+0xbb8>
 8006c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c04:	b963      	cbnz	r3, 8006c20 <_dtoa_r+0xb0>
 8006c06:	4b97      	ldr	r3, [pc, #604]	; (8006e64 <_dtoa_r+0x2f4>)
 8006c08:	e027      	b.n	8006c5a <_dtoa_r+0xea>
 8006c0a:	4b97      	ldr	r3, [pc, #604]	; (8006e68 <_dtoa_r+0x2f8>)
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	9800      	ldr	r0, [sp, #0]
 8006c16:	b013      	add	sp, #76	; 0x4c
 8006c18:	ecbd 8b04 	vpop	{d8-d9}
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	4b90      	ldr	r3, [pc, #576]	; (8006e64 <_dtoa_r+0x2f4>)
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	3303      	adds	r3, #3
 8006c26:	e7f3      	b.n	8006c10 <_dtoa_r+0xa0>
 8006c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	ec51 0b17 	vmov	r0, r1, d7
 8006c32:	eeb0 8a47 	vmov.f32	s16, s14
 8006c36:	eef0 8a67 	vmov.f32	s17, s15
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f7f9 ff54 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c40:	4681      	mov	r9, r0
 8006c42:	b160      	cbz	r0, 8006c5e <_dtoa_r+0xee>
 8006c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c46:	2301      	movs	r3, #1
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8568 	beq.w	8007722 <_dtoa_r+0xbb2>
 8006c52:	4b86      	ldr	r3, [pc, #536]	; (8006e6c <_dtoa_r+0x2fc>)
 8006c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	e7da      	b.n	8006c14 <_dtoa_r+0xa4>
 8006c5e:	aa10      	add	r2, sp, #64	; 0x40
 8006c60:	a911      	add	r1, sp, #68	; 0x44
 8006c62:	4620      	mov	r0, r4
 8006c64:	eeb0 0a48 	vmov.f32	s0, s16
 8006c68:	eef0 0a68 	vmov.f32	s1, s17
 8006c6c:	f001 f994 	bl	8007f98 <__d2b>
 8006c70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c74:	4682      	mov	sl, r0
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	d07f      	beq.n	8006d7a <_dtoa_r+0x20a>
 8006c7a:	ee18 3a90 	vmov	r3, s17
 8006c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c86:	ec51 0b18 	vmov	r0, r1, d8
 8006c8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006c96:	4619      	mov	r1, r3
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b75      	ldr	r3, [pc, #468]	; (8006e70 <_dtoa_r+0x300>)
 8006c9c:	f7f9 fb04 	bl	80002a8 <__aeabi_dsub>
 8006ca0:	a367      	add	r3, pc, #412	; (adr r3, 8006e40 <_dtoa_r+0x2d0>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 fcb7 	bl	8000618 <__aeabi_dmul>
 8006caa:	a367      	add	r3, pc, #412	; (adr r3, 8006e48 <_dtoa_r+0x2d8>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fafc 	bl	80002ac <__adddf3>
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	460f      	mov	r7, r1
 8006cba:	f7f9 fc43 	bl	8000544 <__aeabi_i2d>
 8006cbe:	a364      	add	r3, pc, #400	; (adr r3, 8006e50 <_dtoa_r+0x2e0>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fca8 	bl	8000618 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 faec 	bl	80002ac <__adddf3>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	f7f9 ff4e 	bl	8000b78 <__aeabi_d2iz>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4683      	mov	fp, r0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	f7f9 ff09 	bl	8000afc <__aeabi_dcmplt>
 8006cea:	b148      	cbz	r0, 8006d00 <_dtoa_r+0x190>
 8006cec:	4658      	mov	r0, fp
 8006cee:	f7f9 fc29 	bl	8000544 <__aeabi_i2d>
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	f7f9 fef7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cfa:	b908      	cbnz	r0, 8006d00 <_dtoa_r+0x190>
 8006cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d00:	f1bb 0f16 	cmp.w	fp, #22
 8006d04:	d857      	bhi.n	8006db6 <_dtoa_r+0x246>
 8006d06:	4b5b      	ldr	r3, [pc, #364]	; (8006e74 <_dtoa_r+0x304>)
 8006d08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	ec51 0b18 	vmov	r0, r1, d8
 8006d14:	f7f9 fef2 	bl	8000afc <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d04e      	beq.n	8006dba <_dtoa_r+0x24a>
 8006d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d20:	2300      	movs	r3, #0
 8006d22:	930c      	str	r3, [sp, #48]	; 0x30
 8006d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d26:	1b5b      	subs	r3, r3, r5
 8006d28:	1e5a      	subs	r2, r3, #1
 8006d2a:	bf45      	ittet	mi
 8006d2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d30:	9305      	strmi	r3, [sp, #20]
 8006d32:	2300      	movpl	r3, #0
 8006d34:	2300      	movmi	r3, #0
 8006d36:	9206      	str	r2, [sp, #24]
 8006d38:	bf54      	ite	pl
 8006d3a:	9305      	strpl	r3, [sp, #20]
 8006d3c:	9306      	strmi	r3, [sp, #24]
 8006d3e:	f1bb 0f00 	cmp.w	fp, #0
 8006d42:	db3c      	blt.n	8006dbe <_dtoa_r+0x24e>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d4a:	445b      	add	r3, fp
 8006d4c:	9306      	str	r3, [sp, #24]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9308      	str	r3, [sp, #32]
 8006d52:	9b07      	ldr	r3, [sp, #28]
 8006d54:	2b09      	cmp	r3, #9
 8006d56:	d868      	bhi.n	8006e2a <_dtoa_r+0x2ba>
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	bfc4      	itt	gt
 8006d5c:	3b04      	subgt	r3, #4
 8006d5e:	9307      	strgt	r3, [sp, #28]
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	f1a3 0302 	sub.w	r3, r3, #2
 8006d66:	bfcc      	ite	gt
 8006d68:	2500      	movgt	r5, #0
 8006d6a:	2501      	movle	r5, #1
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	f200 8085 	bhi.w	8006e7c <_dtoa_r+0x30c>
 8006d72:	e8df f003 	tbb	[pc, r3]
 8006d76:	3b2e      	.short	0x3b2e
 8006d78:	5839      	.short	0x5839
 8006d7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d7e:	441d      	add	r5, r3
 8006d80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	bfc1      	itttt	gt
 8006d88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006d94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d98:	bfd6      	itet	le
 8006d9a:	f1c3 0320 	rsble	r3, r3, #32
 8006d9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006da2:	fa06 f003 	lslle.w	r0, r6, r3
 8006da6:	f7f9 fbbd 	bl	8000524 <__aeabi_ui2d>
 8006daa:	2201      	movs	r2, #1
 8006dac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006db0:	3d01      	subs	r5, #1
 8006db2:	920e      	str	r2, [sp, #56]	; 0x38
 8006db4:	e76f      	b.n	8006c96 <_dtoa_r+0x126>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7b3      	b.n	8006d22 <_dtoa_r+0x1b2>
 8006dba:	900c      	str	r0, [sp, #48]	; 0x30
 8006dbc:	e7b2      	b.n	8006d24 <_dtoa_r+0x1b4>
 8006dbe:	9b05      	ldr	r3, [sp, #20]
 8006dc0:	eba3 030b 	sub.w	r3, r3, fp
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	f1cb 0300 	rsb	r3, fp, #0
 8006dca:	9308      	str	r3, [sp, #32]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd0:	e7bf      	b.n	8006d52 <_dtoa_r+0x1e2>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc52      	bgt.n	8006e82 <_dtoa_r+0x312>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	461a      	mov	r2, r3
 8006de4:	920a      	str	r2, [sp, #40]	; 0x28
 8006de6:	e00b      	b.n	8006e00 <_dtoa_r+0x290>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7f3      	b.n	8006dd4 <_dtoa_r+0x264>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df2:	445b      	add	r3, fp
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	bfb8      	it	lt
 8006dfe:	2301      	movlt	r3, #1
 8006e00:	69e0      	ldr	r0, [r4, #28]
 8006e02:	2100      	movs	r1, #0
 8006e04:	2204      	movs	r2, #4
 8006e06:	f102 0614 	add.w	r6, r2, #20
 8006e0a:	429e      	cmp	r6, r3
 8006e0c:	d93d      	bls.n	8006e8a <_dtoa_r+0x31a>
 8006e0e:	6041      	str	r1, [r0, #4]
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fd9f 	bl	8007954 <_Balloc>
 8006e16:	9000      	str	r0, [sp, #0]
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d139      	bne.n	8006e90 <_dtoa_r+0x320>
 8006e1c:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <_dtoa_r+0x308>)
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f240 11af 	movw	r1, #431	; 0x1af
 8006e24:	e6bd      	b.n	8006ba2 <_dtoa_r+0x32>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e7e1      	b.n	8006dee <_dtoa_r+0x27e>
 8006e2a:	2501      	movs	r5, #1
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	9509      	str	r5, [sp, #36]	; 0x24
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2312      	movs	r3, #18
 8006e3e:	e7d1      	b.n	8006de4 <_dtoa_r+0x274>
 8006e40:	636f4361 	.word	0x636f4361
 8006e44:	3fd287a7 	.word	0x3fd287a7
 8006e48:	8b60c8b3 	.word	0x8b60c8b3
 8006e4c:	3fc68a28 	.word	0x3fc68a28
 8006e50:	509f79fb 	.word	0x509f79fb
 8006e54:	3fd34413 	.word	0x3fd34413
 8006e58:	0800a6a5 	.word	0x0800a6a5
 8006e5c:	0800a6bc 	.word	0x0800a6bc
 8006e60:	7ff00000 	.word	0x7ff00000
 8006e64:	0800a6a1 	.word	0x0800a6a1
 8006e68:	0800a698 	.word	0x0800a698
 8006e6c:	0800a675 	.word	0x0800a675
 8006e70:	3ff80000 	.word	0x3ff80000
 8006e74:	0800a7a8 	.word	0x0800a7a8
 8006e78:	0800a714 	.word	0x0800a714
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	e7d7      	b.n	8006e32 <_dtoa_r+0x2c2>
 8006e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	e7ba      	b.n	8006e00 <_dtoa_r+0x290>
 8006e8a:	3101      	adds	r1, #1
 8006e8c:	0052      	lsls	r2, r2, #1
 8006e8e:	e7ba      	b.n	8006e06 <_dtoa_r+0x296>
 8006e90:	69e3      	ldr	r3, [r4, #28]
 8006e92:	9a00      	ldr	r2, [sp, #0]
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	2b0e      	cmp	r3, #14
 8006e9a:	f200 80a8 	bhi.w	8006fee <_dtoa_r+0x47e>
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	f000 80a5 	beq.w	8006fee <_dtoa_r+0x47e>
 8006ea4:	f1bb 0f00 	cmp.w	fp, #0
 8006ea8:	dd38      	ble.n	8006f1c <_dtoa_r+0x3ac>
 8006eaa:	4bc0      	ldr	r3, [pc, #768]	; (80071ac <_dtoa_r+0x63c>)
 8006eac:	f00b 020f 	and.w	r2, fp, #15
 8006eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006eb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006ebc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ec0:	d019      	beq.n	8006ef6 <_dtoa_r+0x386>
 8006ec2:	4bbb      	ldr	r3, [pc, #748]	; (80071b0 <_dtoa_r+0x640>)
 8006ec4:	ec51 0b18 	vmov	r0, r1, d8
 8006ec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ecc:	f7f9 fcce 	bl	800086c <__aeabi_ddiv>
 8006ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed4:	f008 080f 	and.w	r8, r8, #15
 8006ed8:	2503      	movs	r5, #3
 8006eda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80071b0 <_dtoa_r+0x640>
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	d10a      	bne.n	8006efa <_dtoa_r+0x38a>
 8006ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	463b      	mov	r3, r7
 8006eec:	f7f9 fcbe 	bl	800086c <__aeabi_ddiv>
 8006ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef4:	e02b      	b.n	8006f4e <_dtoa_r+0x3de>
 8006ef6:	2502      	movs	r5, #2
 8006ef8:	e7ef      	b.n	8006eda <_dtoa_r+0x36a>
 8006efa:	f018 0f01 	tst.w	r8, #1
 8006efe:	d008      	beq.n	8006f12 <_dtoa_r+0x3a2>
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f08:	f7f9 fb86 	bl	8000618 <__aeabi_dmul>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f16:	f109 0908 	add.w	r9, r9, #8
 8006f1a:	e7e0      	b.n	8006ede <_dtoa_r+0x36e>
 8006f1c:	f000 809f 	beq.w	800705e <_dtoa_r+0x4ee>
 8006f20:	f1cb 0600 	rsb	r6, fp, #0
 8006f24:	4ba1      	ldr	r3, [pc, #644]	; (80071ac <_dtoa_r+0x63c>)
 8006f26:	4fa2      	ldr	r7, [pc, #648]	; (80071b0 <_dtoa_r+0x640>)
 8006f28:	f006 020f 	and.w	r2, r6, #15
 8006f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	ec51 0b18 	vmov	r0, r1, d8
 8006f38:	f7f9 fb6e 	bl	8000618 <__aeabi_dmul>
 8006f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f40:	1136      	asrs	r6, r6, #4
 8006f42:	2300      	movs	r3, #0
 8006f44:	2502      	movs	r5, #2
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d17e      	bne.n	8007048 <_dtoa_r+0x4d8>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1d0      	bne.n	8006ef0 <_dtoa_r+0x380>
 8006f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8084 	beq.w	8007062 <_dtoa_r+0x4f2>
 8006f5a:	4b96      	ldr	r3, [pc, #600]	; (80071b4 <_dtoa_r+0x644>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 fdcb 	bl	8000afc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d07b      	beq.n	8007062 <_dtoa_r+0x4f2>
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d078      	beq.n	8007062 <_dtoa_r+0x4f2>
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd39      	ble.n	8006fea <_dtoa_r+0x47a>
 8006f76:	4b90      	ldr	r3, [pc, #576]	; (80071b8 <_dtoa_r+0x648>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 fb4b 	bl	8000618 <__aeabi_dmul>
 8006f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f86:	9e01      	ldr	r6, [sp, #4]
 8006f88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 fad6 	bl	8000544 <__aeabi_i2d>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	f7f9 fb3c 	bl	8000618 <__aeabi_dmul>
 8006fa0:	4b86      	ldr	r3, [pc, #536]	; (80071bc <_dtoa_r+0x64c>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7f9 f982 	bl	80002ac <__adddf3>
 8006fa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	d158      	bne.n	8007068 <_dtoa_r+0x4f8>
 8006fb6:	4b82      	ldr	r3, [pc, #520]	; (80071c0 <_dtoa_r+0x650>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 f973 	bl	80002a8 <__aeabi_dsub>
 8006fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	4689      	mov	r9, r1
 8006fca:	f7f9 fdb5 	bl	8000b38 <__aeabi_dcmpgt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f040 8296 	bne.w	8007500 <_dtoa_r+0x990>
 8006fd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f040 8289 	bne.w	80074fc <_dtoa_r+0x98c>
 8006fea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f2c0 814e 	blt.w	8007292 <_dtoa_r+0x722>
 8006ff6:	f1bb 0f0e 	cmp.w	fp, #14
 8006ffa:	f300 814a 	bgt.w	8007292 <_dtoa_r+0x722>
 8006ffe:	4b6b      	ldr	r3, [pc, #428]	; (80071ac <_dtoa_r+0x63c>)
 8007000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	f280 80dc 	bge.w	80071c8 <_dtoa_r+0x658>
 8007010:	9b04      	ldr	r3, [sp, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f300 80d8 	bgt.w	80071c8 <_dtoa_r+0x658>
 8007018:	f040 826f 	bne.w	80074fa <_dtoa_r+0x98a>
 800701c:	4b68      	ldr	r3, [pc, #416]	; (80071c0 <_dtoa_r+0x650>)
 800701e:	2200      	movs	r2, #0
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	f7f9 faf8 	bl	8000618 <__aeabi_dmul>
 8007028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800702c:	f7f9 fd7a 	bl	8000b24 <__aeabi_dcmpge>
 8007030:	9e04      	ldr	r6, [sp, #16]
 8007032:	4637      	mov	r7, r6
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 8245 	bne.w	80074c4 <_dtoa_r+0x954>
 800703a:	9d00      	ldr	r5, [sp, #0]
 800703c:	2331      	movs	r3, #49	; 0x31
 800703e:	f805 3b01 	strb.w	r3, [r5], #1
 8007042:	f10b 0b01 	add.w	fp, fp, #1
 8007046:	e241      	b.n	80074cc <_dtoa_r+0x95c>
 8007048:	07f2      	lsls	r2, r6, #31
 800704a:	d505      	bpl.n	8007058 <_dtoa_r+0x4e8>
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f7f9 fae2 	bl	8000618 <__aeabi_dmul>
 8007054:	3501      	adds	r5, #1
 8007056:	2301      	movs	r3, #1
 8007058:	1076      	asrs	r6, r6, #1
 800705a:	3708      	adds	r7, #8
 800705c:	e773      	b.n	8006f46 <_dtoa_r+0x3d6>
 800705e:	2502      	movs	r5, #2
 8007060:	e775      	b.n	8006f4e <_dtoa_r+0x3de>
 8007062:	9e04      	ldr	r6, [sp, #16]
 8007064:	465f      	mov	r7, fp
 8007066:	e792      	b.n	8006f8e <_dtoa_r+0x41e>
 8007068:	9900      	ldr	r1, [sp, #0]
 800706a:	4b50      	ldr	r3, [pc, #320]	; (80071ac <_dtoa_r+0x63c>)
 800706c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007070:	4431      	add	r1, r6
 8007072:	9102      	str	r1, [sp, #8]
 8007074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007076:	eeb0 9a47 	vmov.f32	s18, s14
 800707a:	eef0 9a67 	vmov.f32	s19, s15
 800707e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007086:	2900      	cmp	r1, #0
 8007088:	d044      	beq.n	8007114 <_dtoa_r+0x5a4>
 800708a:	494e      	ldr	r1, [pc, #312]	; (80071c4 <_dtoa_r+0x654>)
 800708c:	2000      	movs	r0, #0
 800708e:	f7f9 fbed 	bl	800086c <__aeabi_ddiv>
 8007092:	ec53 2b19 	vmov	r2, r3, d9
 8007096:	f7f9 f907 	bl	80002a8 <__aeabi_dsub>
 800709a:	9d00      	ldr	r5, [sp, #0]
 800709c:	ec41 0b19 	vmov	d9, r0, r1
 80070a0:	4649      	mov	r1, r9
 80070a2:	4640      	mov	r0, r8
 80070a4:	f7f9 fd68 	bl	8000b78 <__aeabi_d2iz>
 80070a8:	4606      	mov	r6, r0
 80070aa:	f7f9 fa4b 	bl	8000544 <__aeabi_i2d>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 f8f7 	bl	80002a8 <__aeabi_dsub>
 80070ba:	3630      	adds	r6, #48	; 0x30
 80070bc:	f805 6b01 	strb.w	r6, [r5], #1
 80070c0:	ec53 2b19 	vmov	r2, r3, d9
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	f7f9 fd18 	bl	8000afc <__aeabi_dcmplt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d164      	bne.n	800719a <_dtoa_r+0x62a>
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	4937      	ldr	r1, [pc, #220]	; (80071b4 <_dtoa_r+0x644>)
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7f9 f8e6 	bl	80002a8 <__aeabi_dsub>
 80070dc:	ec53 2b19 	vmov	r2, r3, d9
 80070e0:	f7f9 fd0c 	bl	8000afc <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f040 80b6 	bne.w	8007256 <_dtoa_r+0x6e6>
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	429d      	cmp	r5, r3
 80070ee:	f43f af7c 	beq.w	8006fea <_dtoa_r+0x47a>
 80070f2:	4b31      	ldr	r3, [pc, #196]	; (80071b8 <_dtoa_r+0x648>)
 80070f4:	ec51 0b19 	vmov	r0, r1, d9
 80070f8:	2200      	movs	r2, #0
 80070fa:	f7f9 fa8d 	bl	8000618 <__aeabi_dmul>
 80070fe:	4b2e      	ldr	r3, [pc, #184]	; (80071b8 <_dtoa_r+0x648>)
 8007100:	ec41 0b19 	vmov	d9, r0, r1
 8007104:	2200      	movs	r2, #0
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 fa85 	bl	8000618 <__aeabi_dmul>
 800710e:	4680      	mov	r8, r0
 8007110:	4689      	mov	r9, r1
 8007112:	e7c5      	b.n	80070a0 <_dtoa_r+0x530>
 8007114:	ec51 0b17 	vmov	r0, r1, d7
 8007118:	f7f9 fa7e 	bl	8000618 <__aeabi_dmul>
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	9d00      	ldr	r5, [sp, #0]
 8007120:	930f      	str	r3, [sp, #60]	; 0x3c
 8007122:	ec41 0b19 	vmov	d9, r0, r1
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	f7f9 fd25 	bl	8000b78 <__aeabi_d2iz>
 800712e:	4606      	mov	r6, r0
 8007130:	f7f9 fa08 	bl	8000544 <__aeabi_i2d>
 8007134:	3630      	adds	r6, #48	; 0x30
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 f8b3 	bl	80002a8 <__aeabi_dsub>
 8007142:	f805 6b01 	strb.w	r6, [r5], #1
 8007146:	9b02      	ldr	r3, [sp, #8]
 8007148:	429d      	cmp	r5, r3
 800714a:	4680      	mov	r8, r0
 800714c:	4689      	mov	r9, r1
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	d124      	bne.n	800719e <_dtoa_r+0x62e>
 8007154:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <_dtoa_r+0x654>)
 8007156:	ec51 0b19 	vmov	r0, r1, d9
 800715a:	f7f9 f8a7 	bl	80002ac <__adddf3>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	f7f9 fce7 	bl	8000b38 <__aeabi_dcmpgt>
 800716a:	2800      	cmp	r0, #0
 800716c:	d173      	bne.n	8007256 <_dtoa_r+0x6e6>
 800716e:	ec53 2b19 	vmov	r2, r3, d9
 8007172:	4914      	ldr	r1, [pc, #80]	; (80071c4 <_dtoa_r+0x654>)
 8007174:	2000      	movs	r0, #0
 8007176:	f7f9 f897 	bl	80002a8 <__aeabi_dsub>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f7f9 fcbb 	bl	8000afc <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f af2f 	beq.w	8006fea <_dtoa_r+0x47a>
 800718c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800718e:	1e6b      	subs	r3, r5, #1
 8007190:	930f      	str	r3, [sp, #60]	; 0x3c
 8007192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007196:	2b30      	cmp	r3, #48	; 0x30
 8007198:	d0f8      	beq.n	800718c <_dtoa_r+0x61c>
 800719a:	46bb      	mov	fp, r7
 800719c:	e04a      	b.n	8007234 <_dtoa_r+0x6c4>
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <_dtoa_r+0x648>)
 80071a0:	f7f9 fa3a 	bl	8000618 <__aeabi_dmul>
 80071a4:	4680      	mov	r8, r0
 80071a6:	4689      	mov	r9, r1
 80071a8:	e7bd      	b.n	8007126 <_dtoa_r+0x5b6>
 80071aa:	bf00      	nop
 80071ac:	0800a7a8 	.word	0x0800a7a8
 80071b0:	0800a780 	.word	0x0800a780
 80071b4:	3ff00000 	.word	0x3ff00000
 80071b8:	40240000 	.word	0x40240000
 80071bc:	401c0000 	.word	0x401c0000
 80071c0:	40140000 	.word	0x40140000
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071cc:	9d00      	ldr	r5, [sp, #0]
 80071ce:	4642      	mov	r2, r8
 80071d0:	464b      	mov	r3, r9
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7f9 fb49 	bl	800086c <__aeabi_ddiv>
 80071da:	f7f9 fccd 	bl	8000b78 <__aeabi_d2iz>
 80071de:	9001      	str	r0, [sp, #4]
 80071e0:	f7f9 f9b0 	bl	8000544 <__aeabi_i2d>
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	f7f9 fa16 	bl	8000618 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 f858 	bl	80002a8 <__aeabi_dsub>
 80071f8:	9e01      	ldr	r6, [sp, #4]
 80071fa:	9f04      	ldr	r7, [sp, #16]
 80071fc:	3630      	adds	r6, #48	; 0x30
 80071fe:	f805 6b01 	strb.w	r6, [r5], #1
 8007202:	9e00      	ldr	r6, [sp, #0]
 8007204:	1bae      	subs	r6, r5, r6
 8007206:	42b7      	cmp	r7, r6
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	d134      	bne.n	8007278 <_dtoa_r+0x708>
 800720e:	f7f9 f84d 	bl	80002ac <__adddf3>
 8007212:	4642      	mov	r2, r8
 8007214:	464b      	mov	r3, r9
 8007216:	4606      	mov	r6, r0
 8007218:	460f      	mov	r7, r1
 800721a:	f7f9 fc8d 	bl	8000b38 <__aeabi_dcmpgt>
 800721e:	b9c8      	cbnz	r0, 8007254 <_dtoa_r+0x6e4>
 8007220:	4642      	mov	r2, r8
 8007222:	464b      	mov	r3, r9
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f9 fc5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800722c:	b110      	cbz	r0, 8007234 <_dtoa_r+0x6c4>
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	07db      	lsls	r3, r3, #31
 8007232:	d40f      	bmi.n	8007254 <_dtoa_r+0x6e4>
 8007234:	4651      	mov	r1, sl
 8007236:	4620      	mov	r0, r4
 8007238:	f000 fbcc 	bl	80079d4 <_Bfree>
 800723c:	2300      	movs	r3, #0
 800723e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007240:	702b      	strb	r3, [r5, #0]
 8007242:	f10b 0301 	add.w	r3, fp, #1
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f ace2 	beq.w	8006c14 <_dtoa_r+0xa4>
 8007250:	601d      	str	r5, [r3, #0]
 8007252:	e4df      	b.n	8006c14 <_dtoa_r+0xa4>
 8007254:	465f      	mov	r7, fp
 8007256:	462b      	mov	r3, r5
 8007258:	461d      	mov	r5, r3
 800725a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800725e:	2a39      	cmp	r2, #57	; 0x39
 8007260:	d106      	bne.n	8007270 <_dtoa_r+0x700>
 8007262:	9a00      	ldr	r2, [sp, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d1f7      	bne.n	8007258 <_dtoa_r+0x6e8>
 8007268:	9900      	ldr	r1, [sp, #0]
 800726a:	2230      	movs	r2, #48	; 0x30
 800726c:	3701      	adds	r7, #1
 800726e:	700a      	strb	r2, [r1, #0]
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	3201      	adds	r2, #1
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e790      	b.n	800719a <_dtoa_r+0x62a>
 8007278:	4ba3      	ldr	r3, [pc, #652]	; (8007508 <_dtoa_r+0x998>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f9cc 	bl	8000618 <__aeabi_dmul>
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4606      	mov	r6, r0
 8007286:	460f      	mov	r7, r1
 8007288:	f7f9 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800728c:	2800      	cmp	r0, #0
 800728e:	d09e      	beq.n	80071ce <_dtoa_r+0x65e>
 8007290:	e7d0      	b.n	8007234 <_dtoa_r+0x6c4>
 8007292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007294:	2a00      	cmp	r2, #0
 8007296:	f000 80ca 	beq.w	800742e <_dtoa_r+0x8be>
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	2a01      	cmp	r2, #1
 800729e:	f300 80ad 	bgt.w	80073fc <_dtoa_r+0x88c>
 80072a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	f000 80a5 	beq.w	80073f4 <_dtoa_r+0x884>
 80072aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072ae:	9e08      	ldr	r6, [sp, #32]
 80072b0:	9d05      	ldr	r5, [sp, #20]
 80072b2:	9a05      	ldr	r2, [sp, #20]
 80072b4:	441a      	add	r2, r3
 80072b6:	9205      	str	r2, [sp, #20]
 80072b8:	9a06      	ldr	r2, [sp, #24]
 80072ba:	2101      	movs	r1, #1
 80072bc:	441a      	add	r2, r3
 80072be:	4620      	mov	r0, r4
 80072c0:	9206      	str	r2, [sp, #24]
 80072c2:	f000 fc3d 	bl	8007b40 <__i2b>
 80072c6:	4607      	mov	r7, r0
 80072c8:	b165      	cbz	r5, 80072e4 <_dtoa_r+0x774>
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd09      	ble.n	80072e4 <_dtoa_r+0x774>
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	9a05      	ldr	r2, [sp, #20]
 80072d4:	bfa8      	it	ge
 80072d6:	462b      	movge	r3, r5
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	9205      	str	r2, [sp, #20]
 80072dc:	9a06      	ldr	r2, [sp, #24]
 80072de:	1aed      	subs	r5, r5, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	9306      	str	r3, [sp, #24]
 80072e4:	9b08      	ldr	r3, [sp, #32]
 80072e6:	b1f3      	cbz	r3, 8007326 <_dtoa_r+0x7b6>
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80a3 	beq.w	8007436 <_dtoa_r+0x8c6>
 80072f0:	2e00      	cmp	r6, #0
 80072f2:	dd10      	ble.n	8007316 <_dtoa_r+0x7a6>
 80072f4:	4639      	mov	r1, r7
 80072f6:	4632      	mov	r2, r6
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fce1 	bl	8007cc0 <__pow5mult>
 80072fe:	4652      	mov	r2, sl
 8007300:	4601      	mov	r1, r0
 8007302:	4607      	mov	r7, r0
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fc31 	bl	8007b6c <__multiply>
 800730a:	4651      	mov	r1, sl
 800730c:	4680      	mov	r8, r0
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fb60 	bl	80079d4 <_Bfree>
 8007314:	46c2      	mov	sl, r8
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	1b9a      	subs	r2, r3, r6
 800731a:	d004      	beq.n	8007326 <_dtoa_r+0x7b6>
 800731c:	4651      	mov	r1, sl
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fcce 	bl	8007cc0 <__pow5mult>
 8007324:	4682      	mov	sl, r0
 8007326:	2101      	movs	r1, #1
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fc09 	bl	8007b40 <__i2b>
 800732e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	4606      	mov	r6, r0
 8007334:	f340 8081 	ble.w	800743a <_dtoa_r+0x8ca>
 8007338:	461a      	mov	r2, r3
 800733a:	4601      	mov	r1, r0
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fcbf 	bl	8007cc0 <__pow5mult>
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	2b01      	cmp	r3, #1
 8007346:	4606      	mov	r6, r0
 8007348:	dd7a      	ble.n	8007440 <_dtoa_r+0x8d0>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	6933      	ldr	r3, [r6, #16]
 8007350:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007354:	6918      	ldr	r0, [r3, #16]
 8007356:	f000 fba5 	bl	8007aa4 <__hi0bits>
 800735a:	f1c0 0020 	rsb	r0, r0, #32
 800735e:	9b06      	ldr	r3, [sp, #24]
 8007360:	4418      	add	r0, r3
 8007362:	f010 001f 	ands.w	r0, r0, #31
 8007366:	f000 8094 	beq.w	8007492 <_dtoa_r+0x922>
 800736a:	f1c0 0320 	rsb	r3, r0, #32
 800736e:	2b04      	cmp	r3, #4
 8007370:	f340 8085 	ble.w	800747e <_dtoa_r+0x90e>
 8007374:	9b05      	ldr	r3, [sp, #20]
 8007376:	f1c0 001c 	rsb	r0, r0, #28
 800737a:	4403      	add	r3, r0
 800737c:	9305      	str	r3, [sp, #20]
 800737e:	9b06      	ldr	r3, [sp, #24]
 8007380:	4403      	add	r3, r0
 8007382:	4405      	add	r5, r0
 8007384:	9306      	str	r3, [sp, #24]
 8007386:	9b05      	ldr	r3, [sp, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	dd05      	ble.n	8007398 <_dtoa_r+0x828>
 800738c:	4651      	mov	r1, sl
 800738e:	461a      	mov	r2, r3
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fcef 	bl	8007d74 <__lshift>
 8007396:	4682      	mov	sl, r0
 8007398:	9b06      	ldr	r3, [sp, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x83a>
 800739e:	4631      	mov	r1, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fce6 	bl	8007d74 <__lshift>
 80073a8:	4606      	mov	r6, r0
 80073aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d072      	beq.n	8007496 <_dtoa_r+0x926>
 80073b0:	4631      	mov	r1, r6
 80073b2:	4650      	mov	r0, sl
 80073b4:	f000 fd4a 	bl	8007e4c <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	da6c      	bge.n	8007496 <_dtoa_r+0x926>
 80073bc:	2300      	movs	r3, #0
 80073be:	4651      	mov	r1, sl
 80073c0:	220a      	movs	r2, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fb28 	bl	8007a18 <__multadd>
 80073c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073ce:	4682      	mov	sl, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 81b0 	beq.w	8007736 <_dtoa_r+0xbc6>
 80073d6:	2300      	movs	r3, #0
 80073d8:	4639      	mov	r1, r7
 80073da:	220a      	movs	r2, #10
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fb1b 	bl	8007a18 <__multadd>
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	4607      	mov	r7, r0
 80073e8:	f300 8096 	bgt.w	8007518 <_dtoa_r+0x9a8>
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	dc59      	bgt.n	80074a6 <_dtoa_r+0x936>
 80073f2:	e091      	b.n	8007518 <_dtoa_r+0x9a8>
 80073f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073fa:	e758      	b.n	80072ae <_dtoa_r+0x73e>
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	1e5e      	subs	r6, r3, #1
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	42b3      	cmp	r3, r6
 8007404:	bfbf      	itttt	lt
 8007406:	9b08      	ldrlt	r3, [sp, #32]
 8007408:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800740a:	9608      	strlt	r6, [sp, #32]
 800740c:	1af3      	sublt	r3, r6, r3
 800740e:	bfb4      	ite	lt
 8007410:	18d2      	addlt	r2, r2, r3
 8007412:	1b9e      	subge	r6, r3, r6
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	bfbc      	itt	lt
 8007418:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800741a:	2600      	movlt	r6, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfb7      	itett	lt
 8007420:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007424:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007428:	1a9d      	sublt	r5, r3, r2
 800742a:	2300      	movlt	r3, #0
 800742c:	e741      	b.n	80072b2 <_dtoa_r+0x742>
 800742e:	9e08      	ldr	r6, [sp, #32]
 8007430:	9d05      	ldr	r5, [sp, #20]
 8007432:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007434:	e748      	b.n	80072c8 <_dtoa_r+0x758>
 8007436:	9a08      	ldr	r2, [sp, #32]
 8007438:	e770      	b.n	800731c <_dtoa_r+0x7ac>
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	2b01      	cmp	r3, #1
 800743e:	dc19      	bgt.n	8007474 <_dtoa_r+0x904>
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	b9bb      	cbnz	r3, 8007474 <_dtoa_r+0x904>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800744a:	b99b      	cbnz	r3, 8007474 <_dtoa_r+0x904>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007452:	0d1b      	lsrs	r3, r3, #20
 8007454:	051b      	lsls	r3, r3, #20
 8007456:	b183      	cbz	r3, 800747a <_dtoa_r+0x90a>
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	3301      	adds	r3, #1
 800745c:	9305      	str	r3, [sp, #20]
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	3301      	adds	r3, #1
 8007462:	9306      	str	r3, [sp, #24]
 8007464:	f04f 0801 	mov.w	r8, #1
 8007468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f47f af6f 	bne.w	800734e <_dtoa_r+0x7de>
 8007470:	2001      	movs	r0, #1
 8007472:	e774      	b.n	800735e <_dtoa_r+0x7ee>
 8007474:	f04f 0800 	mov.w	r8, #0
 8007478:	e7f6      	b.n	8007468 <_dtoa_r+0x8f8>
 800747a:	4698      	mov	r8, r3
 800747c:	e7f4      	b.n	8007468 <_dtoa_r+0x8f8>
 800747e:	d082      	beq.n	8007386 <_dtoa_r+0x816>
 8007480:	9a05      	ldr	r2, [sp, #20]
 8007482:	331c      	adds	r3, #28
 8007484:	441a      	add	r2, r3
 8007486:	9205      	str	r2, [sp, #20]
 8007488:	9a06      	ldr	r2, [sp, #24]
 800748a:	441a      	add	r2, r3
 800748c:	441d      	add	r5, r3
 800748e:	9206      	str	r2, [sp, #24]
 8007490:	e779      	b.n	8007386 <_dtoa_r+0x816>
 8007492:	4603      	mov	r3, r0
 8007494:	e7f4      	b.n	8007480 <_dtoa_r+0x910>
 8007496:	9b04      	ldr	r3, [sp, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dc37      	bgt.n	800750c <_dtoa_r+0x99c>
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	dd34      	ble.n	800750c <_dtoa_r+0x99c>
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	b963      	cbnz	r3, 80074c4 <_dtoa_r+0x954>
 80074aa:	4631      	mov	r1, r6
 80074ac:	2205      	movs	r2, #5
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fab2 	bl	8007a18 <__multadd>
 80074b4:	4601      	mov	r1, r0
 80074b6:	4606      	mov	r6, r0
 80074b8:	4650      	mov	r0, sl
 80074ba:	f000 fcc7 	bl	8007e4c <__mcmp>
 80074be:	2800      	cmp	r0, #0
 80074c0:	f73f adbb 	bgt.w	800703a <_dtoa_r+0x4ca>
 80074c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c6:	9d00      	ldr	r5, [sp, #0]
 80074c8:	ea6f 0b03 	mvn.w	fp, r3
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	4631      	mov	r1, r6
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fa7e 	bl	80079d4 <_Bfree>
 80074d8:	2f00      	cmp	r7, #0
 80074da:	f43f aeab 	beq.w	8007234 <_dtoa_r+0x6c4>
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	d005      	beq.n	80074f0 <_dtoa_r+0x980>
 80074e4:	45b8      	cmp	r8, r7
 80074e6:	d003      	beq.n	80074f0 <_dtoa_r+0x980>
 80074e8:	4641      	mov	r1, r8
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 fa72 	bl	80079d4 <_Bfree>
 80074f0:	4639      	mov	r1, r7
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fa6e 	bl	80079d4 <_Bfree>
 80074f8:	e69c      	b.n	8007234 <_dtoa_r+0x6c4>
 80074fa:	2600      	movs	r6, #0
 80074fc:	4637      	mov	r7, r6
 80074fe:	e7e1      	b.n	80074c4 <_dtoa_r+0x954>
 8007500:	46bb      	mov	fp, r7
 8007502:	4637      	mov	r7, r6
 8007504:	e599      	b.n	800703a <_dtoa_r+0x4ca>
 8007506:	bf00      	nop
 8007508:	40240000 	.word	0x40240000
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 80c8 	beq.w	80076a4 <_dtoa_r+0xb34>
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	2d00      	cmp	r5, #0
 800751a:	dd05      	ble.n	8007528 <_dtoa_r+0x9b8>
 800751c:	4639      	mov	r1, r7
 800751e:	462a      	mov	r2, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fc27 	bl	8007d74 <__lshift>
 8007526:	4607      	mov	r7, r0
 8007528:	f1b8 0f00 	cmp.w	r8, #0
 800752c:	d05b      	beq.n	80075e6 <_dtoa_r+0xa76>
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fa0f 	bl	8007954 <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b928      	cbnz	r0, 8007546 <_dtoa_r+0x9d6>
 800753a:	4b83      	ldr	r3, [pc, #524]	; (8007748 <_dtoa_r+0xbd8>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007542:	f7ff bb2e 	b.w	8006ba2 <_dtoa_r+0x32>
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	3202      	adds	r2, #2
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	f107 010c 	add.w	r1, r7, #12
 8007550:	300c      	adds	r0, #12
 8007552:	f000 ffab 	bl	80084ac <memcpy>
 8007556:	2201      	movs	r2, #1
 8007558:	4629      	mov	r1, r5
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fc0a 	bl	8007d74 <__lshift>
 8007560:	9b00      	ldr	r3, [sp, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800756a:	4413      	add	r3, r2
 800756c:	9308      	str	r3, [sp, #32]
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	46b8      	mov	r8, r7
 8007576:	9306      	str	r3, [sp, #24]
 8007578:	4607      	mov	r7, r0
 800757a:	9b04      	ldr	r3, [sp, #16]
 800757c:	4631      	mov	r1, r6
 800757e:	3b01      	subs	r3, #1
 8007580:	4650      	mov	r0, sl
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	f7ff fa69 	bl	8006a5a <quorem>
 8007588:	4641      	mov	r1, r8
 800758a:	9002      	str	r0, [sp, #8]
 800758c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007590:	4650      	mov	r0, sl
 8007592:	f000 fc5b 	bl	8007e4c <__mcmp>
 8007596:	463a      	mov	r2, r7
 8007598:	9005      	str	r0, [sp, #20]
 800759a:	4631      	mov	r1, r6
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fc71 	bl	8007e84 <__mdiff>
 80075a2:	68c2      	ldr	r2, [r0, #12]
 80075a4:	4605      	mov	r5, r0
 80075a6:	bb02      	cbnz	r2, 80075ea <_dtoa_r+0xa7a>
 80075a8:	4601      	mov	r1, r0
 80075aa:	4650      	mov	r0, sl
 80075ac:	f000 fc4e 	bl	8007e4c <__mcmp>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4629      	mov	r1, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	9209      	str	r2, [sp, #36]	; 0x24
 80075b8:	f000 fa0c 	bl	80079d4 <_Bfree>
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c0:	9d04      	ldr	r5, [sp, #16]
 80075c2:	ea43 0102 	orr.w	r1, r3, r2
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	4319      	orrs	r1, r3
 80075ca:	d110      	bne.n	80075ee <_dtoa_r+0xa7e>
 80075cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075d0:	d029      	beq.n	8007626 <_dtoa_r+0xab6>
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd02      	ble.n	80075de <_dtoa_r+0xa6e>
 80075d8:	9b02      	ldr	r3, [sp, #8]
 80075da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	f883 9000 	strb.w	r9, [r3]
 80075e4:	e774      	b.n	80074d0 <_dtoa_r+0x960>
 80075e6:	4638      	mov	r0, r7
 80075e8:	e7ba      	b.n	8007560 <_dtoa_r+0x9f0>
 80075ea:	2201      	movs	r2, #1
 80075ec:	e7e1      	b.n	80075b2 <_dtoa_r+0xa42>
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db04      	blt.n	80075fe <_dtoa_r+0xa8e>
 80075f4:	9907      	ldr	r1, [sp, #28]
 80075f6:	430b      	orrs	r3, r1
 80075f8:	9906      	ldr	r1, [sp, #24]
 80075fa:	430b      	orrs	r3, r1
 80075fc:	d120      	bne.n	8007640 <_dtoa_r+0xad0>
 80075fe:	2a00      	cmp	r2, #0
 8007600:	dded      	ble.n	80075de <_dtoa_r+0xa6e>
 8007602:	4651      	mov	r1, sl
 8007604:	2201      	movs	r2, #1
 8007606:	4620      	mov	r0, r4
 8007608:	f000 fbb4 	bl	8007d74 <__lshift>
 800760c:	4631      	mov	r1, r6
 800760e:	4682      	mov	sl, r0
 8007610:	f000 fc1c 	bl	8007e4c <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	dc03      	bgt.n	8007620 <_dtoa_r+0xab0>
 8007618:	d1e1      	bne.n	80075de <_dtoa_r+0xa6e>
 800761a:	f019 0f01 	tst.w	r9, #1
 800761e:	d0de      	beq.n	80075de <_dtoa_r+0xa6e>
 8007620:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007624:	d1d8      	bne.n	80075d8 <_dtoa_r+0xa68>
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	2339      	movs	r3, #57	; 0x39
 800762a:	7013      	strb	r3, [r2, #0]
 800762c:	462b      	mov	r3, r5
 800762e:	461d      	mov	r5, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007636:	2a39      	cmp	r2, #57	; 0x39
 8007638:	d06c      	beq.n	8007714 <_dtoa_r+0xba4>
 800763a:	3201      	adds	r2, #1
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	e747      	b.n	80074d0 <_dtoa_r+0x960>
 8007640:	2a00      	cmp	r2, #0
 8007642:	dd07      	ble.n	8007654 <_dtoa_r+0xae4>
 8007644:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007648:	d0ed      	beq.n	8007626 <_dtoa_r+0xab6>
 800764a:	9a01      	ldr	r2, [sp, #4]
 800764c:	f109 0301 	add.w	r3, r9, #1
 8007650:	7013      	strb	r3, [r2, #0]
 8007652:	e73d      	b.n	80074d0 <_dtoa_r+0x960>
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	9a08      	ldr	r2, [sp, #32]
 8007658:	f803 9c01 	strb.w	r9, [r3, #-1]
 800765c:	4293      	cmp	r3, r2
 800765e:	d043      	beq.n	80076e8 <_dtoa_r+0xb78>
 8007660:	4651      	mov	r1, sl
 8007662:	2300      	movs	r3, #0
 8007664:	220a      	movs	r2, #10
 8007666:	4620      	mov	r0, r4
 8007668:	f000 f9d6 	bl	8007a18 <__multadd>
 800766c:	45b8      	cmp	r8, r7
 800766e:	4682      	mov	sl, r0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	f04f 020a 	mov.w	r2, #10
 8007678:	4641      	mov	r1, r8
 800767a:	4620      	mov	r0, r4
 800767c:	d107      	bne.n	800768e <_dtoa_r+0xb1e>
 800767e:	f000 f9cb 	bl	8007a18 <__multadd>
 8007682:	4680      	mov	r8, r0
 8007684:	4607      	mov	r7, r0
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	3301      	adds	r3, #1
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	e775      	b.n	800757a <_dtoa_r+0xa0a>
 800768e:	f000 f9c3 	bl	8007a18 <__multadd>
 8007692:	4639      	mov	r1, r7
 8007694:	4680      	mov	r8, r0
 8007696:	2300      	movs	r3, #0
 8007698:	220a      	movs	r2, #10
 800769a:	4620      	mov	r0, r4
 800769c:	f000 f9bc 	bl	8007a18 <__multadd>
 80076a0:	4607      	mov	r7, r0
 80076a2:	e7f0      	b.n	8007686 <_dtoa_r+0xb16>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	9d00      	ldr	r5, [sp, #0]
 80076aa:	4631      	mov	r1, r6
 80076ac:	4650      	mov	r0, sl
 80076ae:	f7ff f9d4 	bl	8006a5a <quorem>
 80076b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076b6:	9b00      	ldr	r3, [sp, #0]
 80076b8:	f805 9b01 	strb.w	r9, [r5], #1
 80076bc:	1aea      	subs	r2, r5, r3
 80076be:	9b01      	ldr	r3, [sp, #4]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	dd07      	ble.n	80076d4 <_dtoa_r+0xb64>
 80076c4:	4651      	mov	r1, sl
 80076c6:	2300      	movs	r3, #0
 80076c8:	220a      	movs	r2, #10
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f9a4 	bl	8007a18 <__multadd>
 80076d0:	4682      	mov	sl, r0
 80076d2:	e7ea      	b.n	80076aa <_dtoa_r+0xb3a>
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfc8      	it	gt
 80076da:	461d      	movgt	r5, r3
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	bfd8      	it	le
 80076e0:	2501      	movle	r5, #1
 80076e2:	441d      	add	r5, r3
 80076e4:	f04f 0800 	mov.w	r8, #0
 80076e8:	4651      	mov	r1, sl
 80076ea:	2201      	movs	r2, #1
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fb41 	bl	8007d74 <__lshift>
 80076f2:	4631      	mov	r1, r6
 80076f4:	4682      	mov	sl, r0
 80076f6:	f000 fba9 	bl	8007e4c <__mcmp>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	dc96      	bgt.n	800762c <_dtoa_r+0xabc>
 80076fe:	d102      	bne.n	8007706 <_dtoa_r+0xb96>
 8007700:	f019 0f01 	tst.w	r9, #1
 8007704:	d192      	bne.n	800762c <_dtoa_r+0xabc>
 8007706:	462b      	mov	r3, r5
 8007708:	461d      	mov	r5, r3
 800770a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800770e:	2a30      	cmp	r2, #48	; 0x30
 8007710:	d0fa      	beq.n	8007708 <_dtoa_r+0xb98>
 8007712:	e6dd      	b.n	80074d0 <_dtoa_r+0x960>
 8007714:	9a00      	ldr	r2, [sp, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d189      	bne.n	800762e <_dtoa_r+0xabe>
 800771a:	f10b 0b01 	add.w	fp, fp, #1
 800771e:	2331      	movs	r3, #49	; 0x31
 8007720:	e796      	b.n	8007650 <_dtoa_r+0xae0>
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <_dtoa_r+0xbdc>)
 8007724:	f7ff ba99 	b.w	8006c5a <_dtoa_r+0xea>
 8007728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800772a:	2b00      	cmp	r3, #0
 800772c:	f47f aa6d 	bne.w	8006c0a <_dtoa_r+0x9a>
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <_dtoa_r+0xbe0>)
 8007732:	f7ff ba92 	b.w	8006c5a <_dtoa_r+0xea>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	dcb5      	bgt.n	80076a8 <_dtoa_r+0xb38>
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	2b02      	cmp	r3, #2
 8007740:	f73f aeb1 	bgt.w	80074a6 <_dtoa_r+0x936>
 8007744:	e7b0      	b.n	80076a8 <_dtoa_r+0xb38>
 8007746:	bf00      	nop
 8007748:	0800a714 	.word	0x0800a714
 800774c:	0800a674 	.word	0x0800a674
 8007750:	0800a698 	.word	0x0800a698

08007754 <_free_r>:
 8007754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007756:	2900      	cmp	r1, #0
 8007758:	d044      	beq.n	80077e4 <_free_r+0x90>
 800775a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775e:	9001      	str	r0, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f1a1 0404 	sub.w	r4, r1, #4
 8007766:	bfb8      	it	lt
 8007768:	18e4      	addlt	r4, r4, r3
 800776a:	f000 f8e7 	bl	800793c <__malloc_lock>
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <_free_r+0x94>)
 8007770:	9801      	ldr	r0, [sp, #4]
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	b933      	cbnz	r3, 8007784 <_free_r+0x30>
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	6014      	str	r4, [r2, #0]
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007780:	f000 b8e2 	b.w	8007948 <__malloc_unlock>
 8007784:	42a3      	cmp	r3, r4
 8007786:	d908      	bls.n	800779a <_free_r+0x46>
 8007788:	6825      	ldr	r5, [r4, #0]
 800778a:	1961      	adds	r1, r4, r5
 800778c:	428b      	cmp	r3, r1
 800778e:	bf01      	itttt	eq
 8007790:	6819      	ldreq	r1, [r3, #0]
 8007792:	685b      	ldreq	r3, [r3, #4]
 8007794:	1949      	addeq	r1, r1, r5
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	e7ed      	b.n	8007776 <_free_r+0x22>
 800779a:	461a      	mov	r2, r3
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b10b      	cbz	r3, 80077a4 <_free_r+0x50>
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d9fa      	bls.n	800779a <_free_r+0x46>
 80077a4:	6811      	ldr	r1, [r2, #0]
 80077a6:	1855      	adds	r5, r2, r1
 80077a8:	42a5      	cmp	r5, r4
 80077aa:	d10b      	bne.n	80077c4 <_free_r+0x70>
 80077ac:	6824      	ldr	r4, [r4, #0]
 80077ae:	4421      	add	r1, r4
 80077b0:	1854      	adds	r4, r2, r1
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	d1e0      	bne.n	800777a <_free_r+0x26>
 80077b8:	681c      	ldr	r4, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	6053      	str	r3, [r2, #4]
 80077be:	440c      	add	r4, r1
 80077c0:	6014      	str	r4, [r2, #0]
 80077c2:	e7da      	b.n	800777a <_free_r+0x26>
 80077c4:	d902      	bls.n	80077cc <_free_r+0x78>
 80077c6:	230c      	movs	r3, #12
 80077c8:	6003      	str	r3, [r0, #0]
 80077ca:	e7d6      	b.n	800777a <_free_r+0x26>
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	1961      	adds	r1, r4, r5
 80077d0:	428b      	cmp	r3, r1
 80077d2:	bf04      	itt	eq
 80077d4:	6819      	ldreq	r1, [r3, #0]
 80077d6:	685b      	ldreq	r3, [r3, #4]
 80077d8:	6063      	str	r3, [r4, #4]
 80077da:	bf04      	itt	eq
 80077dc:	1949      	addeq	r1, r1, r5
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	6054      	str	r4, [r2, #4]
 80077e2:	e7ca      	b.n	800777a <_free_r+0x26>
 80077e4:	b003      	add	sp, #12
 80077e6:	bd30      	pop	{r4, r5, pc}
 80077e8:	20000630 	.word	0x20000630

080077ec <malloc>:
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <malloc+0xc>)
 80077ee:	4601      	mov	r1, r0
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f000 b823 	b.w	800783c <_malloc_r>
 80077f6:	bf00      	nop
 80077f8:	200000ac 	.word	0x200000ac

080077fc <sbrk_aligned>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4e0e      	ldr	r6, [pc, #56]	; (8007838 <sbrk_aligned+0x3c>)
 8007800:	460c      	mov	r4, r1
 8007802:	6831      	ldr	r1, [r6, #0]
 8007804:	4605      	mov	r5, r0
 8007806:	b911      	cbnz	r1, 800780e <sbrk_aligned+0x12>
 8007808:	f000 fe40 	bl	800848c <_sbrk_r>
 800780c:	6030      	str	r0, [r6, #0]
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 fe3b 	bl	800848c <_sbrk_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d00a      	beq.n	8007830 <sbrk_aligned+0x34>
 800781a:	1cc4      	adds	r4, r0, #3
 800781c:	f024 0403 	bic.w	r4, r4, #3
 8007820:	42a0      	cmp	r0, r4
 8007822:	d007      	beq.n	8007834 <sbrk_aligned+0x38>
 8007824:	1a21      	subs	r1, r4, r0
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fe30 	bl	800848c <_sbrk_r>
 800782c:	3001      	adds	r0, #1
 800782e:	d101      	bne.n	8007834 <sbrk_aligned+0x38>
 8007830:	f04f 34ff 	mov.w	r4, #4294967295
 8007834:	4620      	mov	r0, r4
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	20000634 	.word	0x20000634

0800783c <_malloc_r>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	1ccd      	adds	r5, r1, #3
 8007842:	f025 0503 	bic.w	r5, r5, #3
 8007846:	3508      	adds	r5, #8
 8007848:	2d0c      	cmp	r5, #12
 800784a:	bf38      	it	cc
 800784c:	250c      	movcc	r5, #12
 800784e:	2d00      	cmp	r5, #0
 8007850:	4607      	mov	r7, r0
 8007852:	db01      	blt.n	8007858 <_malloc_r+0x1c>
 8007854:	42a9      	cmp	r1, r5
 8007856:	d905      	bls.n	8007864 <_malloc_r+0x28>
 8007858:	230c      	movs	r3, #12
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	2600      	movs	r6, #0
 800785e:	4630      	mov	r0, r6
 8007860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007938 <_malloc_r+0xfc>
 8007868:	f000 f868 	bl	800793c <__malloc_lock>
 800786c:	f8d8 3000 	ldr.w	r3, [r8]
 8007870:	461c      	mov	r4, r3
 8007872:	bb5c      	cbnz	r4, 80078cc <_malloc_r+0x90>
 8007874:	4629      	mov	r1, r5
 8007876:	4638      	mov	r0, r7
 8007878:	f7ff ffc0 	bl	80077fc <sbrk_aligned>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	4604      	mov	r4, r0
 8007880:	d155      	bne.n	800792e <_malloc_r+0xf2>
 8007882:	f8d8 4000 	ldr.w	r4, [r8]
 8007886:	4626      	mov	r6, r4
 8007888:	2e00      	cmp	r6, #0
 800788a:	d145      	bne.n	8007918 <_malloc_r+0xdc>
 800788c:	2c00      	cmp	r4, #0
 800788e:	d048      	beq.n	8007922 <_malloc_r+0xe6>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	4631      	mov	r1, r6
 8007894:	4638      	mov	r0, r7
 8007896:	eb04 0903 	add.w	r9, r4, r3
 800789a:	f000 fdf7 	bl	800848c <_sbrk_r>
 800789e:	4581      	cmp	r9, r0
 80078a0:	d13f      	bne.n	8007922 <_malloc_r+0xe6>
 80078a2:	6821      	ldr	r1, [r4, #0]
 80078a4:	1a6d      	subs	r5, r5, r1
 80078a6:	4629      	mov	r1, r5
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ffa7 	bl	80077fc <sbrk_aligned>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d037      	beq.n	8007922 <_malloc_r+0xe6>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	442b      	add	r3, r5
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	f8d8 3000 	ldr.w	r3, [r8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d038      	beq.n	8007932 <_malloc_r+0xf6>
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	42a2      	cmp	r2, r4
 80078c4:	d12b      	bne.n	800791e <_malloc_r+0xe2>
 80078c6:	2200      	movs	r2, #0
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	e00f      	b.n	80078ec <_malloc_r+0xb0>
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	1b52      	subs	r2, r2, r5
 80078d0:	d41f      	bmi.n	8007912 <_malloc_r+0xd6>
 80078d2:	2a0b      	cmp	r2, #11
 80078d4:	d917      	bls.n	8007906 <_malloc_r+0xca>
 80078d6:	1961      	adds	r1, r4, r5
 80078d8:	42a3      	cmp	r3, r4
 80078da:	6025      	str	r5, [r4, #0]
 80078dc:	bf18      	it	ne
 80078de:	6059      	strne	r1, [r3, #4]
 80078e0:	6863      	ldr	r3, [r4, #4]
 80078e2:	bf08      	it	eq
 80078e4:	f8c8 1000 	streq.w	r1, [r8]
 80078e8:	5162      	str	r2, [r4, r5]
 80078ea:	604b      	str	r3, [r1, #4]
 80078ec:	4638      	mov	r0, r7
 80078ee:	f104 060b 	add.w	r6, r4, #11
 80078f2:	f000 f829 	bl	8007948 <__malloc_unlock>
 80078f6:	f026 0607 	bic.w	r6, r6, #7
 80078fa:	1d23      	adds	r3, r4, #4
 80078fc:	1af2      	subs	r2, r6, r3
 80078fe:	d0ae      	beq.n	800785e <_malloc_r+0x22>
 8007900:	1b9b      	subs	r3, r3, r6
 8007902:	50a3      	str	r3, [r4, r2]
 8007904:	e7ab      	b.n	800785e <_malloc_r+0x22>
 8007906:	42a3      	cmp	r3, r4
 8007908:	6862      	ldr	r2, [r4, #4]
 800790a:	d1dd      	bne.n	80078c8 <_malloc_r+0x8c>
 800790c:	f8c8 2000 	str.w	r2, [r8]
 8007910:	e7ec      	b.n	80078ec <_malloc_r+0xb0>
 8007912:	4623      	mov	r3, r4
 8007914:	6864      	ldr	r4, [r4, #4]
 8007916:	e7ac      	b.n	8007872 <_malloc_r+0x36>
 8007918:	4634      	mov	r4, r6
 800791a:	6876      	ldr	r6, [r6, #4]
 800791c:	e7b4      	b.n	8007888 <_malloc_r+0x4c>
 800791e:	4613      	mov	r3, r2
 8007920:	e7cc      	b.n	80078bc <_malloc_r+0x80>
 8007922:	230c      	movs	r3, #12
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4638      	mov	r0, r7
 8007928:	f000 f80e 	bl	8007948 <__malloc_unlock>
 800792c:	e797      	b.n	800785e <_malloc_r+0x22>
 800792e:	6025      	str	r5, [r4, #0]
 8007930:	e7dc      	b.n	80078ec <_malloc_r+0xb0>
 8007932:	605b      	str	r3, [r3, #4]
 8007934:	deff      	udf	#255	; 0xff
 8007936:	bf00      	nop
 8007938:	20000630 	.word	0x20000630

0800793c <__malloc_lock>:
 800793c:	4801      	ldr	r0, [pc, #4]	; (8007944 <__malloc_lock+0x8>)
 800793e:	f7ff b88a 	b.w	8006a56 <__retarget_lock_acquire_recursive>
 8007942:	bf00      	nop
 8007944:	2000062c 	.word	0x2000062c

08007948 <__malloc_unlock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_unlock+0x8>)
 800794a:	f7ff b885 	b.w	8006a58 <__retarget_lock_release_recursive>
 800794e:	bf00      	nop
 8007950:	2000062c 	.word	0x2000062c

08007954 <_Balloc>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	69c6      	ldr	r6, [r0, #28]
 8007958:	4604      	mov	r4, r0
 800795a:	460d      	mov	r5, r1
 800795c:	b976      	cbnz	r6, 800797c <_Balloc+0x28>
 800795e:	2010      	movs	r0, #16
 8007960:	f7ff ff44 	bl	80077ec <malloc>
 8007964:	4602      	mov	r2, r0
 8007966:	61e0      	str	r0, [r4, #28]
 8007968:	b920      	cbnz	r0, 8007974 <_Balloc+0x20>
 800796a:	4b18      	ldr	r3, [pc, #96]	; (80079cc <_Balloc+0x78>)
 800796c:	4818      	ldr	r0, [pc, #96]	; (80079d0 <_Balloc+0x7c>)
 800796e:	216b      	movs	r1, #107	; 0x6b
 8007970:	f000 fdaa 	bl	80084c8 <__assert_func>
 8007974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007978:	6006      	str	r6, [r0, #0]
 800797a:	60c6      	str	r6, [r0, #12]
 800797c:	69e6      	ldr	r6, [r4, #28]
 800797e:	68f3      	ldr	r3, [r6, #12]
 8007980:	b183      	cbz	r3, 80079a4 <_Balloc+0x50>
 8007982:	69e3      	ldr	r3, [r4, #28]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800798a:	b9b8      	cbnz	r0, 80079bc <_Balloc+0x68>
 800798c:	2101      	movs	r1, #1
 800798e:	fa01 f605 	lsl.w	r6, r1, r5
 8007992:	1d72      	adds	r2, r6, #5
 8007994:	0092      	lsls	r2, r2, #2
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fdb4 	bl	8008504 <_calloc_r>
 800799c:	b160      	cbz	r0, 80079b8 <_Balloc+0x64>
 800799e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079a2:	e00e      	b.n	80079c2 <_Balloc+0x6e>
 80079a4:	2221      	movs	r2, #33	; 0x21
 80079a6:	2104      	movs	r1, #4
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fdab 	bl	8008504 <_calloc_r>
 80079ae:	69e3      	ldr	r3, [r4, #28]
 80079b0:	60f0      	str	r0, [r6, #12]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e4      	bne.n	8007982 <_Balloc+0x2e>
 80079b8:	2000      	movs	r0, #0
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	6802      	ldr	r2, [r0, #0]
 80079be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079c2:	2300      	movs	r3, #0
 80079c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079c8:	e7f7      	b.n	80079ba <_Balloc+0x66>
 80079ca:	bf00      	nop
 80079cc:	0800a6a5 	.word	0x0800a6a5
 80079d0:	0800a725 	.word	0x0800a725

080079d4 <_Bfree>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	69c6      	ldr	r6, [r0, #28]
 80079d8:	4605      	mov	r5, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b976      	cbnz	r6, 80079fc <_Bfree+0x28>
 80079de:	2010      	movs	r0, #16
 80079e0:	f7ff ff04 	bl	80077ec <malloc>
 80079e4:	4602      	mov	r2, r0
 80079e6:	61e8      	str	r0, [r5, #28]
 80079e8:	b920      	cbnz	r0, 80079f4 <_Bfree+0x20>
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <_Bfree+0x3c>)
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <_Bfree+0x40>)
 80079ee:	218f      	movs	r1, #143	; 0x8f
 80079f0:	f000 fd6a 	bl	80084c8 <__assert_func>
 80079f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f8:	6006      	str	r6, [r0, #0]
 80079fa:	60c6      	str	r6, [r0, #12]
 80079fc:	b13c      	cbz	r4, 8007a0e <_Bfree+0x3a>
 80079fe:	69eb      	ldr	r3, [r5, #28]
 8007a00:	6862      	ldr	r2, [r4, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a08:	6021      	str	r1, [r4, #0]
 8007a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	0800a6a5 	.word	0x0800a6a5
 8007a14:	0800a725 	.word	0x0800a725

08007a18 <__multadd>:
 8007a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1c:	690d      	ldr	r5, [r1, #16]
 8007a1e:	4607      	mov	r7, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	461e      	mov	r6, r3
 8007a24:	f101 0c14 	add.w	ip, r1, #20
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a2e:	b299      	uxth	r1, r3
 8007a30:	fb02 6101 	mla	r1, r2, r1, r6
 8007a34:	0c1e      	lsrs	r6, r3, #16
 8007a36:	0c0b      	lsrs	r3, r1, #16
 8007a38:	fb02 3306 	mla	r3, r2, r6, r3
 8007a3c:	b289      	uxth	r1, r1
 8007a3e:	3001      	adds	r0, #1
 8007a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a44:	4285      	cmp	r5, r0
 8007a46:	f84c 1b04 	str.w	r1, [ip], #4
 8007a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a4e:	dcec      	bgt.n	8007a2a <__multadd+0x12>
 8007a50:	b30e      	cbz	r6, 8007a96 <__multadd+0x7e>
 8007a52:	68a3      	ldr	r3, [r4, #8]
 8007a54:	42ab      	cmp	r3, r5
 8007a56:	dc19      	bgt.n	8007a8c <__multadd+0x74>
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	3101      	adds	r1, #1
 8007a5e:	f7ff ff79 	bl	8007954 <_Balloc>
 8007a62:	4680      	mov	r8, r0
 8007a64:	b928      	cbnz	r0, 8007a72 <__multadd+0x5a>
 8007a66:	4602      	mov	r2, r0
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <__multadd+0x84>)
 8007a6a:	480d      	ldr	r0, [pc, #52]	; (8007aa0 <__multadd+0x88>)
 8007a6c:	21ba      	movs	r1, #186	; 0xba
 8007a6e:	f000 fd2b 	bl	80084c8 <__assert_func>
 8007a72:	6922      	ldr	r2, [r4, #16]
 8007a74:	3202      	adds	r2, #2
 8007a76:	f104 010c 	add.w	r1, r4, #12
 8007a7a:	0092      	lsls	r2, r2, #2
 8007a7c:	300c      	adds	r0, #12
 8007a7e:	f000 fd15 	bl	80084ac <memcpy>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff ffa5 	bl	80079d4 <_Bfree>
 8007a8a:	4644      	mov	r4, r8
 8007a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a90:	3501      	adds	r5, #1
 8007a92:	615e      	str	r6, [r3, #20]
 8007a94:	6125      	str	r5, [r4, #16]
 8007a96:	4620      	mov	r0, r4
 8007a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9c:	0800a714 	.word	0x0800a714
 8007aa0:	0800a725 	.word	0x0800a725

08007aa4 <__hi0bits>:
 8007aa4:	0c03      	lsrs	r3, r0, #16
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	b9d3      	cbnz	r3, 8007ae0 <__hi0bits+0x3c>
 8007aaa:	0400      	lsls	r0, r0, #16
 8007aac:	2310      	movs	r3, #16
 8007aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ab2:	bf04      	itt	eq
 8007ab4:	0200      	lsleq	r0, r0, #8
 8007ab6:	3308      	addeq	r3, #8
 8007ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007abc:	bf04      	itt	eq
 8007abe:	0100      	lsleq	r0, r0, #4
 8007ac0:	3304      	addeq	r3, #4
 8007ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	0080      	lsleq	r0, r0, #2
 8007aca:	3302      	addeq	r3, #2
 8007acc:	2800      	cmp	r0, #0
 8007ace:	db05      	blt.n	8007adc <__hi0bits+0x38>
 8007ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ad4:	f103 0301 	add.w	r3, r3, #1
 8007ad8:	bf08      	it	eq
 8007ada:	2320      	moveq	r3, #32
 8007adc:	4618      	mov	r0, r3
 8007ade:	4770      	bx	lr
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e7e4      	b.n	8007aae <__hi0bits+0xa>

08007ae4 <__lo0bits>:
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	f013 0207 	ands.w	r2, r3, #7
 8007aea:	d00c      	beq.n	8007b06 <__lo0bits+0x22>
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	d422      	bmi.n	8007b36 <__lo0bits+0x52>
 8007af0:	079a      	lsls	r2, r3, #30
 8007af2:	bf49      	itett	mi
 8007af4:	085b      	lsrmi	r3, r3, #1
 8007af6:	089b      	lsrpl	r3, r3, #2
 8007af8:	6003      	strmi	r3, [r0, #0]
 8007afa:	2201      	movmi	r2, #1
 8007afc:	bf5c      	itt	pl
 8007afe:	6003      	strpl	r3, [r0, #0]
 8007b00:	2202      	movpl	r2, #2
 8007b02:	4610      	mov	r0, r2
 8007b04:	4770      	bx	lr
 8007b06:	b299      	uxth	r1, r3
 8007b08:	b909      	cbnz	r1, 8007b0e <__lo0bits+0x2a>
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	b2d9      	uxtb	r1, r3
 8007b10:	b909      	cbnz	r1, 8007b16 <__lo0bits+0x32>
 8007b12:	3208      	adds	r2, #8
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	0719      	lsls	r1, r3, #28
 8007b18:	bf04      	itt	eq
 8007b1a:	091b      	lsreq	r3, r3, #4
 8007b1c:	3204      	addeq	r2, #4
 8007b1e:	0799      	lsls	r1, r3, #30
 8007b20:	bf04      	itt	eq
 8007b22:	089b      	lsreq	r3, r3, #2
 8007b24:	3202      	addeq	r2, #2
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d403      	bmi.n	8007b32 <__lo0bits+0x4e>
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	f102 0201 	add.w	r2, r2, #1
 8007b30:	d003      	beq.n	8007b3a <__lo0bits+0x56>
 8007b32:	6003      	str	r3, [r0, #0]
 8007b34:	e7e5      	b.n	8007b02 <__lo0bits+0x1e>
 8007b36:	2200      	movs	r2, #0
 8007b38:	e7e3      	b.n	8007b02 <__lo0bits+0x1e>
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	e7e1      	b.n	8007b02 <__lo0bits+0x1e>
	...

08007b40 <__i2b>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	460c      	mov	r4, r1
 8007b44:	2101      	movs	r1, #1
 8007b46:	f7ff ff05 	bl	8007954 <_Balloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	b928      	cbnz	r0, 8007b5a <__i2b+0x1a>
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <__i2b+0x24>)
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <__i2b+0x28>)
 8007b52:	f240 1145 	movw	r1, #325	; 0x145
 8007b56:	f000 fcb7 	bl	80084c8 <__assert_func>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	6144      	str	r4, [r0, #20]
 8007b5e:	6103      	str	r3, [r0, #16]
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	bf00      	nop
 8007b64:	0800a714 	.word	0x0800a714
 8007b68:	0800a725 	.word	0x0800a725

08007b6c <__multiply>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	4691      	mov	r9, r2
 8007b72:	690a      	ldr	r2, [r1, #16]
 8007b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	460b      	movlt	r3, r1
 8007b7e:	460c      	mov	r4, r1
 8007b80:	bfbc      	itt	lt
 8007b82:	464c      	movlt	r4, r9
 8007b84:	4699      	movlt	r9, r3
 8007b86:	6927      	ldr	r7, [r4, #16]
 8007b88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b8c:	68a3      	ldr	r3, [r4, #8]
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	eb07 060a 	add.w	r6, r7, sl
 8007b94:	42b3      	cmp	r3, r6
 8007b96:	b085      	sub	sp, #20
 8007b98:	bfb8      	it	lt
 8007b9a:	3101      	addlt	r1, #1
 8007b9c:	f7ff feda 	bl	8007954 <_Balloc>
 8007ba0:	b930      	cbnz	r0, 8007bb0 <__multiply+0x44>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <__multiply+0x14c>)
 8007ba6:	4845      	ldr	r0, [pc, #276]	; (8007cbc <__multiply+0x150>)
 8007ba8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bac:	f000 fc8c 	bl	80084c8 <__assert_func>
 8007bb0:	f100 0514 	add.w	r5, r0, #20
 8007bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bb8:	462b      	mov	r3, r5
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	d321      	bcc.n	8007c04 <__multiply+0x98>
 8007bc0:	f104 0314 	add.w	r3, r4, #20
 8007bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bc8:	f109 0314 	add.w	r3, r9, #20
 8007bcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bd0:	9202      	str	r2, [sp, #8]
 8007bd2:	1b3a      	subs	r2, r7, r4
 8007bd4:	3a15      	subs	r2, #21
 8007bd6:	f022 0203 	bic.w	r2, r2, #3
 8007bda:	3204      	adds	r2, #4
 8007bdc:	f104 0115 	add.w	r1, r4, #21
 8007be0:	428f      	cmp	r7, r1
 8007be2:	bf38      	it	cc
 8007be4:	2204      	movcc	r2, #4
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9a02      	ldr	r2, [sp, #8]
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d80c      	bhi.n	8007c0a <__multiply+0x9e>
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	dd03      	ble.n	8007bfc <__multiply+0x90>
 8007bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d05b      	beq.n	8007cb4 <__multiply+0x148>
 8007bfc:	6106      	str	r6, [r0, #16]
 8007bfe:	b005      	add	sp, #20
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	f843 2b04 	str.w	r2, [r3], #4
 8007c08:	e7d8      	b.n	8007bbc <__multiply+0x50>
 8007c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c0e:	f1ba 0f00 	cmp.w	sl, #0
 8007c12:	d024      	beq.n	8007c5e <__multiply+0xf2>
 8007c14:	f104 0e14 	add.w	lr, r4, #20
 8007c18:	46a9      	mov	r9, r5
 8007c1a:	f04f 0c00 	mov.w	ip, #0
 8007c1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c22:	f8d9 1000 	ldr.w	r1, [r9]
 8007c26:	fa1f fb82 	uxth.w	fp, r2
 8007c2a:	b289      	uxth	r1, r1
 8007c2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c34:	f8d9 2000 	ldr.w	r2, [r9]
 8007c38:	4461      	add	r1, ip
 8007c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c46:	b289      	uxth	r1, r1
 8007c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c4c:	4577      	cmp	r7, lr
 8007c4e:	f849 1b04 	str.w	r1, [r9], #4
 8007c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c56:	d8e2      	bhi.n	8007c1e <__multiply+0xb2>
 8007c58:	9a01      	ldr	r2, [sp, #4]
 8007c5a:	f845 c002 	str.w	ip, [r5, r2]
 8007c5e:	9a03      	ldr	r2, [sp, #12]
 8007c60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c64:	3304      	adds	r3, #4
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	d021      	beq.n	8007cb0 <__multiply+0x144>
 8007c6c:	6829      	ldr	r1, [r5, #0]
 8007c6e:	f104 0c14 	add.w	ip, r4, #20
 8007c72:	46ae      	mov	lr, r5
 8007c74:	f04f 0a00 	mov.w	sl, #0
 8007c78:	f8bc b000 	ldrh.w	fp, [ip]
 8007c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c80:	fb09 220b 	mla	r2, r9, fp, r2
 8007c84:	4452      	add	r2, sl
 8007c86:	b289      	uxth	r1, r1
 8007c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c8c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c98:	f8be 1000 	ldrh.w	r1, [lr]
 8007c9c:	fb09 110a 	mla	r1, r9, sl, r1
 8007ca0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ca4:	4567      	cmp	r7, ip
 8007ca6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007caa:	d8e5      	bhi.n	8007c78 <__multiply+0x10c>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	50a9      	str	r1, [r5, r2]
 8007cb0:	3504      	adds	r5, #4
 8007cb2:	e799      	b.n	8007be8 <__multiply+0x7c>
 8007cb4:	3e01      	subs	r6, #1
 8007cb6:	e79b      	b.n	8007bf0 <__multiply+0x84>
 8007cb8:	0800a714 	.word	0x0800a714
 8007cbc:	0800a725 	.word	0x0800a725

08007cc0 <__pow5mult>:
 8007cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	f012 0203 	ands.w	r2, r2, #3
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	d007      	beq.n	8007ce0 <__pow5mult+0x20>
 8007cd0:	4c25      	ldr	r4, [pc, #148]	; (8007d68 <__pow5mult+0xa8>)
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cda:	f7ff fe9d 	bl	8007a18 <__multadd>
 8007cde:	4607      	mov	r7, r0
 8007ce0:	10ad      	asrs	r5, r5, #2
 8007ce2:	d03d      	beq.n	8007d60 <__pow5mult+0xa0>
 8007ce4:	69f4      	ldr	r4, [r6, #28]
 8007ce6:	b97c      	cbnz	r4, 8007d08 <__pow5mult+0x48>
 8007ce8:	2010      	movs	r0, #16
 8007cea:	f7ff fd7f 	bl	80077ec <malloc>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	61f0      	str	r0, [r6, #28]
 8007cf2:	b928      	cbnz	r0, 8007d00 <__pow5mult+0x40>
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <__pow5mult+0xac>)
 8007cf6:	481e      	ldr	r0, [pc, #120]	; (8007d70 <__pow5mult+0xb0>)
 8007cf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007cfc:	f000 fbe4 	bl	80084c8 <__assert_func>
 8007d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d04:	6004      	str	r4, [r0, #0]
 8007d06:	60c4      	str	r4, [r0, #12]
 8007d08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d10:	b94c      	cbnz	r4, 8007d26 <__pow5mult+0x66>
 8007d12:	f240 2171 	movw	r1, #625	; 0x271
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ff12 	bl	8007b40 <__i2b>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d22:	4604      	mov	r4, r0
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	f04f 0900 	mov.w	r9, #0
 8007d2a:	07eb      	lsls	r3, r5, #31
 8007d2c:	d50a      	bpl.n	8007d44 <__pow5mult+0x84>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4622      	mov	r2, r4
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ff1a 	bl	8007b6c <__multiply>
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fe49 	bl	80079d4 <_Bfree>
 8007d42:	4647      	mov	r7, r8
 8007d44:	106d      	asrs	r5, r5, #1
 8007d46:	d00b      	beq.n	8007d60 <__pow5mult+0xa0>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	b938      	cbnz	r0, 8007d5c <__pow5mult+0x9c>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff0b 	bl	8007b6c <__multiply>
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	f8c0 9000 	str.w	r9, [r0]
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	e7e4      	b.n	8007d2a <__pow5mult+0x6a>
 8007d60:	4638      	mov	r0, r7
 8007d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d66:	bf00      	nop
 8007d68:	0800a870 	.word	0x0800a870
 8007d6c:	0800a6a5 	.word	0x0800a6a5
 8007d70:	0800a725 	.word	0x0800a725

08007d74 <__lshift>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6849      	ldr	r1, [r1, #4]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	4607      	mov	r7, r0
 8007d86:	4691      	mov	r9, r2
 8007d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d8c:	f108 0601 	add.w	r6, r8, #1
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	db0b      	blt.n	8007dac <__lshift+0x38>
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff fddd 	bl	8007954 <_Balloc>
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	b948      	cbnz	r0, 8007db2 <__lshift+0x3e>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <__lshift+0xd0>)
 8007da2:	4829      	ldr	r0, [pc, #164]	; (8007e48 <__lshift+0xd4>)
 8007da4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007da8:	f000 fb8e 	bl	80084c8 <__assert_func>
 8007dac:	3101      	adds	r1, #1
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	e7ee      	b.n	8007d90 <__lshift+0x1c>
 8007db2:	2300      	movs	r3, #0
 8007db4:	f100 0114 	add.w	r1, r0, #20
 8007db8:	f100 0210 	add.w	r2, r0, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	4553      	cmp	r3, sl
 8007dc0:	db33      	blt.n	8007e2a <__lshift+0xb6>
 8007dc2:	6920      	ldr	r0, [r4, #16]
 8007dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dc8:	f104 0314 	add.w	r3, r4, #20
 8007dcc:	f019 091f 	ands.w	r9, r9, #31
 8007dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dd8:	d02b      	beq.n	8007e32 <__lshift+0xbe>
 8007dda:	f1c9 0e20 	rsb	lr, r9, #32
 8007dde:	468a      	mov	sl, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	fa00 f009 	lsl.w	r0, r0, r9
 8007de8:	4310      	orrs	r0, r2
 8007dea:	f84a 0b04 	str.w	r0, [sl], #4
 8007dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df2:	459c      	cmp	ip, r3
 8007df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007df8:	d8f3      	bhi.n	8007de2 <__lshift+0x6e>
 8007dfa:	ebac 0304 	sub.w	r3, ip, r4
 8007dfe:	3b15      	subs	r3, #21
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3304      	adds	r3, #4
 8007e06:	f104 0015 	add.w	r0, r4, #21
 8007e0a:	4584      	cmp	ip, r0
 8007e0c:	bf38      	it	cc
 8007e0e:	2304      	movcc	r3, #4
 8007e10:	50ca      	str	r2, [r1, r3]
 8007e12:	b10a      	cbz	r2, 8007e18 <__lshift+0xa4>
 8007e14:	f108 0602 	add.w	r6, r8, #2
 8007e18:	3e01      	subs	r6, #1
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	612e      	str	r6, [r5, #16]
 8007e1e:	4621      	mov	r1, r4
 8007e20:	f7ff fdd8 	bl	80079d4 <_Bfree>
 8007e24:	4628      	mov	r0, r5
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e2e:	3301      	adds	r3, #1
 8007e30:	e7c5      	b.n	8007dbe <__lshift+0x4a>
 8007e32:	3904      	subs	r1, #4
 8007e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e3c:	459c      	cmp	ip, r3
 8007e3e:	d8f9      	bhi.n	8007e34 <__lshift+0xc0>
 8007e40:	e7ea      	b.n	8007e18 <__lshift+0xa4>
 8007e42:	bf00      	nop
 8007e44:	0800a714 	.word	0x0800a714
 8007e48:	0800a725 	.word	0x0800a725

08007e4c <__mcmp>:
 8007e4c:	b530      	push	{r4, r5, lr}
 8007e4e:	6902      	ldr	r2, [r0, #16]
 8007e50:	690c      	ldr	r4, [r1, #16]
 8007e52:	1b12      	subs	r2, r2, r4
 8007e54:	d10e      	bne.n	8007e74 <__mcmp+0x28>
 8007e56:	f100 0314 	add.w	r3, r0, #20
 8007e5a:	3114      	adds	r1, #20
 8007e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e6c:	42a5      	cmp	r5, r4
 8007e6e:	d003      	beq.n	8007e78 <__mcmp+0x2c>
 8007e70:	d305      	bcc.n	8007e7e <__mcmp+0x32>
 8007e72:	2201      	movs	r2, #1
 8007e74:	4610      	mov	r0, r2
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	d3f3      	bcc.n	8007e64 <__mcmp+0x18>
 8007e7c:	e7fa      	b.n	8007e74 <__mcmp+0x28>
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	e7f7      	b.n	8007e74 <__mcmp+0x28>

08007e84 <__mdiff>:
 8007e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4690      	mov	r8, r2
 8007e92:	f7ff ffdb 	bl	8007e4c <__mcmp>
 8007e96:	1e05      	subs	r5, r0, #0
 8007e98:	d110      	bne.n	8007ebc <__mdiff+0x38>
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff fd59 	bl	8007954 <_Balloc>
 8007ea2:	b930      	cbnz	r0, 8007eb2 <__mdiff+0x2e>
 8007ea4:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <__mdiff+0x10c>)
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f240 2137 	movw	r1, #567	; 0x237
 8007eac:	4839      	ldr	r0, [pc, #228]	; (8007f94 <__mdiff+0x110>)
 8007eae:	f000 fb0b 	bl	80084c8 <__assert_func>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	bfa4      	itt	ge
 8007ebe:	4643      	movge	r3, r8
 8007ec0:	46a0      	movge	r8, r4
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ec8:	bfa6      	itte	ge
 8007eca:	461c      	movge	r4, r3
 8007ecc:	2500      	movge	r5, #0
 8007ece:	2501      	movlt	r5, #1
 8007ed0:	f7ff fd40 	bl	8007954 <_Balloc>
 8007ed4:	b920      	cbnz	r0, 8007ee0 <__mdiff+0x5c>
 8007ed6:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__mdiff+0x10c>)
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f240 2145 	movw	r1, #581	; 0x245
 8007ede:	e7e5      	b.n	8007eac <__mdiff+0x28>
 8007ee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ee4:	6926      	ldr	r6, [r4, #16]
 8007ee6:	60c5      	str	r5, [r0, #12]
 8007ee8:	f104 0914 	add.w	r9, r4, #20
 8007eec:	f108 0514 	add.w	r5, r8, #20
 8007ef0:	f100 0e14 	add.w	lr, r0, #20
 8007ef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007efc:	f108 0210 	add.w	r2, r8, #16
 8007f00:	46f2      	mov	sl, lr
 8007f02:	2100      	movs	r1, #0
 8007f04:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f0c:	fa11 f88b 	uxtah	r8, r1, fp
 8007f10:	b299      	uxth	r1, r3
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	eba8 0801 	sub.w	r8, r8, r1
 8007f18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f20:	fa1f f888 	uxth.w	r8, r8
 8007f24:	1419      	asrs	r1, r3, #16
 8007f26:	454e      	cmp	r6, r9
 8007f28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f2c:	f84a 3b04 	str.w	r3, [sl], #4
 8007f30:	d8e8      	bhi.n	8007f04 <__mdiff+0x80>
 8007f32:	1b33      	subs	r3, r6, r4
 8007f34:	3b15      	subs	r3, #21
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	3415      	adds	r4, #21
 8007f3e:	42a6      	cmp	r6, r4
 8007f40:	bf38      	it	cc
 8007f42:	2304      	movcc	r3, #4
 8007f44:	441d      	add	r5, r3
 8007f46:	4473      	add	r3, lr
 8007f48:	469e      	mov	lr, r3
 8007f4a:	462e      	mov	r6, r5
 8007f4c:	4566      	cmp	r6, ip
 8007f4e:	d30e      	bcc.n	8007f6e <__mdiff+0xea>
 8007f50:	f10c 0203 	add.w	r2, ip, #3
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	f022 0203 	bic.w	r2, r2, #3
 8007f5a:	3d03      	subs	r5, #3
 8007f5c:	45ac      	cmp	ip, r5
 8007f5e:	bf38      	it	cc
 8007f60:	2200      	movcc	r2, #0
 8007f62:	4413      	add	r3, r2
 8007f64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f68:	b17a      	cbz	r2, 8007f8a <__mdiff+0x106>
 8007f6a:	6107      	str	r7, [r0, #16]
 8007f6c:	e7a4      	b.n	8007eb8 <__mdiff+0x34>
 8007f6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f72:	fa11 f288 	uxtah	r2, r1, r8
 8007f76:	1414      	asrs	r4, r2, #16
 8007f78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f7c:	b292      	uxth	r2, r2
 8007f7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f82:	f84e 2b04 	str.w	r2, [lr], #4
 8007f86:	1421      	asrs	r1, r4, #16
 8007f88:	e7e0      	b.n	8007f4c <__mdiff+0xc8>
 8007f8a:	3f01      	subs	r7, #1
 8007f8c:	e7ea      	b.n	8007f64 <__mdiff+0xe0>
 8007f8e:	bf00      	nop
 8007f90:	0800a714 	.word	0x0800a714
 8007f94:	0800a725 	.word	0x0800a725

08007f98 <__d2b>:
 8007f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	ec59 8b10 	vmov	r8, r9, d0
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	f7ff fcd5 	bl	8007954 <_Balloc>
 8007faa:	4604      	mov	r4, r0
 8007fac:	b930      	cbnz	r0, 8007fbc <__d2b+0x24>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <__d2b+0xac>)
 8007fb2:	4825      	ldr	r0, [pc, #148]	; (8008048 <__d2b+0xb0>)
 8007fb4:	f240 310f 	movw	r1, #783	; 0x30f
 8007fb8:	f000 fa86 	bl	80084c8 <__assert_func>
 8007fbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fc4:	bb2d      	cbnz	r5, 8008012 <__d2b+0x7a>
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8007fcc:	d026      	beq.n	800801c <__d2b+0x84>
 8007fce:	4668      	mov	r0, sp
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	f7ff fd87 	bl	8007ae4 <__lo0bits>
 8007fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fda:	b1e8      	cbz	r0, 8008018 <__d2b+0x80>
 8007fdc:	f1c0 0320 	rsb	r3, r0, #32
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	40c2      	lsrs	r2, r0
 8007fe8:	6163      	str	r3, [r4, #20]
 8007fea:	9201      	str	r2, [sp, #4]
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	61a3      	str	r3, [r4, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bf14      	ite	ne
 8007ff4:	2202      	movne	r2, #2
 8007ff6:	2201      	moveq	r2, #1
 8007ff8:	6122      	str	r2, [r4, #16]
 8007ffa:	b1bd      	cbz	r5, 800802c <__d2b+0x94>
 8007ffc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008000:	4405      	add	r5, r0
 8008002:	603d      	str	r5, [r7, #0]
 8008004:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	4620      	mov	r0, r4
 800800c:	b003      	add	sp, #12
 800800e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008016:	e7d6      	b.n	8007fc6 <__d2b+0x2e>
 8008018:	6161      	str	r1, [r4, #20]
 800801a:	e7e7      	b.n	8007fec <__d2b+0x54>
 800801c:	a801      	add	r0, sp, #4
 800801e:	f7ff fd61 	bl	8007ae4 <__lo0bits>
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	6163      	str	r3, [r4, #20]
 8008026:	3020      	adds	r0, #32
 8008028:	2201      	movs	r2, #1
 800802a:	e7e5      	b.n	8007ff8 <__d2b+0x60>
 800802c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008034:	6038      	str	r0, [r7, #0]
 8008036:	6918      	ldr	r0, [r3, #16]
 8008038:	f7ff fd34 	bl	8007aa4 <__hi0bits>
 800803c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008040:	e7e2      	b.n	8008008 <__d2b+0x70>
 8008042:	bf00      	nop
 8008044:	0800a714 	.word	0x0800a714
 8008048:	0800a725 	.word	0x0800a725

0800804c <__ssputs_r>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	688e      	ldr	r6, [r1, #8]
 8008052:	461f      	mov	r7, r3
 8008054:	42be      	cmp	r6, r7
 8008056:	680b      	ldr	r3, [r1, #0]
 8008058:	4682      	mov	sl, r0
 800805a:	460c      	mov	r4, r1
 800805c:	4690      	mov	r8, r2
 800805e:	d82c      	bhi.n	80080ba <__ssputs_r+0x6e>
 8008060:	898a      	ldrh	r2, [r1, #12]
 8008062:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008066:	d026      	beq.n	80080b6 <__ssputs_r+0x6a>
 8008068:	6965      	ldr	r5, [r4, #20]
 800806a:	6909      	ldr	r1, [r1, #16]
 800806c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008070:	eba3 0901 	sub.w	r9, r3, r1
 8008074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008078:	1c7b      	adds	r3, r7, #1
 800807a:	444b      	add	r3, r9
 800807c:	106d      	asrs	r5, r5, #1
 800807e:	429d      	cmp	r5, r3
 8008080:	bf38      	it	cc
 8008082:	461d      	movcc	r5, r3
 8008084:	0553      	lsls	r3, r2, #21
 8008086:	d527      	bpl.n	80080d8 <__ssputs_r+0x8c>
 8008088:	4629      	mov	r1, r5
 800808a:	f7ff fbd7 	bl	800783c <_malloc_r>
 800808e:	4606      	mov	r6, r0
 8008090:	b360      	cbz	r0, 80080ec <__ssputs_r+0xa0>
 8008092:	6921      	ldr	r1, [r4, #16]
 8008094:	464a      	mov	r2, r9
 8008096:	f000 fa09 	bl	80084ac <memcpy>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	6126      	str	r6, [r4, #16]
 80080a8:	6165      	str	r5, [r4, #20]
 80080aa:	444e      	add	r6, r9
 80080ac:	eba5 0509 	sub.w	r5, r5, r9
 80080b0:	6026      	str	r6, [r4, #0]
 80080b2:	60a5      	str	r5, [r4, #8]
 80080b4:	463e      	mov	r6, r7
 80080b6:	42be      	cmp	r6, r7
 80080b8:	d900      	bls.n	80080bc <__ssputs_r+0x70>
 80080ba:	463e      	mov	r6, r7
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	4632      	mov	r2, r6
 80080c0:	4641      	mov	r1, r8
 80080c2:	f000 f9c9 	bl	8008458 <memmove>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	1b9b      	subs	r3, r3, r6
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	4433      	add	r3, r6
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	2000      	movs	r0, #0
 80080d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d8:	462a      	mov	r2, r5
 80080da:	f000 fa3b 	bl	8008554 <_realloc_r>
 80080de:	4606      	mov	r6, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1e0      	bne.n	80080a6 <__ssputs_r+0x5a>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	4650      	mov	r0, sl
 80080e8:	f7ff fb34 	bl	8007754 <_free_r>
 80080ec:	230c      	movs	r3, #12
 80080ee:	f8ca 3000 	str.w	r3, [sl]
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	e7e9      	b.n	80080d4 <__ssputs_r+0x88>

08008100 <_svfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4698      	mov	r8, r3
 8008106:	898b      	ldrh	r3, [r1, #12]
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	b09d      	sub	sp, #116	; 0x74
 800810c:	4607      	mov	r7, r0
 800810e:	460d      	mov	r5, r1
 8008110:	4614      	mov	r4, r2
 8008112:	d50e      	bpl.n	8008132 <_svfiprintf_r+0x32>
 8008114:	690b      	ldr	r3, [r1, #16]
 8008116:	b963      	cbnz	r3, 8008132 <_svfiprintf_r+0x32>
 8008118:	2140      	movs	r1, #64	; 0x40
 800811a:	f7ff fb8f 	bl	800783c <_malloc_r>
 800811e:	6028      	str	r0, [r5, #0]
 8008120:	6128      	str	r0, [r5, #16]
 8008122:	b920      	cbnz	r0, 800812e <_svfiprintf_r+0x2e>
 8008124:	230c      	movs	r3, #12
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e0d0      	b.n	80082d0 <_svfiprintf_r+0x1d0>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	616b      	str	r3, [r5, #20]
 8008132:	2300      	movs	r3, #0
 8008134:	9309      	str	r3, [sp, #36]	; 0x24
 8008136:	2320      	movs	r3, #32
 8008138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008140:	2330      	movs	r3, #48	; 0x30
 8008142:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082e8 <_svfiprintf_r+0x1e8>
 8008146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	4623      	mov	r3, r4
 8008150:	469a      	mov	sl, r3
 8008152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008156:	b10a      	cbz	r2, 800815c <_svfiprintf_r+0x5c>
 8008158:	2a25      	cmp	r2, #37	; 0x25
 800815a:	d1f9      	bne.n	8008150 <_svfiprintf_r+0x50>
 800815c:	ebba 0b04 	subs.w	fp, sl, r4
 8008160:	d00b      	beq.n	800817a <_svfiprintf_r+0x7a>
 8008162:	465b      	mov	r3, fp
 8008164:	4622      	mov	r2, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ff6f 	bl	800804c <__ssputs_r>
 800816e:	3001      	adds	r0, #1
 8008170:	f000 80a9 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008176:	445a      	add	r2, fp
 8008178:	9209      	str	r2, [sp, #36]	; 0x24
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80a1 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008184:	2300      	movs	r3, #0
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818e:	f10a 0a01 	add.w	sl, sl, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819a:	931a      	str	r3, [sp, #104]	; 0x68
 800819c:	4654      	mov	r4, sl
 800819e:	2205      	movs	r2, #5
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	4850      	ldr	r0, [pc, #320]	; (80082e8 <_svfiprintf_r+0x1e8>)
 80081a6:	f7f8 f823 	bl	80001f0 <memchr>
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	b9d8      	cbnz	r0, 80081e6 <_svfiprintf_r+0xe6>
 80081ae:	06d0      	lsls	r0, r2, #27
 80081b0:	bf44      	itt	mi
 80081b2:	2320      	movmi	r3, #32
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b8:	0711      	lsls	r1, r2, #28
 80081ba:	bf44      	itt	mi
 80081bc:	232b      	movmi	r3, #43	; 0x2b
 80081be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d015      	beq.n	80081f6 <_svfiprintf_r+0xf6>
 80081ca:	9a07      	ldr	r2, [sp, #28]
 80081cc:	4654      	mov	r4, sl
 80081ce:	2000      	movs	r0, #0
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	4621      	mov	r1, r4
 80081d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081da:	3b30      	subs	r3, #48	; 0x30
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d94d      	bls.n	800827c <_svfiprintf_r+0x17c>
 80081e0:	b1b0      	cbz	r0, 8008210 <_svfiprintf_r+0x110>
 80081e2:	9207      	str	r2, [sp, #28]
 80081e4:	e014      	b.n	8008210 <_svfiprintf_r+0x110>
 80081e6:	eba0 0308 	sub.w	r3, r0, r8
 80081ea:	fa09 f303 	lsl.w	r3, r9, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	46a2      	mov	sl, r4
 80081f4:	e7d2      	b.n	800819c <_svfiprintf_r+0x9c>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9103      	str	r1, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfbb      	ittet	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	f042 0202 	orrlt.w	r2, r2, #2
 8008208:	9307      	strge	r3, [sp, #28]
 800820a:	9307      	strlt	r3, [sp, #28]
 800820c:	bfb8      	it	lt
 800820e:	9204      	strlt	r2, [sp, #16]
 8008210:	7823      	ldrb	r3, [r4, #0]
 8008212:	2b2e      	cmp	r3, #46	; 0x2e
 8008214:	d10c      	bne.n	8008230 <_svfiprintf_r+0x130>
 8008216:	7863      	ldrb	r3, [r4, #1]
 8008218:	2b2a      	cmp	r3, #42	; 0x2a
 800821a:	d134      	bne.n	8008286 <_svfiprintf_r+0x186>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9203      	str	r2, [sp, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfb8      	it	lt
 8008228:	f04f 33ff 	movlt.w	r3, #4294967295
 800822c:	3402      	adds	r4, #2
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082f8 <_svfiprintf_r+0x1f8>
 8008234:	7821      	ldrb	r1, [r4, #0]
 8008236:	2203      	movs	r2, #3
 8008238:	4650      	mov	r0, sl
 800823a:	f7f7 ffd9 	bl	80001f0 <memchr>
 800823e:	b138      	cbz	r0, 8008250 <_svfiprintf_r+0x150>
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	eba0 000a 	sub.w	r0, r0, sl
 8008246:	2240      	movs	r2, #64	; 0x40
 8008248:	4082      	lsls	r2, r0
 800824a:	4313      	orrs	r3, r2
 800824c:	3401      	adds	r4, #1
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008254:	4825      	ldr	r0, [pc, #148]	; (80082ec <_svfiprintf_r+0x1ec>)
 8008256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800825a:	2206      	movs	r2, #6
 800825c:	f7f7 ffc8 	bl	80001f0 <memchr>
 8008260:	2800      	cmp	r0, #0
 8008262:	d038      	beq.n	80082d6 <_svfiprintf_r+0x1d6>
 8008264:	4b22      	ldr	r3, [pc, #136]	; (80082f0 <_svfiprintf_r+0x1f0>)
 8008266:	bb1b      	cbnz	r3, 80082b0 <_svfiprintf_r+0x1b0>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008276:	4433      	add	r3, r6
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	e768      	b.n	800814e <_svfiprintf_r+0x4e>
 800827c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008280:	460c      	mov	r4, r1
 8008282:	2001      	movs	r0, #1
 8008284:	e7a6      	b.n	80081d4 <_svfiprintf_r+0xd4>
 8008286:	2300      	movs	r3, #0
 8008288:	3401      	adds	r4, #1
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	4619      	mov	r1, r3
 800828e:	f04f 0c0a 	mov.w	ip, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008298:	3a30      	subs	r2, #48	; 0x30
 800829a:	2a09      	cmp	r2, #9
 800829c:	d903      	bls.n	80082a6 <_svfiprintf_r+0x1a6>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c6      	beq.n	8008230 <_svfiprintf_r+0x130>
 80082a2:	9105      	str	r1, [sp, #20]
 80082a4:	e7c4      	b.n	8008230 <_svfiprintf_r+0x130>
 80082a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082aa:	4604      	mov	r4, r0
 80082ac:	2301      	movs	r3, #1
 80082ae:	e7f0      	b.n	8008292 <_svfiprintf_r+0x192>
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	462a      	mov	r2, r5
 80082b6:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <_svfiprintf_r+0x1f4>)
 80082b8:	a904      	add	r1, sp, #16
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7fd fe62 	bl	8005f84 <_printf_float>
 80082c0:	1c42      	adds	r2, r0, #1
 80082c2:	4606      	mov	r6, r0
 80082c4:	d1d6      	bne.n	8008274 <_svfiprintf_r+0x174>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	065b      	lsls	r3, r3, #25
 80082ca:	f53f af2d 	bmi.w	8008128 <_svfiprintf_r+0x28>
 80082ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d0:	b01d      	add	sp, #116	; 0x74
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <_svfiprintf_r+0x1f4>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7fe f8f3 	bl	80064cc <_printf_i>
 80082e6:	e7eb      	b.n	80082c0 <_svfiprintf_r+0x1c0>
 80082e8:	0800a87c 	.word	0x0800a87c
 80082ec:	0800a886 	.word	0x0800a886
 80082f0:	08005f85 	.word	0x08005f85
 80082f4:	0800804d 	.word	0x0800804d
 80082f8:	0800a882 	.word	0x0800a882

080082fc <__sflush_r>:
 80082fc:	898a      	ldrh	r2, [r1, #12]
 80082fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	0710      	lsls	r0, r2, #28
 8008306:	460c      	mov	r4, r1
 8008308:	d458      	bmi.n	80083bc <__sflush_r+0xc0>
 800830a:	684b      	ldr	r3, [r1, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dc05      	bgt.n	800831c <__sflush_r+0x20>
 8008310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	dc02      	bgt.n	800831c <__sflush_r+0x20>
 8008316:	2000      	movs	r0, #0
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	2e00      	cmp	r6, #0
 8008320:	d0f9      	beq.n	8008316 <__sflush_r+0x1a>
 8008322:	2300      	movs	r3, #0
 8008324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	6a21      	ldr	r1, [r4, #32]
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	d032      	beq.n	8008396 <__sflush_r+0x9a>
 8008330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	075a      	lsls	r2, r3, #29
 8008336:	d505      	bpl.n	8008344 <__sflush_r+0x48>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	1ac0      	subs	r0, r0, r3
 800833c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800833e:	b10b      	cbz	r3, 8008344 <__sflush_r+0x48>
 8008340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008342:	1ac0      	subs	r0, r0, r3
 8008344:	2300      	movs	r3, #0
 8008346:	4602      	mov	r2, r0
 8008348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800834a:	6a21      	ldr	r1, [r4, #32]
 800834c:	4628      	mov	r0, r5
 800834e:	47b0      	blx	r6
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	d106      	bne.n	8008364 <__sflush_r+0x68>
 8008356:	6829      	ldr	r1, [r5, #0]
 8008358:	291d      	cmp	r1, #29
 800835a:	d82b      	bhi.n	80083b4 <__sflush_r+0xb8>
 800835c:	4a29      	ldr	r2, [pc, #164]	; (8008404 <__sflush_r+0x108>)
 800835e:	410a      	asrs	r2, r1
 8008360:	07d6      	lsls	r6, r2, #31
 8008362:	d427      	bmi.n	80083b4 <__sflush_r+0xb8>
 8008364:	2200      	movs	r2, #0
 8008366:	6062      	str	r2, [r4, #4]
 8008368:	04d9      	lsls	r1, r3, #19
 800836a:	6922      	ldr	r2, [r4, #16]
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	d504      	bpl.n	800837a <__sflush_r+0x7e>
 8008370:	1c42      	adds	r2, r0, #1
 8008372:	d101      	bne.n	8008378 <__sflush_r+0x7c>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b903      	cbnz	r3, 800837a <__sflush_r+0x7e>
 8008378:	6560      	str	r0, [r4, #84]	; 0x54
 800837a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837c:	602f      	str	r7, [r5, #0]
 800837e:	2900      	cmp	r1, #0
 8008380:	d0c9      	beq.n	8008316 <__sflush_r+0x1a>
 8008382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008386:	4299      	cmp	r1, r3
 8008388:	d002      	beq.n	8008390 <__sflush_r+0x94>
 800838a:	4628      	mov	r0, r5
 800838c:	f7ff f9e2 	bl	8007754 <_free_r>
 8008390:	2000      	movs	r0, #0
 8008392:	6360      	str	r0, [r4, #52]	; 0x34
 8008394:	e7c0      	b.n	8008318 <__sflush_r+0x1c>
 8008396:	2301      	movs	r3, #1
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	1c41      	adds	r1, r0, #1
 800839e:	d1c8      	bne.n	8008332 <__sflush_r+0x36>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c5      	beq.n	8008332 <__sflush_r+0x36>
 80083a6:	2b1d      	cmp	r3, #29
 80083a8:	d001      	beq.n	80083ae <__sflush_r+0xb2>
 80083aa:	2b16      	cmp	r3, #22
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0xb6>
 80083ae:	602f      	str	r7, [r5, #0]
 80083b0:	e7b1      	b.n	8008316 <__sflush_r+0x1a>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7ad      	b.n	8008318 <__sflush_r+0x1c>
 80083bc:	690f      	ldr	r7, [r1, #16]
 80083be:	2f00      	cmp	r7, #0
 80083c0:	d0a9      	beq.n	8008316 <__sflush_r+0x1a>
 80083c2:	0793      	lsls	r3, r2, #30
 80083c4:	680e      	ldr	r6, [r1, #0]
 80083c6:	bf08      	it	eq
 80083c8:	694b      	ldreq	r3, [r1, #20]
 80083ca:	600f      	str	r7, [r1, #0]
 80083cc:	bf18      	it	ne
 80083ce:	2300      	movne	r3, #0
 80083d0:	eba6 0807 	sub.w	r8, r6, r7
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	dd9c      	ble.n	8008316 <__sflush_r+0x1a>
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083e0:	4643      	mov	r3, r8
 80083e2:	463a      	mov	r2, r7
 80083e4:	4628      	mov	r0, r5
 80083e6:	47b0      	blx	r6
 80083e8:	2800      	cmp	r0, #0
 80083ea:	dc06      	bgt.n	80083fa <__sflush_r+0xfe>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	e78e      	b.n	8008318 <__sflush_r+0x1c>
 80083fa:	4407      	add	r7, r0
 80083fc:	eba8 0800 	sub.w	r8, r8, r0
 8008400:	e7e9      	b.n	80083d6 <__sflush_r+0xda>
 8008402:	bf00      	nop
 8008404:	dfbffffe 	.word	0xdfbffffe

08008408 <_fflush_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	690b      	ldr	r3, [r1, #16]
 800840c:	4605      	mov	r5, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b913      	cbnz	r3, 8008418 <_fflush_r+0x10>
 8008412:	2500      	movs	r5, #0
 8008414:	4628      	mov	r0, r5
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	b118      	cbz	r0, 8008422 <_fflush_r+0x1a>
 800841a:	6a03      	ldr	r3, [r0, #32]
 800841c:	b90b      	cbnz	r3, 8008422 <_fflush_r+0x1a>
 800841e:	f7fe fa03 	bl	8006828 <__sinit>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f3      	beq.n	8008412 <_fflush_r+0xa>
 800842a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d404      	bmi.n	800843a <_fflush_r+0x32>
 8008430:	0599      	lsls	r1, r3, #22
 8008432:	d402      	bmi.n	800843a <_fflush_r+0x32>
 8008434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008436:	f7fe fb0e 	bl	8006a56 <__retarget_lock_acquire_recursive>
 800843a:	4628      	mov	r0, r5
 800843c:	4621      	mov	r1, r4
 800843e:	f7ff ff5d 	bl	80082fc <__sflush_r>
 8008442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	4605      	mov	r5, r0
 8008448:	d4e4      	bmi.n	8008414 <_fflush_r+0xc>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	059b      	lsls	r3, r3, #22
 800844e:	d4e1      	bmi.n	8008414 <_fflush_r+0xc>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f7fe fb01 	bl	8006a58 <__retarget_lock_release_recursive>
 8008456:	e7dd      	b.n	8008414 <_fflush_r+0xc>

08008458 <memmove>:
 8008458:	4288      	cmp	r0, r1
 800845a:	b510      	push	{r4, lr}
 800845c:	eb01 0402 	add.w	r4, r1, r2
 8008460:	d902      	bls.n	8008468 <memmove+0x10>
 8008462:	4284      	cmp	r4, r0
 8008464:	4623      	mov	r3, r4
 8008466:	d807      	bhi.n	8008478 <memmove+0x20>
 8008468:	1e43      	subs	r3, r0, #1
 800846a:	42a1      	cmp	r1, r4
 800846c:	d008      	beq.n	8008480 <memmove+0x28>
 800846e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008476:	e7f8      	b.n	800846a <memmove+0x12>
 8008478:	4402      	add	r2, r0
 800847a:	4601      	mov	r1, r0
 800847c:	428a      	cmp	r2, r1
 800847e:	d100      	bne.n	8008482 <memmove+0x2a>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800848a:	e7f7      	b.n	800847c <memmove+0x24>

0800848c <_sbrk_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	; (80084a8 <_sbrk_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f8 ffd4 	bl	8001444 <_sbrk>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_sbrk_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_sbrk_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000628 	.word	0x20000628

080084ac <memcpy>:
 80084ac:	440a      	add	r2, r1
 80084ae:	4291      	cmp	r1, r2
 80084b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084b4:	d100      	bne.n	80084b8 <memcpy+0xc>
 80084b6:	4770      	bx	lr
 80084b8:	b510      	push	{r4, lr}
 80084ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084c2:	4291      	cmp	r1, r2
 80084c4:	d1f9      	bne.n	80084ba <memcpy+0xe>
 80084c6:	bd10      	pop	{r4, pc}

080084c8 <__assert_func>:
 80084c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ca:	4614      	mov	r4, r2
 80084cc:	461a      	mov	r2, r3
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <__assert_func+0x2c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4605      	mov	r5, r0
 80084d4:	68d8      	ldr	r0, [r3, #12]
 80084d6:	b14c      	cbz	r4, 80084ec <__assert_func+0x24>
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <__assert_func+0x30>)
 80084da:	9100      	str	r1, [sp, #0]
 80084dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084e0:	4906      	ldr	r1, [pc, #24]	; (80084fc <__assert_func+0x34>)
 80084e2:	462b      	mov	r3, r5
 80084e4:	f000 f872 	bl	80085cc <fiprintf>
 80084e8:	f000 f882 	bl	80085f0 <abort>
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <__assert_func+0x38>)
 80084ee:	461c      	mov	r4, r3
 80084f0:	e7f3      	b.n	80084da <__assert_func+0x12>
 80084f2:	bf00      	nop
 80084f4:	200000ac 	.word	0x200000ac
 80084f8:	0800a897 	.word	0x0800a897
 80084fc:	0800a8a4 	.word	0x0800a8a4
 8008500:	0800a8d2 	.word	0x0800a8d2

08008504 <_calloc_r>:
 8008504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008506:	fba1 2402 	umull	r2, r4, r1, r2
 800850a:	b94c      	cbnz	r4, 8008520 <_calloc_r+0x1c>
 800850c:	4611      	mov	r1, r2
 800850e:	9201      	str	r2, [sp, #4]
 8008510:	f7ff f994 	bl	800783c <_malloc_r>
 8008514:	9a01      	ldr	r2, [sp, #4]
 8008516:	4605      	mov	r5, r0
 8008518:	b930      	cbnz	r0, 8008528 <_calloc_r+0x24>
 800851a:	4628      	mov	r0, r5
 800851c:	b003      	add	sp, #12
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	220c      	movs	r2, #12
 8008522:	6002      	str	r2, [r0, #0]
 8008524:	2500      	movs	r5, #0
 8008526:	e7f8      	b.n	800851a <_calloc_r+0x16>
 8008528:	4621      	mov	r1, r4
 800852a:	f7fe fa16 	bl	800695a <memset>
 800852e:	e7f4      	b.n	800851a <_calloc_r+0x16>

08008530 <__ascii_mbtowc>:
 8008530:	b082      	sub	sp, #8
 8008532:	b901      	cbnz	r1, 8008536 <__ascii_mbtowc+0x6>
 8008534:	a901      	add	r1, sp, #4
 8008536:	b142      	cbz	r2, 800854a <__ascii_mbtowc+0x1a>
 8008538:	b14b      	cbz	r3, 800854e <__ascii_mbtowc+0x1e>
 800853a:	7813      	ldrb	r3, [r2, #0]
 800853c:	600b      	str	r3, [r1, #0]
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	1e10      	subs	r0, r2, #0
 8008542:	bf18      	it	ne
 8008544:	2001      	movne	r0, #1
 8008546:	b002      	add	sp, #8
 8008548:	4770      	bx	lr
 800854a:	4610      	mov	r0, r2
 800854c:	e7fb      	b.n	8008546 <__ascii_mbtowc+0x16>
 800854e:	f06f 0001 	mvn.w	r0, #1
 8008552:	e7f8      	b.n	8008546 <__ascii_mbtowc+0x16>

08008554 <_realloc_r>:
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	4680      	mov	r8, r0
 800855a:	4614      	mov	r4, r2
 800855c:	460e      	mov	r6, r1
 800855e:	b921      	cbnz	r1, 800856a <_realloc_r+0x16>
 8008560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	4611      	mov	r1, r2
 8008566:	f7ff b969 	b.w	800783c <_malloc_r>
 800856a:	b92a      	cbnz	r2, 8008578 <_realloc_r+0x24>
 800856c:	f7ff f8f2 	bl	8007754 <_free_r>
 8008570:	4625      	mov	r5, r4
 8008572:	4628      	mov	r0, r5
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	f000 f841 	bl	80085fe <_malloc_usable_size_r>
 800857c:	4284      	cmp	r4, r0
 800857e:	4607      	mov	r7, r0
 8008580:	d802      	bhi.n	8008588 <_realloc_r+0x34>
 8008582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008586:	d812      	bhi.n	80085ae <_realloc_r+0x5a>
 8008588:	4621      	mov	r1, r4
 800858a:	4640      	mov	r0, r8
 800858c:	f7ff f956 	bl	800783c <_malloc_r>
 8008590:	4605      	mov	r5, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d0ed      	beq.n	8008572 <_realloc_r+0x1e>
 8008596:	42bc      	cmp	r4, r7
 8008598:	4622      	mov	r2, r4
 800859a:	4631      	mov	r1, r6
 800859c:	bf28      	it	cs
 800859e:	463a      	movcs	r2, r7
 80085a0:	f7ff ff84 	bl	80084ac <memcpy>
 80085a4:	4631      	mov	r1, r6
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7ff f8d4 	bl	8007754 <_free_r>
 80085ac:	e7e1      	b.n	8008572 <_realloc_r+0x1e>
 80085ae:	4635      	mov	r5, r6
 80085b0:	e7df      	b.n	8008572 <_realloc_r+0x1e>

080085b2 <__ascii_wctomb>:
 80085b2:	b149      	cbz	r1, 80085c8 <__ascii_wctomb+0x16>
 80085b4:	2aff      	cmp	r2, #255	; 0xff
 80085b6:	bf85      	ittet	hi
 80085b8:	238a      	movhi	r3, #138	; 0x8a
 80085ba:	6003      	strhi	r3, [r0, #0]
 80085bc:	700a      	strbls	r2, [r1, #0]
 80085be:	f04f 30ff 	movhi.w	r0, #4294967295
 80085c2:	bf98      	it	ls
 80085c4:	2001      	movls	r0, #1
 80085c6:	4770      	bx	lr
 80085c8:	4608      	mov	r0, r1
 80085ca:	4770      	bx	lr

080085cc <fiprintf>:
 80085cc:	b40e      	push	{r1, r2, r3}
 80085ce:	b503      	push	{r0, r1, lr}
 80085d0:	4601      	mov	r1, r0
 80085d2:	ab03      	add	r3, sp, #12
 80085d4:	4805      	ldr	r0, [pc, #20]	; (80085ec <fiprintf+0x20>)
 80085d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	f000 f83f 	bl	8008660 <_vfiprintf_r>
 80085e2:	b002      	add	sp, #8
 80085e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e8:	b003      	add	sp, #12
 80085ea:	4770      	bx	lr
 80085ec:	200000ac 	.word	0x200000ac

080085f0 <abort>:
 80085f0:	b508      	push	{r3, lr}
 80085f2:	2006      	movs	r0, #6
 80085f4:	f000 fa0c 	bl	8008a10 <raise>
 80085f8:	2001      	movs	r0, #1
 80085fa:	f7f8 feab 	bl	8001354 <_exit>

080085fe <_malloc_usable_size_r>:
 80085fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008602:	1f18      	subs	r0, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbc      	itt	lt
 8008608:	580b      	ldrlt	r3, [r1, r0]
 800860a:	18c0      	addlt	r0, r0, r3
 800860c:	4770      	bx	lr

0800860e <__sfputc_r>:
 800860e:	6893      	ldr	r3, [r2, #8]
 8008610:	3b01      	subs	r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	b410      	push	{r4}
 8008616:	6093      	str	r3, [r2, #8]
 8008618:	da08      	bge.n	800862c <__sfputc_r+0x1e>
 800861a:	6994      	ldr	r4, [r2, #24]
 800861c:	42a3      	cmp	r3, r4
 800861e:	db01      	blt.n	8008624 <__sfputc_r+0x16>
 8008620:	290a      	cmp	r1, #10
 8008622:	d103      	bne.n	800862c <__sfputc_r+0x1e>
 8008624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008628:	f000 b934 	b.w	8008894 <__swbuf_r>
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	1c58      	adds	r0, r3, #1
 8008630:	6010      	str	r0, [r2, #0]
 8008632:	7019      	strb	r1, [r3, #0]
 8008634:	4608      	mov	r0, r1
 8008636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863a:	4770      	bx	lr

0800863c <__sfputs_r>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	4606      	mov	r6, r0
 8008640:	460f      	mov	r7, r1
 8008642:	4614      	mov	r4, r2
 8008644:	18d5      	adds	r5, r2, r3
 8008646:	42ac      	cmp	r4, r5
 8008648:	d101      	bne.n	800864e <__sfputs_r+0x12>
 800864a:	2000      	movs	r0, #0
 800864c:	e007      	b.n	800865e <__sfputs_r+0x22>
 800864e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008652:	463a      	mov	r2, r7
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff ffda 	bl	800860e <__sfputc_r>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d1f3      	bne.n	8008646 <__sfputs_r+0xa>
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008660 <_vfiprintf_r>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	460d      	mov	r5, r1
 8008666:	b09d      	sub	sp, #116	; 0x74
 8008668:	4614      	mov	r4, r2
 800866a:	4698      	mov	r8, r3
 800866c:	4606      	mov	r6, r0
 800866e:	b118      	cbz	r0, 8008678 <_vfiprintf_r+0x18>
 8008670:	6a03      	ldr	r3, [r0, #32]
 8008672:	b90b      	cbnz	r3, 8008678 <_vfiprintf_r+0x18>
 8008674:	f7fe f8d8 	bl	8006828 <__sinit>
 8008678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867a:	07d9      	lsls	r1, r3, #31
 800867c:	d405      	bmi.n	800868a <_vfiprintf_r+0x2a>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	059a      	lsls	r2, r3, #22
 8008682:	d402      	bmi.n	800868a <_vfiprintf_r+0x2a>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7fe f9e6 	bl	8006a56 <__retarget_lock_acquire_recursive>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	071b      	lsls	r3, r3, #28
 800868e:	d501      	bpl.n	8008694 <_vfiprintf_r+0x34>
 8008690:	692b      	ldr	r3, [r5, #16]
 8008692:	b99b      	cbnz	r3, 80086bc <_vfiprintf_r+0x5c>
 8008694:	4629      	mov	r1, r5
 8008696:	4630      	mov	r0, r6
 8008698:	f000 f93a 	bl	8008910 <__swsetup_r>
 800869c:	b170      	cbz	r0, 80086bc <_vfiprintf_r+0x5c>
 800869e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a0:	07dc      	lsls	r4, r3, #31
 80086a2:	d504      	bpl.n	80086ae <_vfiprintf_r+0x4e>
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	b01d      	add	sp, #116	; 0x74
 80086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	89ab      	ldrh	r3, [r5, #12]
 80086b0:	0598      	lsls	r0, r3, #22
 80086b2:	d4f7      	bmi.n	80086a4 <_vfiprintf_r+0x44>
 80086b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b6:	f7fe f9cf 	bl	8006a58 <__retarget_lock_release_recursive>
 80086ba:	e7f3      	b.n	80086a4 <_vfiprintf_r+0x44>
 80086bc:	2300      	movs	r3, #0
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	2320      	movs	r3, #32
 80086c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ca:	2330      	movs	r3, #48	; 0x30
 80086cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008880 <_vfiprintf_r+0x220>
 80086d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086d4:	f04f 0901 	mov.w	r9, #1
 80086d8:	4623      	mov	r3, r4
 80086da:	469a      	mov	sl, r3
 80086dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e0:	b10a      	cbz	r2, 80086e6 <_vfiprintf_r+0x86>
 80086e2:	2a25      	cmp	r2, #37	; 0x25
 80086e4:	d1f9      	bne.n	80086da <_vfiprintf_r+0x7a>
 80086e6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ea:	d00b      	beq.n	8008704 <_vfiprintf_r+0xa4>
 80086ec:	465b      	mov	r3, fp
 80086ee:	4622      	mov	r2, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ffa2 	bl	800863c <__sfputs_r>
 80086f8:	3001      	adds	r0, #1
 80086fa:	f000 80a9 	beq.w	8008850 <_vfiprintf_r+0x1f0>
 80086fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008700:	445a      	add	r2, fp
 8008702:	9209      	str	r2, [sp, #36]	; 0x24
 8008704:	f89a 3000 	ldrb.w	r3, [sl]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 80a1 	beq.w	8008850 <_vfiprintf_r+0x1f0>
 800870e:	2300      	movs	r3, #0
 8008710:	f04f 32ff 	mov.w	r2, #4294967295
 8008714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008718:	f10a 0a01 	add.w	sl, sl, #1
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	9307      	str	r3, [sp, #28]
 8008720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008724:	931a      	str	r3, [sp, #104]	; 0x68
 8008726:	4654      	mov	r4, sl
 8008728:	2205      	movs	r2, #5
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	4854      	ldr	r0, [pc, #336]	; (8008880 <_vfiprintf_r+0x220>)
 8008730:	f7f7 fd5e 	bl	80001f0 <memchr>
 8008734:	9a04      	ldr	r2, [sp, #16]
 8008736:	b9d8      	cbnz	r0, 8008770 <_vfiprintf_r+0x110>
 8008738:	06d1      	lsls	r1, r2, #27
 800873a:	bf44      	itt	mi
 800873c:	2320      	movmi	r3, #32
 800873e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008742:	0713      	lsls	r3, r2, #28
 8008744:	bf44      	itt	mi
 8008746:	232b      	movmi	r3, #43	; 0x2b
 8008748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874c:	f89a 3000 	ldrb.w	r3, [sl]
 8008750:	2b2a      	cmp	r3, #42	; 0x2a
 8008752:	d015      	beq.n	8008780 <_vfiprintf_r+0x120>
 8008754:	9a07      	ldr	r2, [sp, #28]
 8008756:	4654      	mov	r4, sl
 8008758:	2000      	movs	r0, #0
 800875a:	f04f 0c0a 	mov.w	ip, #10
 800875e:	4621      	mov	r1, r4
 8008760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008764:	3b30      	subs	r3, #48	; 0x30
 8008766:	2b09      	cmp	r3, #9
 8008768:	d94d      	bls.n	8008806 <_vfiprintf_r+0x1a6>
 800876a:	b1b0      	cbz	r0, 800879a <_vfiprintf_r+0x13a>
 800876c:	9207      	str	r2, [sp, #28]
 800876e:	e014      	b.n	800879a <_vfiprintf_r+0x13a>
 8008770:	eba0 0308 	sub.w	r3, r0, r8
 8008774:	fa09 f303 	lsl.w	r3, r9, r3
 8008778:	4313      	orrs	r3, r2
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	46a2      	mov	sl, r4
 800877e:	e7d2      	b.n	8008726 <_vfiprintf_r+0xc6>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	1d19      	adds	r1, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9103      	str	r1, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfbb      	ittet	lt
 800878c:	425b      	neglt	r3, r3
 800878e:	f042 0202 	orrlt.w	r2, r2, #2
 8008792:	9307      	strge	r3, [sp, #28]
 8008794:	9307      	strlt	r3, [sp, #28]
 8008796:	bfb8      	it	lt
 8008798:	9204      	strlt	r2, [sp, #16]
 800879a:	7823      	ldrb	r3, [r4, #0]
 800879c:	2b2e      	cmp	r3, #46	; 0x2e
 800879e:	d10c      	bne.n	80087ba <_vfiprintf_r+0x15a>
 80087a0:	7863      	ldrb	r3, [r4, #1]
 80087a2:	2b2a      	cmp	r3, #42	; 0x2a
 80087a4:	d134      	bne.n	8008810 <_vfiprintf_r+0x1b0>
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	1d1a      	adds	r2, r3, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	9203      	str	r2, [sp, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bfb8      	it	lt
 80087b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b6:	3402      	adds	r4, #2
 80087b8:	9305      	str	r3, [sp, #20]
 80087ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008890 <_vfiprintf_r+0x230>
 80087be:	7821      	ldrb	r1, [r4, #0]
 80087c0:	2203      	movs	r2, #3
 80087c2:	4650      	mov	r0, sl
 80087c4:	f7f7 fd14 	bl	80001f0 <memchr>
 80087c8:	b138      	cbz	r0, 80087da <_vfiprintf_r+0x17a>
 80087ca:	9b04      	ldr	r3, [sp, #16]
 80087cc:	eba0 000a 	sub.w	r0, r0, sl
 80087d0:	2240      	movs	r2, #64	; 0x40
 80087d2:	4082      	lsls	r2, r0
 80087d4:	4313      	orrs	r3, r2
 80087d6:	3401      	adds	r4, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087de:	4829      	ldr	r0, [pc, #164]	; (8008884 <_vfiprintf_r+0x224>)
 80087e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e4:	2206      	movs	r2, #6
 80087e6:	f7f7 fd03 	bl	80001f0 <memchr>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d03f      	beq.n	800886e <_vfiprintf_r+0x20e>
 80087ee:	4b26      	ldr	r3, [pc, #152]	; (8008888 <_vfiprintf_r+0x228>)
 80087f0:	bb1b      	cbnz	r3, 800883a <_vfiprintf_r+0x1da>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	3307      	adds	r3, #7
 80087f6:	f023 0307 	bic.w	r3, r3, #7
 80087fa:	3308      	adds	r3, #8
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	443b      	add	r3, r7
 8008802:	9309      	str	r3, [sp, #36]	; 0x24
 8008804:	e768      	b.n	80086d8 <_vfiprintf_r+0x78>
 8008806:	fb0c 3202 	mla	r2, ip, r2, r3
 800880a:	460c      	mov	r4, r1
 800880c:	2001      	movs	r0, #1
 800880e:	e7a6      	b.n	800875e <_vfiprintf_r+0xfe>
 8008810:	2300      	movs	r3, #0
 8008812:	3401      	adds	r4, #1
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	4619      	mov	r1, r3
 8008818:	f04f 0c0a 	mov.w	ip, #10
 800881c:	4620      	mov	r0, r4
 800881e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008822:	3a30      	subs	r2, #48	; 0x30
 8008824:	2a09      	cmp	r2, #9
 8008826:	d903      	bls.n	8008830 <_vfiprintf_r+0x1d0>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0c6      	beq.n	80087ba <_vfiprintf_r+0x15a>
 800882c:	9105      	str	r1, [sp, #20]
 800882e:	e7c4      	b.n	80087ba <_vfiprintf_r+0x15a>
 8008830:	fb0c 2101 	mla	r1, ip, r1, r2
 8008834:	4604      	mov	r4, r0
 8008836:	2301      	movs	r3, #1
 8008838:	e7f0      	b.n	800881c <_vfiprintf_r+0x1bc>
 800883a:	ab03      	add	r3, sp, #12
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	462a      	mov	r2, r5
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <_vfiprintf_r+0x22c>)
 8008842:	a904      	add	r1, sp, #16
 8008844:	4630      	mov	r0, r6
 8008846:	f7fd fb9d 	bl	8005f84 <_printf_float>
 800884a:	4607      	mov	r7, r0
 800884c:	1c78      	adds	r0, r7, #1
 800884e:	d1d6      	bne.n	80087fe <_vfiprintf_r+0x19e>
 8008850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d405      	bmi.n	8008862 <_vfiprintf_r+0x202>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	059a      	lsls	r2, r3, #22
 800885a:	d402      	bmi.n	8008862 <_vfiprintf_r+0x202>
 800885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885e:	f7fe f8fb 	bl	8006a58 <__retarget_lock_release_recursive>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	065b      	lsls	r3, r3, #25
 8008866:	f53f af1d 	bmi.w	80086a4 <_vfiprintf_r+0x44>
 800886a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800886c:	e71c      	b.n	80086a8 <_vfiprintf_r+0x48>
 800886e:	ab03      	add	r3, sp, #12
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	462a      	mov	r2, r5
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <_vfiprintf_r+0x22c>)
 8008876:	a904      	add	r1, sp, #16
 8008878:	4630      	mov	r0, r6
 800887a:	f7fd fe27 	bl	80064cc <_printf_i>
 800887e:	e7e4      	b.n	800884a <_vfiprintf_r+0x1ea>
 8008880:	0800a87c 	.word	0x0800a87c
 8008884:	0800a886 	.word	0x0800a886
 8008888:	08005f85 	.word	0x08005f85
 800888c:	0800863d 	.word	0x0800863d
 8008890:	0800a882 	.word	0x0800a882

08008894 <__swbuf_r>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	460e      	mov	r6, r1
 8008898:	4614      	mov	r4, r2
 800889a:	4605      	mov	r5, r0
 800889c:	b118      	cbz	r0, 80088a6 <__swbuf_r+0x12>
 800889e:	6a03      	ldr	r3, [r0, #32]
 80088a0:	b90b      	cbnz	r3, 80088a6 <__swbuf_r+0x12>
 80088a2:	f7fd ffc1 	bl	8006828 <__sinit>
 80088a6:	69a3      	ldr	r3, [r4, #24]
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	071a      	lsls	r2, r3, #28
 80088ae:	d525      	bpl.n	80088fc <__swbuf_r+0x68>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b31b      	cbz	r3, 80088fc <__swbuf_r+0x68>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	6922      	ldr	r2, [r4, #16]
 80088b8:	1a98      	subs	r0, r3, r2
 80088ba:	6963      	ldr	r3, [r4, #20]
 80088bc:	b2f6      	uxtb	r6, r6
 80088be:	4283      	cmp	r3, r0
 80088c0:	4637      	mov	r7, r6
 80088c2:	dc04      	bgt.n	80088ce <__swbuf_r+0x3a>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fd9e 	bl	8008408 <_fflush_r>
 80088cc:	b9e0      	cbnz	r0, 8008908 <__swbuf_r+0x74>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	701e      	strb	r6, [r3, #0]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d004      	beq.n	80088ee <__swbuf_r+0x5a>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d506      	bpl.n	80088f8 <__swbuf_r+0x64>
 80088ea:	2e0a      	cmp	r6, #10
 80088ec:	d104      	bne.n	80088f8 <__swbuf_r+0x64>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f7ff fd89 	bl	8008408 <_fflush_r>
 80088f6:	b938      	cbnz	r0, 8008908 <__swbuf_r+0x74>
 80088f8:	4638      	mov	r0, r7
 80088fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f806 	bl	8008910 <__swsetup_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	d0d5      	beq.n	80088b4 <__swbuf_r+0x20>
 8008908:	f04f 37ff 	mov.w	r7, #4294967295
 800890c:	e7f4      	b.n	80088f8 <__swbuf_r+0x64>
	...

08008910 <__swsetup_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <__swsetup_r+0xac>)
 8008914:	4605      	mov	r5, r0
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	460c      	mov	r4, r1
 800891a:	b118      	cbz	r0, 8008924 <__swsetup_r+0x14>
 800891c:	6a03      	ldr	r3, [r0, #32]
 800891e:	b90b      	cbnz	r3, 8008924 <__swsetup_r+0x14>
 8008920:	f7fd ff82 	bl	8006828 <__sinit>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892a:	0718      	lsls	r0, r3, #28
 800892c:	d422      	bmi.n	8008974 <__swsetup_r+0x64>
 800892e:	06d9      	lsls	r1, r3, #27
 8008930:	d407      	bmi.n	8008942 <__swsetup_r+0x32>
 8008932:	2309      	movs	r3, #9
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	e034      	b.n	80089ac <__swsetup_r+0x9c>
 8008942:	0758      	lsls	r0, r3, #29
 8008944:	d512      	bpl.n	800896c <__swsetup_r+0x5c>
 8008946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008948:	b141      	cbz	r1, 800895c <__swsetup_r+0x4c>
 800894a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894e:	4299      	cmp	r1, r3
 8008950:	d002      	beq.n	8008958 <__swsetup_r+0x48>
 8008952:	4628      	mov	r0, r5
 8008954:	f7fe fefe 	bl	8007754 <_free_r>
 8008958:	2300      	movs	r3, #0
 800895a:	6363      	str	r3, [r4, #52]	; 0x34
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	2300      	movs	r3, #0
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f043 0308 	orr.w	r3, r3, #8
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	b94b      	cbnz	r3, 800898c <__swsetup_r+0x7c>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800897e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008982:	d003      	beq.n	800898c <__swsetup_r+0x7c>
 8008984:	4621      	mov	r1, r4
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f884 	bl	8008a94 <__smakebuf_r>
 800898c:	89a0      	ldrh	r0, [r4, #12]
 800898e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008992:	f010 0301 	ands.w	r3, r0, #1
 8008996:	d00a      	beq.n	80089ae <__swsetup_r+0x9e>
 8008998:	2300      	movs	r3, #0
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	6963      	ldr	r3, [r4, #20]
 800899e:	425b      	negs	r3, r3
 80089a0:	61a3      	str	r3, [r4, #24]
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	b943      	cbnz	r3, 80089b8 <__swsetup_r+0xa8>
 80089a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089aa:	d1c4      	bne.n	8008936 <__swsetup_r+0x26>
 80089ac:	bd38      	pop	{r3, r4, r5, pc}
 80089ae:	0781      	lsls	r1, r0, #30
 80089b0:	bf58      	it	pl
 80089b2:	6963      	ldrpl	r3, [r4, #20]
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	e7f4      	b.n	80089a2 <__swsetup_r+0x92>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7f7      	b.n	80089ac <__swsetup_r+0x9c>
 80089bc:	200000ac 	.word	0x200000ac

080089c0 <_raise_r>:
 80089c0:	291f      	cmp	r1, #31
 80089c2:	b538      	push	{r3, r4, r5, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	d904      	bls.n	80089d4 <_raise_r+0x14>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 30ff 	mov.w	r0, #4294967295
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089d6:	b112      	cbz	r2, 80089de <_raise_r+0x1e>
 80089d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089dc:	b94b      	cbnz	r3, 80089f2 <_raise_r+0x32>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f830 	bl	8008a44 <_getpid_r>
 80089e4:	462a      	mov	r2, r5
 80089e6:	4601      	mov	r1, r0
 80089e8:	4620      	mov	r0, r4
 80089ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ee:	f000 b817 	b.w	8008a20 <_kill_r>
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d00a      	beq.n	8008a0c <_raise_r+0x4c>
 80089f6:	1c59      	adds	r1, r3, #1
 80089f8:	d103      	bne.n	8008a02 <_raise_r+0x42>
 80089fa:	2316      	movs	r3, #22
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7e7      	b.n	80089d2 <_raise_r+0x12>
 8008a02:	2400      	movs	r4, #0
 8008a04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a08:	4628      	mov	r0, r5
 8008a0a:	4798      	blx	r3
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7e0      	b.n	80089d2 <_raise_r+0x12>

08008a10 <raise>:
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <raise+0xc>)
 8008a12:	4601      	mov	r1, r0
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	f7ff bfd3 	b.w	80089c0 <_raise_r>
 8008a1a:	bf00      	nop
 8008a1c:	200000ac 	.word	0x200000ac

08008a20 <_kill_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	; (8008a40 <_kill_r+0x20>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	f7f8 fc81 	bl	8001334 <_kill>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d102      	bne.n	8008a3c <_kill_r+0x1c>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b103      	cbz	r3, 8008a3c <_kill_r+0x1c>
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	bd38      	pop	{r3, r4, r5, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000628 	.word	0x20000628

08008a44 <_getpid_r>:
 8008a44:	f7f8 bc6e 	b.w	8001324 <_getpid>

08008a48 <__swhatbuf_r>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	b096      	sub	sp, #88	; 0x58
 8008a54:	4615      	mov	r5, r2
 8008a56:	461e      	mov	r6, r3
 8008a58:	da0d      	bge.n	8008a76 <__swhatbuf_r+0x2e>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	bf0c      	ite	eq
 8008a66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a6a:	2340      	movne	r3, #64	; 0x40
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	6031      	str	r1, [r6, #0]
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	b016      	add	sp, #88	; 0x58
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	466a      	mov	r2, sp
 8008a78:	f000 f848 	bl	8008b0c <_fstat_r>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	dbec      	blt.n	8008a5a <__swhatbuf_r+0x12>
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a8a:	4259      	negs	r1, r3
 8008a8c:	4159      	adcs	r1, r3
 8008a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a92:	e7eb      	b.n	8008a6c <__swhatbuf_r+0x24>

08008a94 <__smakebuf_r>:
 8008a94:	898b      	ldrh	r3, [r1, #12]
 8008a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a98:	079d      	lsls	r5, r3, #30
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	d507      	bpl.n	8008ab0 <__smakebuf_r+0x1c>
 8008aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	6163      	str	r3, [r4, #20]
 8008aac:	b002      	add	sp, #8
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	ab01      	add	r3, sp, #4
 8008ab2:	466a      	mov	r2, sp
 8008ab4:	f7ff ffc8 	bl	8008a48 <__swhatbuf_r>
 8008ab8:	9900      	ldr	r1, [sp, #0]
 8008aba:	4605      	mov	r5, r0
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fe febd 	bl	800783c <_malloc_r>
 8008ac2:	b948      	cbnz	r0, 8008ad8 <__smakebuf_r+0x44>
 8008ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac8:	059a      	lsls	r2, r3, #22
 8008aca:	d4ef      	bmi.n	8008aac <__smakebuf_r+0x18>
 8008acc:	f023 0303 	bic.w	r3, r3, #3
 8008ad0:	f043 0302 	orr.w	r3, r3, #2
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	e7e3      	b.n	8008aa0 <__smakebuf_r+0xc>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	6163      	str	r3, [r4, #20]
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	6120      	str	r0, [r4, #16]
 8008aea:	b15b      	cbz	r3, 8008b04 <__smakebuf_r+0x70>
 8008aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f81d 	bl	8008b30 <_isatty_r>
 8008af6:	b128      	cbz	r0, 8008b04 <__smakebuf_r+0x70>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	431d      	orrs	r5, r3
 8008b08:	81a5      	strh	r5, [r4, #12]
 8008b0a:	e7cf      	b.n	8008aac <__smakebuf_r+0x18>

08008b0c <_fstat_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_fstat_r+0x20>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f7f8 fc6a 	bl	80013f2 <_fstat>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d102      	bne.n	8008b28 <_fstat_r+0x1c>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b103      	cbz	r3, 8008b28 <_fstat_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000628 	.word	0x20000628

08008b30 <_isatty_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d06      	ldr	r5, [pc, #24]	; (8008b4c <_isatty_r+0x1c>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	f7f8 fc69 	bl	8001412 <_isatty>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_isatty_r+0x1a>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_isatty_r+0x1a>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000628 	.word	0x20000628

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
